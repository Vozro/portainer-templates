[
  {
  "title": "smokeping",
  "description": "smokeping",
  "image": "linuxserver/smokeping:latest",
  "ports": [
    "8080/tcp"
  ],
  "volumes": [
    "/config",
    "/data"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    }
  ],
  "note": "<h1>Overview:</h1>\n<p>Smokeping keeps track of your network latency.</p>\n<h1>Parameters:</h1>\n<ul>\n<li>8080 - Smokeping WebUI Port</li>\n<li>/data - Storage location for db and application data (graphs etc)</li>\n<li>/config - Configure the Targets file here</li>\n<li>PGID for for GroupID - see below for explanation</li>\n<li>PUID for for UserID - see below for explanation</li>\n<li>TZ for timezone EG. Europe/London</li>\n</ul>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes, permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Accessing the application</h2>\n<p>WebUI can be found at  <code>http://&lt;your-ip&gt;:8080/smokeping/smokeping.cgi</code></p>"
},
{
  "title": "graphite-statsd",
  "description": "graphite-statsd",
  "image": "hopsoft/graphite-statsd:latest",
  "ports": [
    "5080/tcp",
    "2003/tcp",
    "2004/tcp",
    "2023/tcp",
    "2024/tcp",
    "8125/tcp",
    "8126/tcp"
  ],
  "volumes": [
    "/opt/graphite/conf",
    "/opt/graphite/storage",
    "/etc/nginx",
    "/opt/statsd",
    "/etc/logrotate.d",
    "/var/log"
  ],
  "env": [
    {
      "name": "PUID",
      "label": "UserID"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    }
  ],
  "note": "<h1>A Graphite server w/ statsd.</h1>\n<p>Base container is hopsoft/graphite-statsd with FreeNAS metadata added. </p>\n<h2>Login instructions:</h2>\n<p><code>Username: root\nPassword: root</code></p>\n<h3>Setup Graphite to receive data from FreeNAS</h3>\n<ol>\n<li>In FreeNAS go to <em>System</em> -&gt; <em>Preferences</em> and scroll to the bottom and enter the IP of the Graphite server in the field labeled <em>Remote Graphite Server</em> and click <em>Add</em>, then click <em>Save</em></li>\n<li>Open up the Graphite Web UI and login with the username <strong>root</strong> and the password <strong>root</strong></li>\n<li>In the tree in the left-hand pane, expand the <em>Metrics</em> folder, then <em>localhost</em> and you should see a bunch of folders under that, these are all statistics reported from FreeNAS</li>\n<li>If you click on a sub-folder, such as <strong>cpu-0</strong>, then <strong>cpu-system</strong>, then <strong>value</strong>, the chart in the center pane will populate with data. </li>\n</ol>\n<p><em>Note:</em> You probably won't see anything if you have just recently created the Graphite-statd Docker container since data is collected over time and displayed in 4 hour spans.</p>\n<p>That's pretty much it for Graphite, it's pretty simple. If you would like pretty charts and tons of configurable metrics, use the Grafana Docker container in conjunction with Graphite.</p>"
},
{
  "title": "sabnzbd",
  "description": "sabnzbd",
  "image": "linuxserver/sabnzbd:latest",
  "ports": [
    "8080/tcp",
    "9090/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/sabnzbd-banner.png",
  "volumes": [
    "/config",
    "/config/admin/certs",
    "/config/Downloads/incomplete",
    "/config/Downloads/complete",
    "/config/Downloads/watched"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone information, eg Europe/London"
    },
    {
      "name": "PUID",
      "label": "User ID "
    },
    {
      "name": "PGID",
      "label": "Group ID"
    }
  ],
  "note": "<p><a href=\"http://sabnzbd.org/\"><img alt=\"sabnzbd\" src=\"https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/sabnzbd-banner.png\" /></a></p>\n<p>SABnzbd makes Usenet as simple and streamlined as possible by automating everything we can. All you have to do is add an .nzb. SABnzbd takes over from there, where it will be automatically downloaded, verified, repaired, extracted and filed away with zero human interaction.</p>\n<h2>Parameters</h2>\n<ul>\n<li><code>8080</code> - http port for the webui</li>\n<li><code>9090</code> - https port for the webui <em>see note below</em></li>\n<li><code>/config</code> - local path for sabnzbd config files</li>\n<li><code>/config/Downloads/complete</code> local path for finished downloads</li>\n<li><code>/config/Downloads/incomplete</code> local path for incomplete-downloads - <em>optional</em></li>\n<li><code>PGID</code> for GroupID - see below for explanation</li>\n<li><code>PUID</code> for UserID - see below for explanation</li>\n<li><code>TZ</code> for setting timezone information, eg Europe/London</li>\n</ul>\n<p>Container is based on alpine linux with s6 overlay, for shell access whilst the container is running use the console button in the GUI or use the console sub-command in the CLI.</p>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Setting up the application</h2>\n<p>Initial setup is done from the http port.\nHttps access for sabnzbd needs to be enabled in either the intial setup wizard or in the configure settings of the webui, be sure to use 9090 as port for https.\nSee here for info on some of the switch settings for sabnzbd http://wiki.sabnzbd.org/configure-switches</p>"
},
{
  "title": "xdm",
  "description": "xdm",
  "image": "talenddev/xdm:latest",
  "ports": [
    "8085/tcp"
  ],
  "volumes": [
    "/data",
    "/Media",
    "/blackhole",
    "/transmission"
  ],
  "env": [],
  "note": "<h1>xdm container</h1>\n<p>This container is used with couchpotato, headphones, sickbeard and\ntransmission containers.</p>"
},
{
  "title": "letsencrypt",
  "description": "letsencrypt",
  "image": "linuxserver/letsencrypt:latest",
  "ports": [
    "8080/tcp",
    "4343/tcp"
  ],
  "volumes": [
    "/config"
  ],
  "env": [
    {
      "name": "EMAIL",
      "label": "email for cert registration"
    },
    {
      "name": "DHLEVEL",
      "label": "encryption bits 2048/1024/4096"
    },
    {
      "name": "URL",
      "label": "your domain name minus http://"
    },
    {
      "name": "SUBDOMAINS",
      "label": "your subdomains (ie. www,ftp,cloud)"
    },
    {
      "name": "ONLY_SUBDOMAINS",
      "label": "only get certs for certain subdomains"
    },
    {
      "name": "TZ",
      "label": "timezone ie. America/New_York"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    }
  ],
  "note": "<p>This container sets up an Nginx webserver and reverse proxy with php support and a built-in letsencrypt client that automates free SSL server certificate generation and renewal processes. It also contains fail2ban for intrusion prevention.</p>\n<p>Before running this container, make sure that the url and subdomains are properly forwarded to this container's host.</p>\n<p>Port 443 on the internet side of the router should be forwarded to this container's port 443.</p>\n<p>If you need a dynamic dns provider, you can use the free provider duckdns.org where the url will be yoursubdomain.duckdns.org and the subdomains can be www,ftp,cloud</p>\n<p>The container detects changes to url and subdomains, revokes existing certs and generates new ones during start. It also detects changes to the DHLEVEL parameter and replaces the dhparams file.</p>\n<p>If you'd like to password protect your sites, you can use htpasswd. Run the following command on your host to generate the htpasswd file \"letsencrypt htpasswd -c /config/nginx/.htpasswd <username>\"</p>"
},
{
  "title": "influxdb",
  "description": "influxdb",
  "image": "influxdb:latest",
  "ports": [
    "8083/tcp",
    "8086/tcp",
    "2003/tcp"
  ],
  "logo": "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c6/Influxdb_logo.svg/1200px-Influxdb_logo.svg.png",
  "volumes": [
    "/var/lib/influxdb",
    "/etc/influxdb"
  ],
  "env": [
    {
      "name": "INFLUXDB_GRAPHITE_ENABLED",
      "label": "true/false uses port 2003"
    },
    {
      "name": "INFLUXDB_GRAPHITE_DATABASE",
      "label": "The name of the database that you want to write to."
    },
    {
      "name": "INFLUXDB_REPORTING_DISABLED",
      "label": "true will not sent anon data to usage.influxdata.com every 24 hours"
    },
    {
      "name": "INFLUXDB_ADMIN_ENABLED",
      "label": "Set to true to enable the admin interface"
    },
    {
      "name": "PUID",
      "label": "UserID"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    }
  ],
  "note": "<p><a href=\"https://hub.docker.com/_/influxdb/\"><img alt=\"influxdb\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c6/Influxdb_logo.svg/1200px-Influxdb_logo.svg.png\" /></a></p>\n<h3>InfluxDB</h3>\n<p>InfluxDB is a time series database built from the ground up to handle high write and query loads. InfluxDB is meant to be used as a backing store for any use case involving large amounts of timestamped data, including DevOps monitoring, application metrics, IoT sensor data, and real-time analytics.</p>\n<p>[![influxdb_docs]https://docs.influxdata.com/influxdb/latest/)</p>\n<h2>Exposed ports</h2>\n<p>The following ports are important and are used by InfluxDB.</p>\n<ul>\n<li>8086 HTTP API port</li>\n<li>8083 Administrator interface port</li>\n<li>2003 Graphite support, if it is enabled</li>\n</ul>"
},
{
  "title": "grafana",
  "description": "grafana",
  "image": "grafana/grafana:latest",
  "ports": [
    "3000/tcp"
  ],
  "volumes": [
    "/var/lib/grafana",
    "/var/log/grafana"
  ],
  "env": [
    {
      "name": "GF_INSTALL_PLUGINS",
      "label": "CSV List of plugins to install"
    },
    {
      "name": "GF_SERVER_ROOT_URL",
      "label": "Grafana server root URL"
    },
    {
      "name": "GF_SECURITY_ADMIN_PASSWORD",
      "label": "Grafana server admin password"
    }
  ],
  "note": "<h1>A Grafana server (system statistics monitoring visualization toolkit).</h1>\n<p>Base container is grafana/grafana with FreeNAS metadata added. All variables in conf/grafana.ini can be overriden using environment variables.</p>\n<h3>How to setup Grafana to receive data from FreeNAS' Graphite sender</h3>\n<ol>\n<li>Open up the WebUI and login with the username <strong>admin</strong> and the password <strong>admin</strong></li>\n<li>Once at the <em>Home</em> dashboard click on the spiral in the upper left-hand corner and click <em>Data Sources</em></li>\n<li>Select <em>Add Data Source</em>, then select a name for the data source, mark it as <em>Default</em> if you would like; leave the type as <em>Graphite</em>; set the URL to the the IP of your Graphite Docker Container (which should already be setup to receive data from FreeNAS) and use <strong>port 80</strong> if the container is <strong>bridged</strong>, otherwise use <strong>port 5080</strong>; leave everything under <em>HTTP Auth</em> alone; click on the <em>Dashboards</em> tab and select <em>import</em> for <em>Graphite Carbon Metrics</em>; finally click <em>Add</em> under the config tab</li>\n</ol>\n<p>Congratulations you have just setup Grafana to receive data from FreeNAS via the Graphite Docker Container! Now the real fun can begin.</p>\n<h3>How to get Grafana to display the received data in pretty graphs</h3>\n<ol>\n<li>You can click on either the spiral and select <em>Dashboards</em> and click <em>New</em> or click on the dashboard drop down menu (between the spiral and the gear) and select <em>Create New</em> at the bottom. This will bring you to a new dashboard where you can create a customized dashboard to pretty much show whatever you want, and pretty much however you want. It's highly configurable!</li>\n<li>Let's create a graph for CPU temperature in degrees Celsius for one of our CPU cores, so select the <em>Graph</em> panel, which will create a new graph, which will be empty.</li>\n<li>To fill it up with data click the word <em>Panel Title</em> which will open up a small menu above the words, click <em>Edit</em></li>\n<li>This will open up a edit menu. Under the <em>Metrics</em> tab, in the row labeled <em>A</em> click on <em>Select Metric</em> and select <em>localhost</em> (at least that's what mine says); click <em>Select Metric</em> once again and select <em>cputemp-0</em>; Select <em>Temperature</em> from the next field; Select <em>Value</em> from the field after that</li>\n<li>Once the last value is set the graph auto-generates right before your eyes like magic! There's more customization to be done, unless you want to read your temperatures using the Kelvin scale</li>\n<li>Click on the <em>Axes</em> tab and set <em>Scale</em> under <em>Left Y</em> to <em>Celsius</em> under the <em>Temperature</em> menu</li>\n<li>You can overlay more cores on to the same graph by clicking on the button with the three lines in row <em>A</em>, then selecting <em>Duplicate</em>, all you have to change is the second field (cputemp-N)</li>\n<li>Under the <em>General</em> tab you can enter a name to describe this graph using the <em>Title</em> field</li>\n<li>Once you're finished customizing the graph click the <em>X</em> to close the <em>Edit</em> panel, then click the <em>Save</em> icon between the <em>Dashboard</em> menu and the gear icon. Give the Panel a name, and click save. You can add more panels to the same dashboard using the same steps before or after saving the dashboard.</li>\n</ol>\n<p>Here is a instructional video from the creators of Graphana explaining this in visual form:</p>\n<p><a href=\"http://www.youtube.com/watch?feature=player_embedded&v=sKNZMtoSHN4\n\" target=\"_blank\"><img src=\"http://img.youtube.com/vi/sKNZMtoSHN4/0.jpg\" \nalt=\"Creating a New Dashboard\" width=\"240\" height=\"180\" border=\"10\" /></a></p>\n<h3>ENV Variables</h3>\n<ul>\n<li>GF_INSTALL_PLUGINS </li>\n<li>Set this variable to a CSV list of Grafana plugins to install, this will pass each plugin name to <code>grafana-cli plugins install</code>. For example <code>grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel</code>. </li>\n</ul>"
},
{
  "title": "owncloud",
  "description": "owncloud",
  "image": "library/owncloud:latest",
  "ports": [
    "8080/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/docker-library/docs/9d36b4ed7cabc35dbd3849272ba2bd7abe482172/owncloud/logo.png",
  "volumes": [
    "/var/www/html"
  ],
  "env": [],
  "note": "<p><a href=\"https://owncloud.org/\"><img alt=\"owncloud\" src=\"https://raw.githubusercontent.com/docker-library/docs/9d36b4ed7cabc35dbd3849272ba2bd7abe482172/owncloud/logo.png\" /></a></p>\n<h1>What is ownCloud?</h1>\n<p>ownCloud is a self-hosted file sync and share server. It provides access to your data through a web interface, sync clients or WebDAV while providing a platform to view, sync and share across devices easily\u2014all under your control. ownCloud\u2019s open architecture is extensible via a simple but powerful API for applications and plugins and it works with any storage.</p>\n<h1>How to use this image</h1>\n<h2>Start ownCloud</h2>\n<p>Starting the ownCloud instance listening on port 80 is as easy as just creating the container with all the defaults set.</p>\n<p>Then go to http://containerip/ and go through the wizard. By default this container uses SQLite for data storage, but the wizard should allow for connecting to an existing database.</p>\n<p>For a MySQL database you can link a database container by putting it on the same docker network and selecting <code>mysql</code> as the database host on setup.</p>\n<h2>Persistent data</h2>\n<p>All data beyond what lives in the database (file uploads, etc) is stored within the default volume <code>/var/www/html</code>. With this volume, ownCloud will only be updated when the file <code>version.php</code> is not present.</p>\n<ul>\n<li><code>/&lt;mydatalocation&gt;:/var/www/html</code></li>\n</ul>\n<p>For fine grained data persistence, you can use 3 volumes, as shown below.</p>\n<ul>\n<li><code>/&lt;mydatalocation&gt;/apps:/var/www/html/apps</code> installed / modified apps</li>\n<li><code>/&lt;mydatalocation&gt;/config:/var/www/html/config</code> local configuration</li>\n<li><code>/&lt;mydatalocation&gt;/data:/var/www/html/data</code> the actual data of your ownCloud</li>\n</ul>"
},
{
  "title": "docker-clean",
  "description": "docker-clean",
  "image": "zzrot/docker-clean:latest",
  "ports": [],
  "volumes": [
    "/var/run/docker.sock"
  ],
  "env": [],
  "note": "<h1>Docker-Clean</h1>\n<p>zzrot/docker-clean</p>\n<p>A simple Shell script to clean up the Docker Daemon.</p>\n<h2>Requirements</h2>\n<p>Volume mount on the VM /var/run/docker.sock to Container /var/run/docker.sock</p>\n<h2>Usage</h2>\n<p>For a more in depth look at the usage and commands run without browsing the script itself check out our <a href=\"https://github.com/ZZROTDesign/docker-clean/blob/master/USAGE.md\">USAGE.md</a>.</p>\n<pre><code>docker-clean [optional flags below]\n</code></pre>\n<p>Default without arguments deletes stopped containers, dangling volumes, and untagged images.</p>\n<pre><code>  stop         Stops and removes all containers, cleans dangling volumes, and networks\n\n  images       Removes all tagged and untagged images, stopped containers, dangling volumes, and networks\n\n  run          Removes all stopped containers, untagged images, dangling volumes, and networks\n\n  all          Stops and removes all containers, images, volumes and networks\n\n\n \"Additional Flag options:\"\n\n -n   or --dry-run    Adding this additional flag will list items to be\n                      removed without executing any stopping or removing commands\"\n\n -s   or --stop       Stops all running containers\n\n-c   or --containers  Removes all stopped containers\n\n-i   or --images      Removes all untagged images\n\n-net or --networks    Removes all empty Networks (all network cleans are only empty)\n\n-H   or --host        Specifies the docker host to run against\n                      Useful for docker swarm maintenance ie: -H 127.0.0.1:4000\"\n\n -r   or --restart     Restarts the docker machine/daemon\n\n -d   or --created     By default, CREATED containers are set to be removed.  Adding this\n                       flag will ensure that all created containers are not cleaned\n\n -t   or --tagged      Removes all tagged images\n\n -a   or --all         Stops and removes all Containers, Images, AND Restarts docker\n\n -l   or --log         Adding this as an additional flag will list all\n                       image, volume, and container deleting output\n</code></pre>\n<h2>License</h2>\n<p>The code is available under the <a href=\"/LICENSE\">MIT License</a>.</p>"
},
{
  "title": "htpcmanager",
  "description": "htpcmanager",
  "image": "linuxserver/htpcmanager:latest",
  "ports": [
    "8085/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/htpcmanager-icon.png",
  "volumes": [
    "/config"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    }
  ],
  "note": "<p><a href=\"https://github.com/Hellowlol/HTPC-Manager\"><img alt=\"htpcmanager\" src=\"https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/htpcmanager-icon.png\" /></a></p>\n<h1>Htpcmanager, a front end for many htpc related applications.</h1>\n<h2>Parameters</h2>\n<ul>\n<li><code>8085</code> - the port(s)</li>\n<li><code>/config</code> - where htpcmanager should store its configuration files.</li>\n<li><code>PGID</code> for GroupID - see below for explanation</li>\n<li><code>PUID</code> for UserID - see below for explanation</li>\n<li><code>TZ</code> for timezone information, eg Europe/London</li>\n</ul>\n<p>Container is based on alpine linux with s6 overlay, for shell access whilst the container is running use the console button in the GUI or use the console sub-command in the CLI.</p>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Setting up the application</h2>\n<p>The webui is found at port 8085.</p>\n<p>Smartmontools has not been included, you can safely ignore the warning error in the log.</p>"
},
{
  "title": "emby",
  "description": "emby",
  "image": "emby/embyserver:latest",
  "ports": [
    "8096/tcp",
    "8920/tcp",
    "7359/udp",
    "1900/udp"
  ],
  "volumes": [
    "/config",
    "/media",
    "/sslcerts"
  ],
  "env": [
    {
      "name": "APP_GID",
      "label": "GID assigned to APP_USER upon creation"
    },
    {
      "name": "APP_UID",
      "label": "UID assigned to APP_USER upon creation"
    },
    {
      "name": "APP_USER",
      "label": "Name of user the service will run as"
    },
    {
      "name": "EDGE",
      "label": "UID assigned to APP_USER upon creation"
    },
    {
      "name": "UMASK",
      "label": "UID assigned to APP_USER upon creation"
    }
  ],
  "note": "<h1>Emby Server</h1>\n<p>Emby Server is a home media server built on top of other popular open source\ntechnologies such as Service Stack, jQuery, jQuery mobile, and Mono.</p>\n<p>It features a REST-based API with built-in documention to facilitate client\ndevelopment. We also have client libraries for our API to enable rapid\ndevelopment.</p>\n<h1>Environment Variables:</h1>\n<p>You can adjust some of the default settings set for container/application by\npassing any or all of the following environment variable:  </p>\n<p>| ENV VAR      | Definition                                                                     |\n| ------------ | ------------------------------------------------------------------------------ |\n| APP_USER     | Name of user the service will run as.[4]                                     |\n| APP_UID      | UID assigned to APP_USER upon creation, or will query APP_USER's ID.[3]      |\n| APP_GID      | GID assigned to APP_USER upon creation, or will query APP_USER's GID.[3]     |\n| APP_CONFIG   | Location where application will store settings and database on host.[1]      |\n| APP_GCONFIG  | Location where application will store settings and database within guest.[4] |\n| UMASK        | umask assigned to service, default set to 002.[4]                            |\n| EDGE         | Update the containerized service, default set to 0(Off).[4]                  |</p>\n<p>[1]: Variable is applicable only during install.<br />\n[2]: Variable is applicable during install, when invoking installed wrapper script or systemd service.<br />\n[3]: Variable is applicable only when invoking docker run directly.<br />\n[4]: Variable is applicable in all scenarios.  </p>\n<h1>Volumes:</h1>\n<ul>\n<li><code>/config</code>  - Folder for configuration and settings.</li>\n</ul>"
},
{
  "title": "wordpress",
  "description": "wordpress",
  "image": "library/wordpress:4-php7.1-apache",
  "ports": [
    "8888/tcp",
    "4433/tcp"
  ],
  "volumes": [],
  "env": [
    {
      "name": "WORDPRESS_DB_HOST",
      "label": "SQL DB IP Address"
    },
    {
      "name": "WORDPRESS_DB_USER",
      "label": "SQL DB Username"
    },
    {
      "name": "WORDPRESS_DB_PASSWORD",
      "label": "SQL DB Password"
    },
    {
      "name": "WORDPRESS_DB_NAME",
      "label": "SQL DB Name"
    },
    {
      "name": "WORDPRESS_TABLE_PREFIX",
      "label": "SQL Table Prefix"
    }
  ],
  "note": "<h2>How to use this image</h2>\n<p>The following environment variables are also honored for configuring your WordPress instance:</p>\n<p>WORDPRESS_DB_HOST=... (defaults to the IP and port of the linked mysql container)</p>\n<p>WORDPRESS_DB_USER=... (defaults to \"root\")</p>\n<p>WORDPRESS_DB_PASSWORD=... (defaults to the value of the MYSQL_ROOT_PASSWORD environment variable from the linked mysql container)</p>\n<p>WORDPRESS_DB_NAME=... (defaults to \"wordpress\")</p>\n<p>WORDPRESS_TABLE_PREFIX=... (defaults to \"\", only set this when you need to override the default table prefix in wp-config.php)</p>\n<p>WORDPRESS_AUTH_KEY=..., -e WORDPRESS_SECURE_AUTH_KEY=..., -e WORDPRESS_LOGGED_IN_KEY=..., -e WORDPRESS_NONCE_KEY=..., -e WORDPRESS_AUTH_SALT=..., -e WORDPRESS_SECURE_AUTH_SALT=..., -e WORDPRESS_LOGGED_IN_SALT=..., -e WORDPRESS_NONCE_SALT=... (default to unique random SHA1s)</p>\n<p>If the WORDPRESS_DB_NAME specified does not already exist on the given MySQL server, it will be created automatically upon startup of the wordpress container, provided that the WORDPRESS_DB_USER specified has the necessary permissions to create it.</p>"
},
{
  "title": "ubuntu",
  "description": "ubuntu",
  "image": "ubuntu:latest",
  "ports": [],
  "volumes": [],
  "env": [],
  "note": "<h1>Ubuntu Linux</h1>\n<p>This is a simple Ubuntu Linux container. It is an Interactive container, meaning\nthat the Console UI / CLI will talk directly to the command specified (and\ncan be connected / disconnected repeatedly without killing the container).\nThe command argument also MUST be specified - this is generally /bin/sh or\nsome other useful command in the container.</p>"
},
{
  "title": "sonarr",
  "description": "sonarr",
  "image": "linuxserver/sonarr:latest",
  "ports": [
    "8989/tcp",
    "9898/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/sonarr-banner.png",
  "volumes": [
    "/config",
    "/tv",
    "/downloads"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Europe/London"
    },
    {
      "name": "PUID",
      "label": "SONARR USER ID"
    },
    {
      "name": "PGID",
      "label": "SONARR GROUP ID"
    }
  ],
  "note": "<p><a href=\"https://sonarr.tv/\"><img alt=\"sonarr\" src=\"https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/sonarr-banner.png\" /></a></p>\n<h1>Sonarr: A PVR for usenet and bittorrent users</h1>\n<p>Sonarr (formerly NZBdrone) is a PVR for usenet and bittorrent users. It can monitor multiple RSS feeds for new episodes of your favorite shows and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.</p>\n<h2>Parameters</h2>\n<ul>\n<li><code>8989</code> - the port sonarr webinterface</li>\n<li><code>/dev/rtc:/dev/rtc:ro</code> - map hwclock as ReadOnly (mono throws exceptions otherwise)</li>\n<li><code>/config</code> - database and sonarr configs</li>\n<li><code>/tv</code> - location of TV library on disk</li>\n<li><code>PGID</code> for for GroupID - see below for explanation</li>\n<li><code>PUID</code> for for UserID - see below for explanation</li>\n</ul>\n<p>Container is based on alpine linux with s6 overlay, for shell access whilst the container is running use the console button in the GUI or use the console sub-command in the CLI.</p>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" <sup>TM</sup>.</p>\n<h2>Setting up the application</h2>\n<p>Access the webui at <code>&lt;your-ip&gt;:8989</code>, for more information check out <a href=\"https://sonarr.tv/\">Sonarr</a>.</p>"
},
{
  "title": "huginn",
  "description": "huginn",
  "image": "cantino/huginn",
  "ports": [
    "3000/tcp"
  ],
  "logo": "https://raw.github.com/cantino/huginn/master/media/huginn-logo.png",
  "volumes": [
    "/var/lib/mysql"
  ],
  "env": [],
  "note": "<p><img alt=\"Huginn\" src=\"https://raw.github.com/cantino/huginn/master/media/huginn-logo.png\" title=\"Your agents are standing by.\" /></p>\n<hr />\n<h2>What is Huginn?</h2>\n<p>Huginn is a system for building agents that perform automated tasks for you online.  They can read the web, watch for events, and take actions on your behalf.  Huginn's Agents create and consume events, propagating them along a directed graph.  Think of it as a hackable Yahoo! Pipes plus IFTTT on your own server.  You always know who has your data.  You do.</p>\n<p><img alt=\"the origin of the name\" src=\"https://raw.githubusercontent.com/cantino/huginn/master/doc/imgs/the-name.png\" /></p>\n<h4>Here are some of the things that you can do with Huginn:</h4>\n<ul>\n<li>Track the weather and get an email when it's going to rain (or snow) tomorrow (\"Don't forget your umbrella!\")</li>\n<li>List terms that you care about and receive emails when their occurrence on Twitter changes.  (For example, want to know when something interesting has happened in the world of Machine Learning?  Huginn will watch the term \"machine learning\" on Twitter and tell you when there is a spike in discussion.)</li>\n<li>Watch for air travel or shopping deals</li>\n<li>Follow your project names on Twitter and get updates when people mention them</li>\n<li>Scrape websites and receive emails when they change</li>\n<li>Connect to Adioso, HipChat, Basecamp, Growl, FTP, IMAP, Jabber, JIRA, MQTT, nextbus, Pushbullet, Pushover, RSS, Bash, Slack, StubHub, translation APIs, Twilio, Twitter, Wunderground, and Weibo, to name a few.</li>\n<li>Send digest emails with things that you care about at specific times during the day</li>\n<li>Track counts of high frequency events and send an SMS within moments when they spike, such as the term \"san francisco emergency\"</li>\n<li>Send and receive WebHooks</li>\n<li>Run custom JavaScript or CoffeeScript functions</li>\n<li>Track your location over time</li>\n<li>Create Amazon Mechanical Turk workflows as the inputs, or outputs, of agents (the Amazon Turk Agent is called the \"HumanTaskAgent\"). For example: \"Once a day, ask 5 people for a funny cat photo; send the results to 5 more people to be rated; send the top-rated photo to 5 people for a funny caption; send to 5 final people to rate for funniest caption; finally, post the best captioned photo on my blog.\"</li>\n</ul>\n<p><a href=\"https://gitter.im/cantino/huginn?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\"><img alt=\"Gitter\" src=\"https://badges.gitter.im/Join%20Chat.svg\" /></a> <a href=\"https://changelog.com/199\"><img alt=\"Changelog #199\" src=\"https://img.shields.io/badge/changelog-%23199-lightgrey.svg\" /></a></p>\n<p>Join us in our <a href=\"https://gitter.im/cantino/huginn\">Gitter room</a> to discuss the project and follow <a href=\"https://twitter.com/tectonic\">@tectonic</a> for updates as Huginn evolves.</p>\n<h3>Join us!</h3>\n<p>Want to help with Huginn?  All contributions are encouraged!  You could make UI improvements, <a href=\"https://github.com/cantino/huginn/wiki/Creating-a-new-agent\">add new Agents</a>, write <a href=\"https://github.com/cantino/huginn/wiki\">documentation and tutorials</a>, or try tackling <a href=\"https://github.com/cantino/huginn/issues?direction=desc&amp;labels=help-wanted&amp;page=1&amp;sort=created&amp;state=open\">issues tagged with #help-wanted</a>.  Please fork, add specs, and send pull requests!</p>\n<p>Really want a fix or feature? Want to solve some community issues and earn some extra coffee money? Take a look at the <a href=\"https://www.bountysource.com/trackers/282580-huginn\">current bounties on Bountysource</a>.</p>\n<p>Have an awesome idea but not feeling quite up to contributing yet? Head over to our <a href=\"https://github.com/cantino/huginn/issues/353\">Official 'suggest an agent' thread </a> and tell us!</p>\n<h2>Demos</h2>\n<p>Please checkout the <a href=\"http://vimeo.com/61976251\">Huginn Introductory Screencast</a>!</p>\n<h2>Volumes:</h2>\n<ul>\n<li><code>/var/lib/mysql</code>  - Folder to store MySQL database for Huginn.</li>\n</ul>\n<h2>Other Info:</h2>\n<ul>\n<li>default user is admin</li>\n<li>default password is password</li>\n</ul>"
},
{
  "title": "jdownloader",
  "description": "jdownloader",
  "image": "dbarton/jdownloader",
  "ports": [],
  "volumes": [
    "/jdownloader/cfg",
    "/jdownloader/Downloads"
  ],
  "env": [
    {
      "name": "JDOWNLOADER_GID",
      "label": "PGID assigned upon creation"
    },
    {
      "name": "JDOWNLOADER_UID",
      "label": "PUID assigned upon creation"
    }
  ],
  "note": "<h1>Jdownloader Headlessmode</h1>\n<p>Docker image for <a href=\"http://www.jdownloader.org/\">JDownloader</a> - the open-source download manager.</p>\n<p>The Docker image currently supports:</p>\n<ul>\n<li>running JDownloader under its <strong>own user</strong> (not <code>root</code>)</li>\n<li>running JDownloader in headless (non-GUI) mode</li>\n<li>changing of the <strong>UID and GID</strong> for the JDownloader user</li>\n</ul>\n<h3>Volumes</h3>\n<p>Please mount the following volumes inside your JDownloader container:</p>\n<ul>\n<li><code>/jdownloader/cfg</code>: Holds all the JDownloader configuration files</li>\n<li><code>/media</code>: Directory for downloaded media</li>\n</ul>\n<h3>Configuration files</h3>\n<p>The JDownloader configuration files are located on <code>/jdownloader/cfg</code>, respectively your mounted directory on the host.</p>\n<p><strong>IMPORTANT:</strong> It is recommended that you setup the <a href=\"#My JDownloader credentials\">My JDownloader credentials</a>, so that you can easily configure your JDownloader settings via the <a href=\"https://my.jdownloader.org\">My JDownloader WebUI</a></p>\n<h3>My JDownloader credentials</h3>\n<p>If you want to use the <a href=\"https://my.jdownloader.org\">My JDownloader WebUI</a>, you've to configure your credentials in the <code>/jdownloader/cfg/org.jdownloader.api.myjdownloader.MyJDownloaderSettings.json</code> configuration file. Here's an example content:</p>\n<p><code>{\n  \"autoconnectenabledv2\" : true,\n  \"email\" : \"your@mail.address\",\n  \"password\" : \"your_secret_password\",\n}</code></p>\n<h3>Downloader directory</h3>\n<p>To change the download directory, you've to edit the file <code>/jdownloader/cfg/org.jdownloader.settings.GeneralSettings.json</code> and add the following setting:</p>\n<p><code>\"defaultdownloadfolder\" : \"/media\"</code></p>\n<h3>UID and GID</h3>\n<p>By default JDownloader runs with user ID and group ID <code>666</code>.\nIf you want to run JDownloader with different ID's you've to set the <code>JDOWNLOADER_UID</code> and/or <code>JDOWNLOADER_GID</code> environment variables, for example:</p>\n<p><code>JDOWNLOADER_UID=1234\nJDOWNLOADER_GID=1234</code></p>"
},
{
  "title": "mariadb",
  "description": "mariadb",
  "image": "mariadb:latest",
  "ports": [
    "3306/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/docker-library/docs/74e3b3d4d60389208732dbd2c95145868111d959/mariadb/logo.png",
  "volumes": [
    "/var/lib/mysql"
  ],
  "env": [
    {
      "name": "MYSQL_ROOT_PASSWORD",
      "label": "Root password"
    },
    {
      "name": "MYSQL_DATABASE",
      "label": "Database Name"
    },
    {
      "name": "MYSQL_USER",
      "label": "Optional Admin User"
    },
    {
      "name": "MYSQL_PASSWORD",
      "label": "Optional Admin User password"
    },
    {
      "name": "MYSQL_ALLOW_EMPTY_PASSWORD",
      "label": "Allow no root password"
    }
  ],
  "note": "<h2>MariaDB</h2>\n<p><a href=\"https://hub.docker.com/_/mariadb/\"><img alt=\"mariadb\" src=\"https://raw.githubusercontent.com/docker-library/docs/74e3b3d4d60389208732dbd2c95145868111d959/mariadb/logo.png\" /></a></p>\n<h2>What is MariaDB?</h2>\n<p>MariaDB is a community-developed fork of the MySQL relational database management system intended to remain free under the GNU GPL. Being a fork of a leading open source software system, it is notable for being led by the original developers of MySQL, who forked it due to concerns over its acquisition by Oracle. Contributors are required to share their copyright with the MariaDB Foundation.</p>\n<p>The intent is also to maintain high compatibility with MySQL, ensuring a \"drop-in\" replacement capability with library binary equivalency and exact matching with MySQL APIs and commands. It includes the XtraDB storage engine for replacing InnoDB, as well as a new storage engine, Aria, that intends to be both a transactional and non-transactional engine perhaps even included in future versions of MySQL.</p>\n<p>Official documentation for Docker container:</p>\n<p>https://hub.docker.com/_/mariadb/</p>"
},
{
  "title": "monero",
  "description": "monero",
  "image": "kannix/monero-full-node:latest",
  "ports": [
    "18080/tcp",
    "18081/tcp"
  ],
  "volumes": [
    "/root/.bitmonero"
  ],
  "env": [],
  "note": "<h1>Monero - anonymous digital currency</h1>\n<p>based on kannix/monero-full-node with freenas additions</p>\n<h2>Parameters</h2>\n<ul>\n<li><code>18080</code> - port required to access the app</li>\n<li><code>18081</code> - port required to access the app</li>\n<li><code>/root/.bitmonero</code> - contains the settings and blockchain database - can be large - a few GB</li>\n</ul>"
},
{
  "title": "organizr",
  "description": "organizr",
  "image": "lsiocommunity/organizr:latest",
  "ports": [
    "80/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/organizr-icon.png",
  "volumes": [
    "/config"
  ],
  "env": [
    {
      "name": "PUID",
      "label": "UserID"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    }
  ],
  "note": "<h1>lsiocommunity/organizr with FreeNAS metadata</h1>\n<p>HTPC/Homelab Services Organizer - Written in PHP</p>\n<p><a href=\"https://github.com/causefx/Organizr\"><img alt=\"organizr\" src=\"https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/organizr-icon.png\" /></a></p>\n<h2>Parameters</h2>\n<p><code>The parameters are split into two halves, separated by a colon, the left hand side representing the host and the right the container side. \nFor example with a port -p external:internal - what this shows is the port mapping from internal to external of the container.\nSo -p 8080:80 would expose port 80 from inside the container to be accessible from the host's IP on port 8080\nhttp://192.168.x.x:8080 would show you what's running INSIDE the container on port 80.</code></p>\n<ul>\n<li><code>-p 80</code> - the port(s)</li>\n<li><code>-v /config</code> - config files for organizr</li>\n<li><code>-e PGID</code> for GroupID - see below for explanation</li>\n<li><code>-e PUID</code> for UserID - see below for explanation</li>\n</ul>\n<p>It is based on alpine linux with s6 overlay, for shell access whilst the container is running do <code>docker exec -it organizr /bin/bash</code>.</p>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes (<code>-v</code> flags) permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<p>In this instance <code>PUID=1001</code> and <code>PGID=1001</code>. To find yours use <code>id user</code> as below:</p>\n<p><code>$ id &lt;dockeruser&gt;\n    uid=1001(dockeruser) gid=1001(dockergroup) groups=1001(dockergroup)</code></p>\n<h2>Setting up the application</h2>\n<p>Setup accounts etc via the webui, more info at <a href=\"https://github.com/causefx/Organizr\">Organizr</a>.</p>\n<h2>Info</h2>\n<ul>\n<li>Shell access whilst the container is running: <code>docker exec -it organizr /bin/bash</code></li>\n<li>To monitor the logs of the container in realtime: <code>docker logs -f organizr</code></li>\n</ul>"
},
{
  "title": "plexpy",
  "description": "plexpy",
  "image": "linuxserver/plexpy:latest",
  "ports": [
    "8181/tcp"
  ],
  "volumes": [
    "/config",
    "/logs"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    }
  ],
  "note": "<h1>Overview:</h1>\n<p>Plexpy Is a Python-based Plex Usage tracker, that is currently in active development.</p>\n<h1>Parameters:</h1>\n<ul>\n<li>8181 - Plexpy WebUI Port</li>\n<li>/config - Contains Plexpy config and database</li>\n<li>/downloads - Map this to Plex Media servers log directory - bonus points for mapping RO</li>\n<li>PGID for for GroupID - see below for explanation</li>\n<li>PUID for for UserID - see below for explanation</li>\n<li>TZ for timezone EG. Europe/London</li>\n</ul>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes, permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Accessing the application</h2>\n<p>Webui can be found at  <code>&lt;your-ip&gt;:8181</code></p>"
},
{
  "title": "cadvisor",
  "description": "cadvisor",
  "image": "google/cadvisor:latest",
  "ports": [
    "8080/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/google/cadvisor/master/logo.png",
  "volumes": [
    "/",
    "/sys",
    "/var/lib/docker",
    "/var/run"
  ],
  "env": [
    {
      "name": "STORAGE_DRIVER",
      "label": "Storage driver (e.g. statsd)"
    },
    {
      "name": "STORAGE_HOST",
      "label": "Storage host address (address:port)"
    },
    {
      "name": "STORAGE_DB_NAME",
      "label": "Storage DB Name (for Influx)"
    }
  ],
  "note": "<p><a href=\"https://github.com/google/cadvisor\"><img alt=\"cadvisor\" src=\"https://raw.githubusercontent.com/google/cadvisor/master/logo.png\" /></a></p>\n<h1>cAdvisor - Container Advisor</h1>\n<p>cAdvisor (Container Advisor) provides container users an understanding of the resource usage and performance characteristics of their running containers. It is a running daemon that collects, aggregates, processes, and exports information about running containers. Specifically, for each container it keeps resource isolation parameters, historical resource usage, histograms of complete historical resource usage and network statistics. This data is exported by container and machine-wide.</p>\n<p>cAdvisor has native support for <a href=\"https://github.com/docker/docker\">Docker</a> containers and should support just about any other container type out of the box. We strive for support across the board so feel free to open an issue if that is not the case. cAdvisor's container abstraction is based on <a href=\"https://github.com/google/lmctfy\">lmctfy</a>'s so containers are inherently nested hierarchically.</p>\n<h2>Usage</h2>\n<h3>Volumes:</h3>\n<ul>\n<li>Do not change the set of VM-mapped volumes. cAdvisor needs these to get docker data.</li>\n</ul>\n<h3>Variables:</h3>\n<ul>\n<li><code>STORAGE_DRIVER=&lt;driver&gt;</code> The storage driver to use. See cAdvisor docs for details.</li>\n<li>Examples: statsd, redis, influxdb, elasticsearch, kafka</li>\n<li><code>STORAGE_HOST=&lt;host&gt;:&lt;port&gt;</code> The address of the storage service.</li>\n<li>Example: 192.168.0.74:8125</li>\n<li><code>STORAGE_DB_NAME=&lt;name&gt;</code> Namespace to store stats under. (Unused for some storage drivers)</li>\n<li>Example: docker_host_0_cadvisor</li>\n</ul>\n<h3>Ports:</h3>\n<ul>\n<li>8080:8080</li>\n</ul>"
},
{
  "title": "phpmyadmin",
  "description": "phpmyadmin",
  "image": "phpmyadmin/phpmyadmin:4.6.6-2",
  "ports": [
    "8080/tcp"
  ],
  "volumes": [],
  "env": [
    {
      "name": "PMA_HOST",
      "label": "IP of MySQL server"
    },
    {
      "name": "PMA_HOSTS",
      "label": "Comma separated host names of the MySQL servers"
    },
    {
      "name": "PMA_USER",
      "label": "MySQL username"
    },
    {
      "name": "PMA_PASSWORD",
      "label": "MySQL password"
    },
    {
      "name": "PMA_ABSOLUTE_URI",
      "label": "Define user-facing URI"
    }
  ],
  "note": "<h1>phpMyAdmin</h1>\n<p>A web interface for MySQL and MariaDB.</p>\n<h2>About this image</h2>\n<p>This Docker image is based on the <a href=\"https://hub.docker.com/_/phpmyadmin/\">official <code>phpmyadmin</code> image</a>.</p>\n<h2>Credentials</h2>\n<p>phpMyAdmin does use MySQL server credential, please check the corresponding\nserver image for information how it is setup.</p>\n<p>The official MySQL and MariaDB use following environment variables to define these:</p>\n<ul>\n<li>MYSQL_ROOT_PASSWORD - This variable is mandatory and specifies the password that \nwill be set for the root superuser account.</li>\n<li>MYSQL_USER, MYSQL_PASSWORD - These variables are optional, used in conjunction \nto create a new user and to set that user's password.</li>\n</ul>\n<h2>Environment variables summary</h2>\n<ul>\n<li>PMA_ARBITRARY - when set to 1 connection to the arbitrary server will be allowed</li>\n<li>PMA_HOST - define address/host name of the MySQL server</li>\n<li>PMA_VERBOSE - define verbose name of the MySQL server</li>\n<li>PMA_PORT - define port of the MySQL server</li>\n<li>PMA_HOSTS - define comma separated list of address/host names of the MySQL servers</li>\n<li>PMA_VERBOSES - define comma separated list of verbose names of the MySQL serversx</li>\n<li>PMA_USER and PMA_PASSWORD - define username to use for config authentication method</li>\n<li>PMA_ABSOLUTE_URI - define user-facing URI</li>\n</ul>\n<h2>Usage behind reverse proxys</h2>\n<p>Set the variable PMA_ABSOLUTE_URI to the Fully Qualified Domain Name (https://pma.example.net/) where the reverse proxy makes phpMyAdmin available.</p>"
},
{
  "title": "jackett",
  "description": "jackett",
  "image": "linuxserver/jackett:latest",
  "ports": [
    "9117/tcp"
  ],
  "volumes": [
    "/config",
    "/downloads"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    }
  ],
  "note": "<p>Jackett Docker</p>\n<p>Jackett works as a proxy server: it translates queries from apps (Sonarr, SickRage, CouchPotato, Mylar, etc) into tracker-site-specific http queries, parses the html response, then sends results back to the requesting software. This allows for getting recent uploads (like RSS) and performing searches. Jackett is a single repository of maintained indexer scraping &amp; translation logic - removing the burden from other apps.</p>\n<p>The web interface is at <your-ip>:9117 , configure various trackers and connections to other apps there.</p>"
},
{
  "title": "maraschino",
  "description": "maraschino",
  "image": "smdion/docker-maraschino:latest",
  "ports": [
    "7000/tcp"
  ],
  "volumes": [
    "/config"
  ],
  "env": [],
  "note": "<h1>docker-maraschino</h1>\n<p>This is a Dockerfile setup for Maraschino.  Built in updater to go to current release - http://www.maraschinoproject.com/</p>\n<h1>Configuration</h1>\n<ul>\n<li>7000:7000</li>\n<li>/path/to/config:/config</li>\n</ul>\n<h3>Plex GIT Branch</h3>\n<p>Add the PLEX=1 variable to your install for the Plex Module. Cannot be used at same time as NZBDRONE=1.</p>\n<h3>NZBDrone GIT Branch</h3>\n<p>Add the NZBDRONE=1 variable to your install for the NZBDRONE Module, also includes the Plex Module.  Cannot be used at same time as PLEX=1.</p>"
},
{
  "title": "mineos",
  "description": "mineos",
  "image": "yujiod/minecraft-mineos:latest",
  "ports": [
    "8443/tcp",
    "25565/tcp"
  ],
  "volumes": [],
  "env": [
    {
      "name": "PASSWORD",
      "label": "Server password"
    }
  ],
  "note": "<h1>mineos</h1>\n<p>Docker container image based on yujiod/docker-mineos</p>\n<p>Dockerfile for creating Mine OS server image. Extended with <code>password</code> FreeNAS environmental variable.</p>\n<p><a href=\"http://minecraft.codeemo.com/\">Mine OS - easy minecraft hosting solution</a></p>\n<h2>Usage</h2>\n<pre><code>docker run -d yujiod/minecraft-mineos\ndocker run -d -p 8443:8443 -p 25565:25565 yujiod/minecraft-mineos\n</code></pre>\n<p>The WebUI on 8443 port with self signed SSL. When binding to 8443, open below URL.</p>\n<p>http://<hostname>:8443/</p>\n<p>Login username is <code>minecraft</code>. Password is auto generated. Please check password in logs.</p>\n<pre><code>docker logs &lt;container_id&gt;\n</code></pre>\n<p>You can also specify a password on run the container. The environment variable is <code>PASSWORD</code>.</p>\n<pre><code>docker run -d -e PASSWORD=cr33p3r yujiod/minecraft-mineos\n</code></pre>\n<h2>SSH Access</h2>\n<p>The server can access to SSH by <code>minecraft</code> user, port 22.</p>\n<pre><code>docker run -d -e PASSWORD=cr33p3r -p 2222:22 -p 8443:8443 -p 25565:25565 yujiod/minecraft-mineos\nssh minecraft@&lt;hostname&gt; -p 2222\n</code></pre>\n<p>The password is automatically generated, or you specified in the container startup.</p>\n<h3>Mount minecraft data volume</h3>\n<p>The mount point is <code>/var/games/minecraft</code>.</p>\n<pre><code>docker run -d -v /var/games/minecraft yujiod/minecraft-mineos\n</code></pre>\n<h3>Multiple minecraft server port binding</h3>\n<pre><code>docker run -d -e PASSWORD=cr33p3r -v /var/games/minecraft -p 2222:22 -p 8443:443 \\\n-p 25565:25565 -p 25566:25566 -p 25567:25567 -p 25568:25568 -p 25569:25569 -p 25570:25570 \\\nyujiod/minecraft-mineos\n</code></pre>"
},
{
  "title": "nginx-devel",
  "description": "nginx-devel",
  "image": "nginx:mainline",
  "ports": [
    "8080/tcp",
    "8081/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/docker-library/docs/01c12653951b2fe592c1f93a13b4e289ada0e3a1/nginx/logo.png",
  "volumes": [
    "/var/www/html",
    "/etc/nginx/conf.d/custom.conf",
    "/etc/nginx/conf.d/default.conf"
  ],
  "env": [],
  "note": "<p><a href=\"https://en.wikipedia.org/wiki/Nginx\"><img alt=\"nginx\" src=\"https://raw.githubusercontent.com/docker-library/docs/01c12653951b2fe592c1f93a13b4e289ada0e3a1/nginx/logo.png\" /></a></p>\n<h1>What is Nginx?</h1>\n<p>Nginx (pronounced \"engine-x\") is an open source reverse proxy server for HTTP, HTTPS, SMTP, POP3, and IMAP protocols, as well as a load balancer, HTTP cache, and a web server (origin server). The nginx project started with a strong focus on high concurrency, high performance and low memory usage. It is licensed under the 2-clause BSD-like license and it runs on Linux, BSD variants, Mac OS X, Solaris, AIX, HP-UX, as well as on other *nix flavors. It also has a proof of concept port for Microsoft Windows.</p>\n<h1>How to use this image</h1>\n<p>Simply point the <code>/usr/share/nginx/html</code> volume at the content on your host using the volume mappings.  You may also wish to set this volume as Read-Only.</p>\n<h2>exposing the port</h2>\n<p>Remap port 8080 in the container to port 80 on your bridged network, or leave it as 8080 if using NAT so as not to conflict with FreeNAS' own web server.</p>\n<p>Then you can hit <code>http://localhost:8080</code> or <code>http://host-ip:8080</code> in your browser.</p>\n<p>For information on the syntax of the Nginx configuration files, see <a href=\"http://nginx.org/en/docs/\">the official documentation</a> (specifically the <a href=\"http://nginx.org/en/docs/beginners_guide.html#conf_structure\">Beginner's Guide</a>).</p>\n<p>Be sure to include <code>daemon off;</code> in your custom configuration to ensure that Nginx stays in the foreground so that Docker can track the process properly (otherwise your container will stop immediately after starting)!</p>\n<p>If you wish to adapt the default configuration, use something like the following to copy it from a running Nginx container:</p>\n<p><code>cp some-nginx:/etc/nginx/nginx.conf /some/nginx.conf</code></p>"
},
{
  "title": "kodi-server",
  "description": "kodi-server",
  "image": "celedhrim/kodi-server:latest",
  "ports": [
    "8089/tcp"
  ],
  "volumes": [
    "/opt/kodi-server/share/kodi/portable_data"
  ],
  "env": [],
  "note": "<h1>docker-kodi-server</h1>\n<p>This container will allow you to:\n<em> serve files through the XBMC UPnP Library to your UPnP client/players (such as Xbmc or Chromecast).\n</em> Web access every time , or use with some tools like <a href=\"http://htpc.io/\">htpc-manager</a>\n* Trigger library scan When you want or from sickbeard/sickrage/couchpotato/...</p>\n<p>Docker is used to compile and run the latest headless version of KODI Jarvis on Arch Linux.</p>\n<p>In order to use this you need to drop a preconfigured profile into the mapped directory, make sure to enable the webUI and set the port to 8089!</p>"
},
{
  "title": "seafile",
  "description": "seafile",
  "image": "sunx/seafile:latest",
  "ports": [
    "8000/tcp",
    "8082/tcp"
  ],
  "volumes": [
    "/home/seafile"
  ],
  "env": [
    {
      "name": "SEAHUB",
      "label": "Set to fastcgi if desired otherwise empty"
    },
    {
      "name": "SEAFILE_FASTCGI_HOST",
      "label": "Binding ip for seahub in FastCGI mode. Default: 127.0.0.1."
    }
  ],
  "note": "<h1>Seafile Server Docker image</h1>\n<p><a href=\"http://seafile.com/\">Seafile</a> server Docker image based on <a href=\"https://hub.docker.com/_/alpine/\">Alpine Linux</a>.</p>\n<h2>Quickstart</h2>\n<p>Set the following volumes /port mappings:</p>\n<ul>\n<li>/home/docker/seafile:/home/seafile</li>\n<li>127.0.0.1:8000:80000</li>\n<li>127.0.0.1:8082:8082</li>\n</ul>\n<p>Containers, based on this image will automatically configure \n Seafile enviroment if there isn't any. If Seafile enviroment is from previous version of Seafile, container will automatically upgrade it to latest version (by calling Seafile upgrade scripts).</p>\n<h3>Used ports</h3>\n<p>This image uses 2 tcp ports:\n<em> 8000 - seafile port\n</em> 8082 - seahub port</p>\n<p>If you want to run seafdav (WebDAV for Seafile), then port 8080 will be used also.</p>\n<h3>Volume</h3>\n<p>This image uses one volume with internal path <code>/home/seafile</code></p>\n<p>It is recommended you use host directory mapping of named volume to run containers, so you will not lose your valuable data after image update and starting new container</p>\n<p>For Web-server configuration, as media directory location you should enter\n<code>&lt;volume/path&gt;/seafile-server/seahub/media</code></p>\n<p>In <a href=\"https://github.com/VGoshev/seafile-docker/blob/master/httpd-conf/\">httpd-conf</a> directory you can find\n<a href=\"https://www.lighttpd.net/\">lighttpd</a> <a href=\"https://github.com/VGoshev/seafile-docker/blob/master/httpd-conf/lighttpd.conf.example\">config example</a> and\n<a href=\"https://www.haproxy.com/\">haaproxy</a> <a href=\"https://github.com/VGoshev/seafile-docker/blob/master/httpd-conf/haproxy.cfg\">config example</a>.</p>\n<p>You can find \n<a href=\"https://manual.seafile.com/deploy/deploy_with_nginx.html\">Nginx</a> and \n<a href=\"https://manual.seafile.com/deploy/deploy_with_apache.html\">Apache</a> \nconfigurations in official Seafile Server <a href=\"https://manual.seafile.com/\">Manual</a>.</p>\n<h3>Supported ENV variables</h3>\n<p>When you running container, you can pass several enviroment variables (with <strong>--env</strong> option of <strong>docker run</strong> command):\n<em> <strong><code>INTERACTIVE</code></strong>=\\&lt;0|1&gt; - if container should ask you about some configuration values (on first run) and about upgrades. Default: 1\n</em> <strong><code>SERVER_NAME</code></strong>=\\&lt;...&gt; - Name of Seafile server (3 - 15 letters or digits), used only for first run in non-interactive mode. Default: Seafile\n<em> <strong><code>SERVER_DOMAIN</code></strong>=\\&lt;...&gt; - Domain or ip of seafile server, used only for first run in non-interactive mode. Default: seafile.domain.com\n</em> <strong><code>SEAHUB</code></strong>=\\<fastcgi> - If seahub should be started in FastCGI mode (set it \"fastcgi\" for FastCGI mode or leave empty otherwise). Default: empty (not FastCGI mode).\n<em> <strong><code>SEAFILE_FASTCGI_HOST</code></strong>=\\<ip> - Binding ip for seahub in FastCGI mode. Default: 127.0.0.1.\n</em> <strong><code>HANDLE_SIGNALS</code></strong>=\\&lt;0|1&gt; - If container should properly handle signals like SIGHUP and SIGTERM (SIGTERM is sending on <code>docker stop</code> command, for example). If signals handling is turned on, then script will run infinity cycle for waiting signal, what, in theory, could slightly increase CPU consumption by container. Default: 1 (i.e. Turned on).</p>\n<h2>Useful commands in container</h2>\n<p>When you're inside of container, in home directory of seafile user, you can use following useful commands:\n<em> <code>seafile-fsck</code> - check your libraries for errors (Originally seaf-fsck.sh is used for it)\n</em> <code>seafile-gc</code> - remove ald unused data from storage of your seafile libraries (Originally seaf-gc.sh is used for it)\n<em> <code>seafile-admin start</code> - start seafile and seahub daemons (if they were stopped)\n</em> <code>seafile-admin stop</code> - stop seafile and seahub daemons\n<em> <code>seafile-admin reset-admin</code> - reset seafile admin user and/or password\n</em> <code>seafile-admin setup</code> - setup ccnet, seafile and seahub services (if they wasn't configured automatically by some reason)\n* <code>seafile-admin create-admin</code> - create seafile admin user (if it wasn't created automatically by some reason)</p>\n<h2>Tips&amp;Tricks and Known issues</h2>\n<ul>\n<li>\n<p>Make sure, that mounted data volume and files are readable and writable by container's seafile user(2016:2016).</p>\n</li>\n<li>\n<p>If you want to run seafdav, which is disabled by default, you can read it's <a href=\"https://manual.seafile.com/extension/webdav.html\">manual</a>. Do not forget to publish port 8080 after it.</p>\n</li>\n<li>\n<p>If you do not want container to automatically upgrade your Seafile enviroment on image (and Seafile-server) update, \nyou can add empty file named <code>.no-update</code> to directory <code>/home/seafile</code> in your container. You can use <strong><code>docker exec &lt;container_name&gt; touch /home/seafile/.no-update</code></strong> for it.</p>\n</li>\n<li>\n<p>Container uses seafile user to run seafile, so if you need to do something with root access in container, you can use <strong><code>docker exec -ti --user=0 &lt;container_name&gt; /bin/sh</code></strong> for it.</p>\n</li>\n<li>\n<p>On first run (end every image upgrade) container will copy seahub directory from <code>/usr/local/share/seahub</code> to <code>/home/seafile/seafile-server/seahub</code>(i.e. to the volume), so it cost about 40Mb of space.</p>\n</li>\n<li>\n<p>At this moment most seafile scripts (which are located in <code>/usr/local/share/seafile/scripts</code> directory) aren't working properly, but they are not deemed useful for this image (scripts <code>seaf-fsck.sh</code> and <code>seaf-gc.sh</code> are working correctly and also avaliable as <code>/usr/local/bin/seafile-fsck</code> and <code>/usr/local/bin/seafile-gc</code>).</p>\n</li>\n<li>\n<p>This image confugure sqlite-based Seafile server installation. If you want to run Seafile server witn MySQL\\MariaDB, then you can configure it manually.</p>\n</li>\n</ul>"
},
{
  "title": "homebridge",
  "description": "homebridge",
  "image": "marcoraddatz/homebridge",
  "ports": [
    "5353/udp",
    "51826/tcp"
  ],
  "volumes": [
    "/root/.homebridge"
  ],
  "env": [],
  "note": "<h1>Homebridge a lightweight NodeJS server you can run on your home network that emulates the iOS HomeKit API</h1>\n<p>Homebridge supports Plugins, which are community-contributed modules that provide a basic bridge from HomeKit to various 3rd-party APIs provided by manufacturers of \"smart home\" devices.</p>\n<p>Since Siri supports devices added through HomeKit, this means that with Homebridge you can ask Siri to control devices that don't have any support for HomeKit at all. For instance, using just some of the available plugins, you can say:</p>\n<p>Siri, unlock the back door. [pictured above]\nSiri, open the garage door.\nSiri, turn on the coffee maker.\nSiri, turn on the living room lights.\nSiri, good morning!</p>\n<p>You can explore all available plugins at the NPM website by searching for the keyword homebridge-plugin.</p>\n<h3>Homekit support for the impatient</h3>\n<h5>This docker container is based on an image originally created by GitHub user <a href=\"https://github.com/patrickbusch/homebridge-docker\">patrickbusch</a>, and adapted for Synology NAS units by GitHub user <a href=\"https://hub.docker.com/r/marcoraddatz/homebridge/\">marcoraddatz</a>, so all credit for the container creation and testing goes to them.</h5>\n<p>With that out of the way...  This container is intended for FreeNAS Corral (FreeNAS 10) users, and includes the needed metadata to enable an easier setup process in the UI.</p>\n<p>It containerizes <a href=\"https://github.com/nfarina/homebridge\">Homebridge</a>, and exposes the following to users in the FreeNAS WebUI:</p>\n<ul>\n<li>Ports:  </li>\n<li><code>5353 UDP</code> - Used for mDNS/Avahi/Bonjour to communicate with iOS devices</li>\n<li>\n<p><code>51826 TCP</code> - Used for communication with external APIs and non-iOS devices</p>\n</li>\n<li>\n<p>Volumes:</p>\n</li>\n<li><code>/root/.homebridge</code> - Your config.json needs to be created/copied to this location and made           readable by root</li>\n</ul>"
},
{
  "title": "libresonic",
  "description": "libresonic",
  "image": "binhex/arch-libresonic:6.1.0-02",
  "ports": [
    "4040/tcp"
  ],
  "volumes": [
    "/config",
    "/media"
  ],
  "env": [
    {
      "name": "PUID",
      "label": "UserId"
    },
    {
      "name": "PGID",
      "label": "GroupId"
    }
  ],
  "note": "<h1>Media streaming software</h1>\n<p>This is a Dockerfile for <a href=\"http://libresonic.org\">Libresonic</a>.</p>\n<h2>Parameters</h2>\n<ul>\n<li><code>/config</code> - This contains configuration to keep it static.</li>\n<li><code>/media</code> - The folder containing the media files you wish to play.</li>\n<li><code>PGID</code> for GroupID - see below for explanation</li>\n<li><code>PUID</code> for UserID - see below for explanation</li>\n<li><code>4040</code> WebUI Port</li>\n</ul>\n<h3>User/Group Identifiers</h3>\n<p>Sometimes when using data volumes permissions issues can arise between the host\nOS and the container. We avoid this issue by allowing you to specify the user\n<code>PUID</code> and group <code>PGID</code>. Ensure the config volume directory on the host is owned\nby the same user you specify and it will \"just work\"\u2122.</p>\n<h2>Setting up the application</h2>\n<p>The default user/password is <code>admin</code>/<code>admin</code>, and should be changed to something\nunique to you as soon as possible.</p>"
},
{
  "title": "searx",
  "description": "searx",
  "image": "wonderfall/searx:latest",
  "ports": [
    "8901/tcp"
  ],
  "volumes": [],
  "env": [
    {
      "name": "IMAGE_PROXY",
      "label": "Enable image proxying"
    },
    {
      "name": "BASE_URL",
      "label": "http://domain.tld"
    }
  ],
  "note": "<h1>Searx is a metasearch engine, inspired by the seeks project.</h1>\n<p>It provides basic privacy by mixing your queries with searches on other platforms without storing search data. Queries are made using a POST request on every browser (except chrome). Therefore they show up in neither our logs, nor your url history. In case of Chrome users there is an exception, Searx uses the search bar to perform GET requests. Searx can be added to your browser's search bar; moreover, it can be set as the default search engine.\nFeatures</p>\n<pre><code>Based on Alpine Linux.\nLatest code from asciimoo/searx\nA unique secret key is generated when booting the first time.\n</code></pre>"
},
{
  "title": "dropbox",
  "description": "dropbox",
  "image": "janeczku/dropbox:latest",
  "ports": [],
  "volumes": [
    "/dbox/.dropbox",
    "/dbox/Dropbox"
  ],
  "env": [
    {
      "name": "DBOX_GID",
      "label": "GroupID - default 1000"
    },
    {
      "name": "DBOX_UID",
      "label": "UserID - default 1000"
    }
  ],
  "note": "<p>Run Dropbox inside Docker. Fully working with local host folder mount or inter-container linking (via <code>--volumes-from</code>).</p>\n<p>This repository provides the <a href=\"https://registry.hub.docker.com/u/janeczku/dropbox/\">janeczku/dropbox</a> image.</p>\n<h2>Linking to Dropbox account after first start</h2>\n<p>Check the logs of the container to get URL to authenticate with your Dropbox account.</p>\n<pre><code>docker logs dropbox\n</code></pre>\n<p>Copy and paste the URL in a browser and login to your Dropbox account to associate.</p>\n<pre><code>docker logs dropbox\n</code></pre>\n<p>You should see something like this:</p>\n<blockquote>\n<p>\"This computer is now linked to Dropbox. Welcome xxxx\"</p>\n</blockquote>\n<h2>Manage exclusions and check sync status</h2>\n<pre><code>docker exec -t -i dropbox dropbox help\n</code></pre>\n<h2>ENV variables</h2>\n<p><strong>DBOX_UID</strong><br />\nDefault: <code>1000</code><br />\nRun Dropbox with a custom user id (matching the owner of the mounted files)</p>\n<p><strong>DBOX_GID</strong><br />\nDefault: <code>1000</code><br />\nRun Dropbox with a custom group id (matching the group of the mounted files)</p>\n<p><strong>$DBOX_SKIP_UPDATE</strong><br />\nDefault: <code>False</code><br />\nSet this to <code>True</code> to skip updating to the latest Dropbox version on container start</p>\n<h2>Exposed volumes</h2>\n<p><code>/dbox/Dropbox</code>\nDropbox files</p>\n<p><code>/dbox/.dropbox</code>\nDropbox account configuration</p>"
},
{
  "title": "mylar",
  "description": "mylar",
  "image": "linuxserver/mylar:latest",
  "ports": [
    "8090/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/mylar-icon.png",
  "volumes": [
    "/config",
    "/comics",
    "/downloads"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    }
  ],
  "note": "<p><a href=\"https://github.com/evilhero/mylar\"><img alt=\"mylar\" src=\"https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/mylar-icon.png\" /></a></p>\n<h1>An automated Comic Book downloader (cbr/cbz) for use with SABnzbd, NZBGet and torrents.</h1>\n<h2>Parameters</h2>\n<ul>\n<li><code>8090</code> - the port(s)</li>\n<li><code>/config</code> - where mylar should store config files</li>\n<li><code>/downloads</code> - map to your downloads folder</li>\n<li><code>/comics</code> - map to your comics folder</li>\n<li><code>PGID</code> for GroupID - see below for explanation</li>\n<li><code>PUID</code> for UserID - see below for explanation</li>\n<li><code>TZ</code> for setting timezone information, eg Europe/London</li>\n</ul>\n<p>Container is based on alpine linux with s6 overlay, for shell access whilst the container is running use the console button in the GUI or use the console sub-command in the CLI.</p>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Setting up the application</h2>\n<p>The web ui for settings etc, is on <code>&lt;your-ip&gt;:8090</code>\nFor more detailed setup refer <a href=\"https://github.com/evilhero/mylar\">mylar</a>.</p>"
},
{
  "title": "checkmk-agent",
  "description": "checkmk-agent",
  "image": "xforty/checkmk",
  "ports": [
    "6556/tcp"
  ],
  "volumes": [
    "/var/run/docker.sock"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Eg. America/Edmonton"
    }
  ],
  "note": "<h1>CheckMK in docker</h1>\n<p>We put together this simple checkmk image so we could easily use check_mk\nin coreos and with docker. This also works with boot2docker on FreeNAS Corral.</p>\n<p>Based on xforty/checkmk.  For use with Check_MK Raw or OMD-Labs. http://omdistro.org</p>\n<h1>Running It</h1>\n<p>Requires volume on the VM to link /var/run/docker.sock to /var/run/docker.sock on the container.</p>\n<p>Expose port 6556 so that the Check_MK host can collect data.</p>"
},
{
  "title": "resilio-sync",
  "description": "resilio-sync",
  "image": "linuxserver/resilio-sync",
  "ports": [
    "8888/tcp",
    "55555/tcp"
  ],
  "volumes": [
    "/config",
    "/sync"
  ],
  "env": [
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    }
  ],
  "note": "<h1>Resilio Sync - Replacement for BTSync</h1>\n<p>Resilio Sync, formerly BitTorrent Sync, uses the BitTorrent protocol to sync files and folders between all of your devices. There are both free and paid versions, this container supports both.</p>\n<p>There is an official sync image but the linuxserver team created this one as it supports user mapping to simplify permissions for volumes.</p>\n<h2>Parameters</h2>\n<ul>\n<li><code>55555</code> - port required to access the app</li>\n<li><code>8888</code> - port required to access the app</li>\n<li><code>/config</code> - contains the settings</li>\n<li><code>/sync</code> - sync folders root</li>\n<li><code>PGID</code> for GroupID - see below for explanation</li>\n<li><code>PUID</code> for UserID - see below for explanation</li>\n</ul>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Setting up the application</h2>\n<p>You can add additional folders as well under the /sync folder as required i.e. mapping a dataset to /sync/<folder1> and another dataset to /sync/<folder2></p>\n<ul>\n<li>Webui is at <code>&lt;your-ip&gt;:8888</code>, for account creation and configuration.</li>\n</ul>"
},
{
  "title": "alpine",
  "description": "alpine",
  "image": "alpine:latest",
  "ports": [],
  "volumes": [],
  "env": [],
  "note": "<h1>Alpine Linux</h1>\n<p>This is a simple Alpine Linux container. It is an Interactive container, meaning\nthat the Console UI / CLI will talk directly to the command specified (and\ncan be connected / disconnected repeatedly without killing the container).\nThe command argument also MUST be specified - this is generally /bin/sh or\nsome other useful command in the container.</p>"
},
{
  "title": "teamspeak",
  "description": "teamspeak",
  "image": "linuxserver/gsm-ts3:latest",
  "ports": [
    "9987/udp",
    "30033/tcp",
    "10011/tcp",
    "41144/tcp"
  ],
  "logo": "http://teamspeak.com/assets/images/logos/teamspeak.png",
  "volumes": [
    "/config"
  ],
  "env": [
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    }
  ],
  "note": "<p><a href=\"https://teamspeak.com\"><img alt=\"teamspeak\" src=\"http://teamspeak.com/assets/images/logos/teamspeak.png\" /></a></p>\n<h1>VoIP software designed with security in mind, featuring crystal clear voice quality, endless customization options, and scalabilty up to thousands of simultaneous users.</h1>\n<h2>Usage</h2>\n<h3>Volumes:</h3>\n<ul>\n<li><code>&lt;path to teamspeak config&gt;:/config</code> teamspeak config directory</li>\n</ul>\n<h3>Variables:</h3>\n<ul>\n<li><code>PUID=&lt;uid&gt;</code> See below for explanation</li>\n<li><code>PGID=&lt;gid&gt;</code> See below for explanation</li>\n</ul>\n<h3>Ports:</h3>\n<ul>\n<li>9987:9987/udp</li>\n<li>30033:30033</li>\n<li>10011:10011</li>\n<li>41144:41144</li>\n</ul>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes (<code>-v</code> flags) permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Setting up the application</h2>\n<p>There is no setup required, just start the container, watch the log and note the Serverquery user\\pass, and the token.</p>"
},
{
  "title": "mysql",
  "description": "mysql",
  "image": "mysql:latest",
  "ports": [
    "3306/tcp"
  ],
  "volumes": [
    "/var/lib/mysql"
  ],
  "env": [
    {
      "name": "MYSQL_ROOT_PASSWORD",
      "label": "Root password"
    },
    {
      "name": "MYSQL_DATABASE",
      "label": "Database Name"
    },
    {
      "name": "MYSQL_USER",
      "label": "Optional Admin User"
    },
    {
      "name": "MYSQL_PASSWORD",
      "label": "Optional Admin User password"
    },
    {
      "name": "MYSQL_ALLOW_EMPTY_PASSWORD",
      "label": "Allow no root password"
    }
  ],
  "note": "<h1>MySQL container</h1>\n<p>Usage of this container is somewhat complex.  For more information see the mysql <a href=\"https://hub.docker.com/_/mysql/\">documentation</a>.</p>"
},
{
  "title": "s3cmd",
  "description": "s3cmd",
  "image": "garland/docker-s3cmd:latest",
  "ports": [],
  "volumes": [
    "/opt/src"
  ],
  "env": [
    {
      "name": "aws_key",
      "label": "S3 key"
    },
    {
      "name": "aws_secret",
      "label": "S3 secret"
    },
    {
      "name": "DEST_S3",
      "label": "S3 bucket"
    }
  ],
  "note": "<h1>docker-s3cmd</h1>\n<p>s3cmd in a Docker container.  This is useful if you are already using Docker.\nYou can simply pull this container to that Docker server and move things between the local box and S3 by just running\na container.</p>\n<p>Using <a href=\"https://hub.docker.com/_/alpine/\">Alpine linux</a>.  This image is 31MB.</p>\n<h1>Usage Instruction</h1>\n<h2>Copy from local to S3:</h2>\n<ul>\n<li>Variable: <code>AWS_KEY=&lt;YOUR AWS KEY&gt;</code></li>\n<li>Variable: <code>AWS_SECRET=&lt;YOUR AWS SECRET&gt;</code></li>\n<li>Variable: <code>BUCKET=s3://garland.public.bucket/database2/</code></li>\n<li>\n<p>Volume: <code>${LOCAL_FILE}:/opt/src</code></p>\n</li>\n<li>\n<p>Change <code>LOCAL_FILE</code> to file/folder you want to upload to S3</p>\n</li>\n</ul>\n<h2>Copy from S3 to local:</h2>\n<ul>\n<li>Variable: <code>AWS_KEY=&lt;YOUR AWS KEY&gt;</code></li>\n<li>Variable: <code>AWS_SECRET=&lt;YOUR AWS SECRET&gt;</code></li>\n<li>Variable: <code>BUCKET=s3://garland.public.bucket/database</code></li>\n<li>\n<p>Volume: <code>${LOCAL_FILE}:/opt/dest</code></p>\n</li>\n<li>\n<p>Change <code>LOCAL_FILE</code> to the file/folder where you want to download the files from S3 to the local computer</p>\n</li>\n</ul>\n<h2>Run interactively with s3cmd</h2>\n<ul>\n<li>Variable <code>AWS_KEY=&lt;YOUR AWS KEY&gt;</code></li>\n<li>Variable <code>AWS_SECRET=&lt;YOUR AWS SECRET&gt;</code></li>\n<li>Variable <code>cmd=interactive</code></li>\n<li>Volume: <code>/:/opt/dest</code></li>\n</ul>\n<p>Then execute the <code>main.sh</code> script to setup the s3cmd config file</p>\n<pre><code>/opt/main.sh\n</code></pre>\n<p>Then you can run <code>s3cmd</code> commands</p>\n<pre><code>s3cmd ls /\n</code></pre>"
},
{
  "title": "omd",
  "description": "omd",
  "image": "debian:8",
  "ports": [],
  "volumes": [],
  "env": [],
  "note": "<h1>omd-labs-docker</h1>\n<p>OMD Labs Nightly (https://labs.consol.de/de/omd/index.html) on Docker with Ansible support.</p>\n<p>Author: Simon Meggle, <em>simon.meggle at consol.de</em></p>\n<p>Built on Debian 8 with custom site named \"cmk\".</p>\n<h3>Use data containers</h3>\n<h4>Host mounted data folders</h4>\n<p>As soon as the container dies, all monitoring data (configuration files, RRD data, InfluxDB, log files etc.) are lost, too. To keep the data persistent, use host mounted volumes.</p>\n<p>Mount host directories for:</p>\n<ul>\n<li>/opt/omd/sites/cmk/local</li>\n<li>/opt/omd/sites/cmk/etc</li>\n<li>/opt/omd/sites/cmk/var</li>\n</ul>\n<p>Default user: omdadmin</p>\n<p>Default password: omd</p>\n<p>https:(ip-address)/cmk/</p>"
},
{
  "title": "baseimage",
  "description": "baseimage",
  "image": "phusion/baseimage:latest",
  "ports": [],
  "volumes": [],
  "env": [],
  "note": "<h1>Baseimage Linux</h1>\n<p>This is a simple Linux \"baseimage\" container. It is an Interactive container, meaning\nthat the Console UI / CLI will talk directly to the command specified (and\ncan be connected / disconnected repeatedly without killing the container).\nThe command argument also MUST be specified - this is generally /bin/sh or\nsome other useful command in the container.  The baseimage container is also\nspecifically designed for Docker and is intended as a base image for other\ncontainers to inherit from.</p>"
},
{
  "title": "plexpass",
  "description": "plexpass",
  "image": "plexinc/pms-docker:plexpass",
  "ports": [
    "32400/tcp",
    "3005/tcp",
    "8324/tcp",
    "32469/tcp",
    "1900/udp",
    "32410/udp",
    "32412/udp",
    "32413/udp",
    "32414/udp"
  ],
  "logo": "http://the-gadgeteer.com/wp-content/uploads/2015/10/plex-logo-e1446990678679.png",
  "volumes": [
    "/config",
    "/transcode",
    "/data"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    },
    {
      "name": "ADVERTISE_IP",
      "label": "http://<hostIPAddress>:32400/"
    },
    {
      "name": "ALLOWED_NETWORKS",
      "label": "IP/mask[,IP/mask]"
    },
    {
      "name": "PLEX_UID",
      "label": "Plex User ID"
    },
    {
      "name": "PLEX_GID",
      "label": "Plex Group ID"
    },
    {
      "name": "PLEX_CLAIM",
      "label": "Plex Account Token"
    }
  ],
  "note": "<h1>Official Docker container for Plex Media Server (with plexpass)</h1>\n<p><a href=\"https://plex.tv\"><img alt=\"plex\" src=\"http://the-gadgeteer.com/wp-content/uploads/2015/10/plex-logo-e1446990678679.png\" /></a></p>\n<h1>plexinc/pms-docker:plexpass</h1>\n<p>With our easy-to-install Plex Media Server software and your Plex apps, available on all your favorite phones, tablets, streaming devices, gaming consoles, and smart TVs, you can stream your video, music, and photo collections any time, anywhere, to any device.</p>\n<h2>Updates</h2>\n<p>Using the docker tag plexpass enables this docker to update to the latest version during a restart. This image will dowoload and unpack the latest version of the pms-docker using the plexpass update train.  </p>\n<h2>Usage</h2>\n<p>Before you create your container, you must decide on the type of networking you wish to use.  There are essentially three types of networking available:</p>\n<ul>\n<li><code>bridge</code> (default)</li>\n<li><code>host</code></li>\n<li><code>macvlan</code></li>\n</ul>\n<p>The <code>bridge</code> networking creates an entirely new network within the host and runs containers within there.  This network is connected to the physical network via an internal router and docker configures this router to forward certain ports through to the containers within.  The <code>host</code> networking uses the IP address of the host running docker such that a container's networking appears to be the host rather than separate.  The <code>macvlan</code> networking creates a new virtual computer on the network which is the container.  For purposes of setting up a plex container, the <code>host</code> and <code>macvlan</code> are very similar in configuration.</p>\n<p>Using <code>host</code> or <code>macvlan</code> is the easier of the three setups and has the fewest issues that need to be worked around.  However, some setups may be restricted to only running in the <code>bridge</code> mode.  Plex can be made to work in this mode, but it is more complicated.</p>\n<ul>\n<li>\n<p>If you wish your Plex Media Server to be accessible outside of your home network, you must manually setup port forwarding on your router to forward to the <code>ADVERTISE_IP</code> parameters using bridged networking.  By default you can forward port 32400, but if you choose to use a different external port, be sure you configure this in Plex Media Server's <code>Remote Access</code> settings.  With this type of docker networking, the Plex Media Server is essentially behind two routers and it cannot automatically setup port forwarding on its own.</p>\n</li>\n<li>\n<p>(Plex Pass only) After the server has been set up, you should configure the <code>LAN Networks</code> preference to contain the network of your LAN.  This instructs the Plex Media Server to treat these IP addresses as part of your LAN when applying bandwidth controls.  The syntax is the same as the <code>ALLOWED_NETWORKS</code> below.  For example <code>192.168.1.0/24,172.16.0.0/16</code> will allow access to the entire <code>192.168.1.x</code> range and the <code>172.16.x.x</code> range.</p>\n</li>\n</ul>\n<h2>Parameters</h2>\n<ul>\n<li><code>32400:32400/tcp</code> Forwards port 32400 from the host to the container.  This is the primary port that Plex uses for communication and is required for Plex Media Server to operate.</li>\n<li><code>\u2026</code> Forwards complete set of other ports used by Plex to the container.  For a full explanation of which you may need, please see the help article: <a href=\"https://support.plex.tv/hc/en-us/articles/201543147-What-network-ports-do-I-need-to-allow-through-my-firewall\">https://support.plex.tv/hc/en-us/articles/201543147-What-network-ports-do-I-need-to-allow-through-my-firewall</a></li>\n<li><code>&lt;path/to/plex/database&gt;:/config</code> The path where you wish Plex Media Server to store its configuration data.  This database can grow to be quite large depending on the size of your media collection.  This is usually a few GB but for large libraries or libraries where index files are generated, this can easily hit the 100s of GBs.  If you have an existing database directory see the section below on the directory setup. (Note that the underlying filesystem needs to support file locking. Known to not be default enabled on remote filesystems like NFS)</li>\n<li><code>&lt;path/to/transcode/temp&gt;:/transcode</code> The path where you would like Plex Media Server to store its transcoder temp files.  If not provided, the storage space within the container will be used.  Expect sizes in the 10s of GB.</li>\n<li><code>&lt;path/to/media&gt;:/data</code> This is provided as examples for providing media into the container.  The exact structure of how the media is organized and presented inside the container is a matter of user preference.  You can use as many or as few of these parameters as required to provide your media to the container.</li>\n<li><code>KEY=\"value\"</code> These are environment variables which configure the container.  See below for a description of their meanings.</li>\n</ul>\n<p>The following are the recommended parameters.  Each of the following parameters to the container are treated as first-run parameters only.  That is, all other paraters are ignored on subsequent runs of the server.  We recommend that you set the following parameters:</p>\n<ul>\n<li><strong>TZ</strong> Set the timezone inside the container.  For example: <code>Europe/London</code>.  The complete list can be found here: <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</a></li>\n<li><strong>PLEX_CLAIM</strong> The claim token for the server to obtain a real server token.  If not provided, server is will not be automatically logged in.  If server is already logged in, this parameter is ignored.  You can obtain a claim token to login your server to your plex account by visiting <a href=\"https://www.plex.tv/claim\">https://www.plex.tv/claim</a></li>\n<li><strong>ADVERTISE_IP</strong> This variable defines the additional IPs on which the server may be be found.  For example: <code>http://10.1.1.23:32400</code>.  This adds to the list where the server advertises that it can be found.  This is only needed in Bridge Networking.</li>\n</ul>\n<p>These parameters are usually not required but some special setups may benefit from their use.  As in the previous section, each is treated as first-run parameters only:</p>\n<ul>\n<li><strong>PLEX_UID</strong> The user id of the <code>plex</code> user created inside the container.</li>\n<li><strong>PLEX_GID</strong> The group id of the <code>plex</code> group created inside the container</li>\n<li><strong>CHANGE_CONFIG_DIR_OWNERSHIP</strong> Change ownership of config directory to the plex user.  Defaults to <code>true</code>.  If you are certain permissions are already set such that the <code>plex</code> user within the container can read/write data in it's config directory, you can set this to <code>false</code> to speed up the first run of the container.</li>\n<li><strong>ALLOWED_NETWORKS</strong> IP/netmask entries which allow access to the server without requiring authorization.  We recommend you set this only if you do not sign in your server.  For example <code>192.168.1.0/24,172.16.0.0/16</code> will allow access to the entire <code>192.168.1.x</code> range and the <code>172.16.x.x</code> range.  Note: If you are using Bridge networking, then localhost will appear to plex as coming from the docker networking gateway which is often <code>172.16.0.1</code>.</li>\n</ul>\n<h2>Users/Groups</h2>\n<p>Permissions of mounted media outside the container do apply to the Plex Media Server running within the container.  As stated above, the Plex Media Server runs as a specially created <code>plex</code> user within the container.  This user may not exist outside the container and so the <code>PLEX_UID</code> and <code>PLEX_GID</code> parameters are used to set the user id and group id of this user within the container.</p>\n<h2>Config Directory</h2>\n<p>Inside the docker container, the database is stored with a <code>Library/Application Support/Plex Media Server</code> in the <code>config</code> directory.</p>\n<p>If you wish to migrate an existing directory to the docker config directory:</p>\n<ul>\n<li>Locate the current config directory as directed here: <a href=\"https://support.plex.tv/hc/en-us/articles/202915258-Where-is-the-Plex-Media-Server-data-directory-located-\">https://support.plex.tv/hc/en-us/articles/202915258-Where-is-the-Plex-Media-Server-data-directory-located-</a></li>\n<li>If the config dir is stored in a location such as <code>/var/lib/plexmediaserver/Library/Application Support/Plex Media Server/</code>, the config dir will be <code>/var/lib/plexmediaserver</code>.</li>\n<li>If the config dir does not contain <code>Library/Application Support/Plex Media Server/</code> or the directory containing <code>Library</code> has data unrelated to Plex, such as OS X, then you should:</li>\n<li>Create a new directory which will be your new config dir.</li>\n<li>Within that config dir, create the directories <code>Library/Application Support</code></li>\n<li>Copy <code>Plex Media Server</code> into that <code>Library/Application Support</code></li>\n<li>Note: by default Plex will claim ownership of the entire contents of the <code>config</code> dir (see CHANGE_CONFIG_DIR_OWNERSHIP for more information).  As such, there should be nothing in that dir that you do not wish for Plex to own.</li>\n</ul>"
},
{
  "title": "subsonic",
  "description": "subsonic",
  "image": "hurricane/subsonic",
  "ports": [
    "4040/tcp"
  ],
  "logo": "http://www.activeobjects.no/subsonic/forum/templates/subSilver/images/logo_phpBB.gif",
  "volumes": [
    "/subsonic",
    "/music",
    "/podcasts",
    "/playlists",
    "/media"
  ],
  "env": [
    {
      "name": "APP_USER",
      "label": "Subsonic username"
    },
    {
      "name": "APP_UID",
      "label": "Subsonic user UID"
    },
    {
      "name": "APP_GID",
      "label": "Subsonic user GID"
    },
    {
      "name": "HTTP_PORT",
      "label": "HTTP Port"
    },
    {
      "name": "HTTPS_PORT",
      "label": "HTTPS Port"
    },
    {
      "name": "TZ",
      "label": "Time Zone"
    }
  ],
  "note": "<p><img alt=\"Alt text\" src=\"http://www.activeobjects.no/subsonic/forum/templates/subSilver/images/logo_phpBB.gif\" title=\"\" /></p>\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#usage\">Usage</a></li>\n<li><a href=\"#environment-variables\">Environment Variables</a></li>\n<li><a href=\"#volumes\">Volumes</a></li>\n<li><a href=\"#example\">Example</a></li>\n</ul>\n<h2>Introduction</h2>\n<p>This is a Dockerfile for Subsonic version 6.0 based on the hurricane/subsonic image with FreeNAS Corral Docker metadata.</p>\n<p>Subsonic is an open source, web-based media server.  Subsonic supports streaming to multiple clients\nsimultaneously, and supports any streamable media (including MP3, AAC, and\nOgg).  Subsonic also supports on-the-fly media conversion (through the use of\nplugins) of most popular media formats, including WMA, FLAC, and more.</p>\n<h2>Usage</h2>\n<h1>Environment Variables:</h1>\n<p>Most default settings can be adjusted by passing the appropriate environment\nvariable. Here is a list of any and all applicable environment variables that\ncan be override by the end user. </p>\n<p>| ENV VAR        | Definition                                                                     |\n| ------------   | ------------------------------------------------------------------------------ |\n| APP_USER       | Name of user the service will run as.[3]                                     |\n| APP_UID        | UID assigned to APP_USER upon creation, or will query APP_USER's ID.[2]      |\n| APP_GID        | GID assigned to APP_USER upon creation, or will query APP_USER's GID.[2]     |\n| HTTP_PORT      | App's Web UI port used to configure and access the service.[1]               |\n| HTTPS_PORT     | App's Web UI SSL port used to configure and access the service.[1]           |\n| TZ             | Timme Zone.  Ex. \"America/New_York\"  [1]                                         |</p>\n<p>[1]: Variable is applicable during install, when invoking installed wrapper script or systemd service.<br />\n[2]: Variable is applicable only during Docker container creation.<br />\n[3]: Variable is applicable in all scenarios.  </p>\n<ul>\n<li>The default UID and GID 1000.</li>\n<li>The default HTTP_PORT is 4040</li>\n<li>If you set HTTPS_PORT to something else other than <code>0</code> all HTTP request will be\nredirected to HTTPS.</li>\n</ul>\n<h1>Volumes:</h1>\n<ul>\n<li><code>/subsonic</code>  - Folder to store Subsonic's log, configuration and database.</li>\n<li><code>/music</code>     - Default music folder.</li>\n<li><code>/podcasts</code>  - Default podcast folder.</li>\n<li><code>/playlists</code> - Default playlists folder.</li>\n<li><code>/media</code>     - Parent folder for all media types.  Allows user to map only one volume for all media types instead of isolated volumes for each media type.</li>\n</ul>\n<h1>Example:</h1>\n<ul>\n<li>APP_USER=subsonic</li>\n<li>APP_UID=911</li>\n<li>APP_GID=911</li>\n<li>HTTP_PORT=4040</li>\n<li>HTTPS_PORT=0</li>\n<li>/media:/mnt/tank/media</li>\n</ul>"
},
{
  "title": "loggly",
  "description": "loggly",
  "image": "sendgridlabs/loggly-docker:latest",
  "ports": [
    "514/udp"
  ],
  "volumes": [],
  "env": [
    {
      "name": "LOGGLY_AUTH_TOKEN",
      "label": "Loggly Customer Token"
    },
    {
      "name": "LOGGLY_TAG",
      "label": "Tag Describing Source"
    },
    {
      "name": "LOGGLY_DEBUG",
      "label": "True to enable Loggly debug"
    }
  ],
  "note": "<h1>Loggly</h1>\n<p>Docker container for Loggly (via rsyslog). Check out Loggly's <a href=\"https://www.loggly.com/docs/docker-syslog/\">Docker logging documentation</a> to learn more.</p>"
},
{
  "title": "urbackup",
  "description": "urbackup",
  "image": "axemann/urb-docker:latest",
  "ports": [
    "35623/udp",
    "55413/tcp",
    "55414/tcp",
    "55415/tcp"
  ],
  "volumes": [
    "/var/urbackup",
    "/backup",
    "/var/log"
  ],
  "env": [],
  "note": "<h1>What is UrBackup?</h1>\n<p><a href=\"https://www.urbackup.org/\">UrBackup</a> is an easy to setup Open Source client/server backup system, that through a combination of image and file backups accomplishes both data safety and a fast restoration time.</p>\n<p>File and image backups are made while the system is running without interrupting current processes.</p>\n<p>UrBackup also continuously watches folders you want backed up in order to quickly find differences to previous backups. Because of that, incremental file backups are really fast.</p>\n<p>Your files can be restored through the web interface, via the client or the Windows Explorer while the backups of drive volumes can be restored with a bootable CD or USB-Stick (bare metal restore).</p>\n<p>A web interface makes setting up your own backup server really easy. For a quick impression please look at the <a href=\"https://www.urbackup.org/impressions.html\">screenshots here</a>.</p>\n<p>Currently there are over 10,000 running UrBackup server instances (with auto-update enabled) with some instances having hundreds of active clients.</p>\n<h2>NOTE:</h2>\n<p>As it stands, the Docker implementation in FreeNAS Corral automatically uses Google's public DNS servers for name resolution within Docker hosts created by the system.  As such, any machines added to UrBackup will need to be added by IP address rather than hostname.  A work-around for this is to issue the following commands in the console of your Docker host VM:</p>\n<p>~~~~ \necho nameserver ip.ad.dr.ess &gt; /etc/resolv.conf\necho nameserver 2nd.ad.dr.ess &gt;&gt; /etc/resolv.conf\necho search domain.tld &gt;&gt; /etc/resolv.conf\n~~~~</p>\n<p>Unfortunately, this work-around does not survive reboots, so if anyone has a more permanent solution, feel free to comment on this.</p>"
},
{
  "title": "wallabag",
  "description": "wallabag",
  "image": "wallabag/wallabag:latest",
  "ports": [
    "80/tcp"
  ],
  "volumes": [
    "/var/www/wallabag/data"
  ],
  "env": [
    {
      "name": "PUID",
      "label": "UserID"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    },
    {
      "name": "SYMFONY__ENV__DATABASE_DRIVER",
      "label": "defaults to pdo_sqlite"
    },
    {
      "name": "SYMFONY__ENV__DATABASE_HOST",
      "label": "defaults to 127.0.0.1"
    },
    {
      "name": "SYMFONY__ENV__DATABASE_PORT",
      "label": "port of the database host"
    },
    {
      "name": "SYMFONY__ENV__DATABASE_NAME",
      "label": "default symfony, name of DB"
    },
    {
      "name": "SYMFONY__ENV__DATABASE_USER",
      "label": "default root, name of DB user"
    },
    {
      "name": "SYMFONY__ENV__DATABASE_PASSWORD",
      "label": "default ~, password of DB user"
    },
    {
      "name": "SYMFONY__ENV__FOSUSER_REGISTRATION",
      "label": "Default 'true' public registration"
    },
    {
      "name": "MYSQL_ROOT_PASSWORD",
      "label": "Needed for mariadb to initialise"
    },
    {
      "name": "POPULATE_DATABASE",
      "label": "default True for new DB"
    }
  ],
  "note": "<h1>What is wallabag?</h1>\n<p><a href=\"https://www.wallabag.org/\">wallabag</a> is a self hostable application for saving web pages. Unlike other services, wallabag is free (as in freedom) and open source.</p>\n<p>With this application you will not miss content anymore. Click, save, read it when you want. It saves the content you select so that you can read it when you have time.</p>\n<p>Client's for Android and iOS.  Has plugins for most browsers.</p>\n<h1>How to use this image</h1>\n<p>Default login is <code>wallabag:wallabag</code>.</p>\n<h2>Environment variables</h2>\n<ul>\n<li><code>-e MYSQL_ROOT_PASSWORD=...</code> (needed for the mariadb container to initialise and for the entrypoint in the wallabag container to create a database and user if its not there)</li>\n<li><code>-e POSTGRES_PASSWORD=...</code> (needed for the posgres container to initialise and for the entrypoint in the wallabag container to create a database and user if not there)</li>\n<li><code>-e POSTGRES_USER=...</code> (needed for the posgres container to initialise and for the entrypoint in the wallabag container to create a database and user if not there)</li>\n<li><code>-e SYMFONY__ENV__DATABASE_DRIVER=...</code> (defaults to \"pdo_sqlite\", this sets the database driver to use)</li>\n<li><code>-e SYMFONY__ENV__DATABASE_HOST=...</code> (defaults to \"127.0.0.1\", if use mysql this should be the name of the mariadb container)</li>\n<li><code>-e SYMFONY__ENV__DATABASE_PORT=...</code> (port of the database host)</li>\n<li><code>-e SYMFONY__ENV__DATABASE_NAME=...</code>(defaults to \"symfony\", this is the name of the database to use)</li>\n<li><code>-e SYMFONY__ENV__DATABASE_USER=...</code> (defaults to \"root\", this is the name of the database user to use)</li>\n<li><code>-e SYMFONY__ENV__DATABASE_PASSWORD=...</code> (defaults to \"~\", this is the password of the database user to use)</li>\n<li><code>-e SYMFONY__ENV__SECRET=...</code> (defaults to \"ovmpmAWXRCabNlMgzlzFXDYmCFfzGv\")</li>\n<li><code>-e SYMFONY__ENV__MAILER_HOST=...</code>  defaults to \"127.0.0.1\", the SMTP host)</li>\n<li><code>-e SYMFONY__ENV__MAILER_USER=...</code> (defaults to \"~\", the SMTP user)</li>\n<li><code>-e SYMFONY__ENV__MAILER_PASSWORD=...</code>(defaults to \"~\", the SMTP password)</li>\n<li><code>-e SYMFONY__ENV__FROM_EMAIL=...</code>(defaults to \"wallabag@example.com\", the address wallabag uses for outgoing emails)</li>\n<li><code>-e SYMFONY__ENV__FOSUSER_REGISTRATION=...</code>(defaults to \"true\", enable or disable public user registration)</li>\n<li><code>-e POPULATE_DATABASE=...</code>(defaults to \"True\". Does the DB has to be populated or is it an existing one)</li>\n</ul>\n<h2>SQLite</h2>\n<p>The easiest way to start wallabag is to use the SQLite backend. You can spin that up with</p>\n<p><code>$ docker run -p 80:80 wallabag/wallabag</code></p>\n<p>and point your browser to <code>http://localhost:80</code>. For persistent storage you should start the container with a volume:</p>\n<p><code>$ docker run -v /opt/wallabag:/var/www/wallabag/data -p 80:80 wallabag/wallabag</code></p>\n<h2>MariaDB / MySQL</h2>\n<p>For using MariaDB or MySQL you have to define some environment variables with the container. Example:</p>\n<p><code>$ docker run --name wallabag-db -e \"MYSQL_ROOT_PASSWORD=my-secret-pw\" -d mariadb\n$ docker run --name wallabag --link wallabag-db:wallabag-db -e \"MYSQL_ROOT_PASSWORD=my-secret-pw\" -e \"SYMFONY__ENV__DATABASE_DRIVER=pdo_mysql\" -e \"SYMFONY__ENV__DATABASE_HOST=wallabag-db\" -e \"SYMFONY__ENV__DATABASE_PORT=3306\" -e \"SYMFONY__ENV__DATABASE_NAME=wallabag\" -e \"SYMFONY__ENV__DATABASE_USER=wallabag\" -e \"SYMFONY__ENV__DATABASE_PASSWORD=wallapass\" -p 80:80 wallabag/wallabag</code></p>\n<h2>PostgreSQL</h2>\n<p>For using PostgreSQL you have to define some environment variables with the container. Example:</p>\n<p><code>$ docker run --name wallabag-db -e \"POSTGRES_PASSWORD=my-secret-pw\" -e \"POSTGRES_USER=my-super-user\" -d postgres\n$ docker run --name wallabag --link wallabag-db:wallabag-db -e \"POSTGRES_PASSWORD=my-secret-pw\" -e \"POSTGRES_USER=my-super-user\" -e \"SYMFONY__ENV__DATABASE_DRIVER=pdo_pgsql\" -e \"SYMFONY__ENV__DATABASE_HOST=wallabag-db\" -e \"SYMFONY__ENV__DATABASE_PORT=5432\" -e \"SYMFONY__ENV__DATABASE_NAME=wallabag\" -e \"SYMFONY__ENV__DATABASE_USER=wallabag\" -e \"SYMFONY__ENV__DATABASE_PASSWORD=wallapass\" -p 80:80 wallabag/wallabag</code></p>\n<h2>Redis</h2>\n<p>To use redis support a linked redis container with the name <code>redis</code> is needed.</p>\n<p><code>$ docker run -p 6379:6379 --name redis redis:alpine\n$ docker run -p 80:80 --link redis:redis wallabag/wallabag</code></p>\n<h2>Upgrading</h2>\n<p>If there is a version upgrade that needs a database migration. The most easy way to do is running the <code>migrate</code> command:</p>\n<p><code>$ docker run --link wallabag-db:wallabag-db -e &lt;... your config variables here ...&gt;  wallabag/wallabag migrate</code></p>\n<p>Or you can start the container with the new image and run the migration command manually:</p>\n<p><code>$ docker exec -t NAME_OR_ID_OF_YOUR_WALLABAG_CONTAINER /var/www/wallabag/bin/console doctrine:migrations:migrate --env=prod --no-interaction</code></p>\n<h2>nginx</h2>\n<p>I use nginx to make wallabag public available. This is a example how to use it:</p>\n<p>```\nserver {\n        listen 443;\n        server_name wallabag.foo.bar;</p>\n<pre><code>ssl on;\n    ssl_certificate /etc/letsencrypt/live/wallabag.foo.bar/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/wallabag.foo.bar/privkey.pem;\n\nlocation / {\n    proxy_pass http://wallabag;\n    proxy_set_header X-Forwarded-Host $server_name;\n            proxy_set_header X-Forwarded-Proto https;\n            proxy_set_header X-Forwarded-For $remote_addr;\n}\n</code></pre>\n<p>}\n```</p>\n<h2>Import worker</h2>\n<p>To run the <a href=\"http://doc.wallabag.org/en/master/developer/asynchronous.html#install-redis-for-asynchronous-tasks\">async redis import worker</a> use the following command:\n<code>$ docker run --name wallabag --link wallabag-db:wallabag-db --link redis:redis -e &lt;... your config variables here ...&gt;  wallabag/wallabag import &lt;type&gt;</code>\nWhere <code>&lt;type&gt;</code> is one of pocket, readability, instapaper, wallabag_v1, wallabag_v2, firefox or chrome.</p>"
},
{
  "title": "gentoo",
  "description": "gentoo",
  "image": "vguardiola/gentoo:latest",
  "ports": [],
  "volumes": [],
  "env": [],
  "note": "<h1>Gentoo Linux</h1>\n<p>This is a simple Gentoo Linux container. It is an Interactive container, meaning\nthat the Console UI / CLI will talk directly to the command specified (and\ncan be connected / disconnected repeatedly without killing the container).\nThe command argument also MUST be specified - this is generally /bin/sh or\nsome other useful command in the container.</p>"
},
{
  "title": "musicbrainz",
  "description": "musicbrainz",
  "image": "linuxserver/musicbrainz:latest",
  "ports": [
    "5000/tcp"
  ],
  "volumes": [
    "/config",
    "/data"
  ],
  "env": [
    {
      "name": "PUID",
      "label": "UserID"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    },
    {
      "name": "WEBADDRESS",
      "label": "Defaults to localhost"
    },
    {
      "name": "BRAINZCODE",
      "label": "Code from Musicbrainz"
    }
  ],
  "note": "<h1>linuxserver/musicbrainz with FreeNAS 10 Metadata</h1>\n<p><a href=\"https://musicbrainz.org/\">MusicBrainz</a> is an open music encyclopedia that collects music metadata and makes it available to the public.</p>\n<p><a href=\"https://musicbrainz.org/\"><img alt=\"musicbrainz\" src=\"https://raw.githubusercontent.com/linuxserver/beta-templates/master/lsiodev/img/musicbrainzgitlogo.jpg\" /></a></p>\n<h2>Parameters</h2>\n<p><code>The parameters are split into two halves, separated by a colon, the left hand side representing the host and the right the container side. \nFor example with a port -p external:internal - what this shows is the port mapping from internal to external of the container.\nSo -p 8080:80 would expose port 80 from inside the container to be accessible from the host's IP on port 8080\nhttp://192.168.x.x:8080 would show you what's running INSIDE the container on port 80.</code></p>\n<ul>\n<li><code>-p 5000</code> - the port(s)</li>\n<li><code>-v /config</code> - config files for musicbrainz</li>\n<li><code>-v /data</code> - data files for musicbrainz</li>\n<li><code>-e PGID</code> for GroupID - see below for explanation</li>\n<li><code>-e PUID</code> for UserID - see below for explanation</li>\n<li><code>-e BRAINZCODE</code> - to enter musicbrainz code. see below</li>\n<li><code>-e TZ</code> - timezone eg Europe/London</li>\n</ul>\n<p>It is based on alpine linux with S6 overlay, for shell access whilst the container is running do <code>docker exec -it musicbrainz /bin/bash</code>.</p>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes (<code>-v</code> flags) permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<p>In this instance <code>PUID=1001</code> and <code>PGID=1001</code>. To find yours use <code>id user</code> as below:</p>\n<p><code>$ id &lt;dockeruser&gt;\n    uid=1001(dockeruser) gid=1001(dockergroup) groups=1001(dockergroup)</code></p>\n<h2>Setting up the application</h2>\n<ul>\n<li>\n<p><strong>AFTER iniatilisation is complete you will need to edit the line <code>sub WEB_SERVER { \"localhost:5000\" }</code> in file /config/DBDefs.pm changing localhost to the ip of your host, this is to allow css to display properly</strong></p>\n</li>\n<li>\n<p>You must register here to recieve a musicbrainz code to allow you to recieve database updates, it is free. <a href=\"https://metabrainz.org/supporters/account-type\">Get Code here</a>. </p>\n</li>\n<li>The initial import and setup of the database can take quite a long time, dependant on your download speed etc, be patient and don't restart the container before it's complete.</li>\n<li>It appears there are issues with unraid and using /mnt/user/cache/appdata instead of /mnt/cache/appdata, use /mnt/cache/appdata.</li>\n</ul>\n<h2>Info</h2>\n<ul>\n<li>To monitor the logs of the container in realtime <code>docker logs -f musicbrainz</code>.</li>\n<li>\n<p>Shell access whilst the container is running: <code>docker exec -it musicbrainz /bin/bash</code></p>\n</li>\n<li>\n<p>container version number </p>\n</li>\n</ul>\n<p><code>docker inspect -f '{{ index .Config.Labels \"build_version\" }}' musicbrainz</code></p>\n<ul>\n<li>image version number</li>\n</ul>\n<p><code>docker inspect -f '{{ index .Config.Labels \"build_version\" }}' linuxserver/musicbrainz</code></p>"
},
{
  "title": "openhab",
  "description": "openhab",
  "image": "openhab/openhab:2.0.0-amd64",
  "ports": [
    "8080/tcp"
  ],
  "volumes": [
    "/openhab/conf",
    "/openhab/addons",
    "/openhab/userdata"
  ],
  "env": [],
  "note": "<h1>OpenHAB is a vendor and technology agnostic open source automation software for your home</h1>\n<p>The official documentation is located at <a href=\"http://docs.openhab.org/\">http://docs.openhab.org/</a></p>\n<h3>FreeNAS specific information</h3>\n<h5>This docker container is based on <a href=\"https://github.com/openhab/openhab-docker\">openhab/openhab-docker</a> from the OpenHAB project. More information, including a README with much more information is available there.</h5>\n<p>This container adds metadata to make using OpenHAB easier on FreeNAS Corral.</p>\n<p>There are three important directories for OpenHAB that should persist container restarts or upgrades. This image presents those in the FreeNAS UI. The default is to use volumes local to your Docker VM. This is not optimal, and I highly recommend filling out these values with a location elsewhere in your pool. It makes it easier to edit configuration files and less likely you will lose your hard work configuring OpenHAB.</p>"
},
{
  "title": "watchtower",
  "description": "watchtower",
  "image": "centurylink/watchtower",
  "ports": [],
  "volumes": [
    "/var/run/docker.sock"
  ],
  "env": [],
  "note": "<h1>Watchtower</h1>\n<p>A process for watching your Docker containers and automatically restarting them whenever their base image is refreshed.</p>\n<p>Requires volume on host /var/run/docker.sock to container /var/run/docker.sock  This is setup as a FreeNAS static-volume, so should 'just work'.</p>\n<h2>Overview</h2>\n<p>Watchtower is an application that will monitor your running Docker containers and watch for changes to the images that those containers were originally started from. If watchtower detects that an image has changed, it will automatically restart the container using the new image.</p>\n<p>With watchtower you can update the running version of your containerized app simply by pushing a new image to the Docker Hub or your own image registry. Watchtower will pull down your new image, gracefully shut down your existing container and restart it with the same options that were used when it was deployed initially.</p>\n<p>For example, let's say you were running watchtower along with an instance of <em>centurylink/wetty-cli</em> image:</p>\n<p><code>bash\n$ docker ps\nCONTAINER ID   IMAGE                   STATUS          PORTS                    NAMES\n967848166a45   centurylink/wetty-cli   Up 10 minutes   0.0.0.0:8080-&gt;3000/tcp   wetty\n6cc4d2a9d1a5   v2tec/watchtower        Up 15 minutes                            watchtower</code></p>\n<p>Every few mintutes watchtower will pull the latest <em>centurylink/wetty-cli</em> image and compare it to the one that was used to run the \"wetty\" container. If it sees that the image has changed it will stop/remove the \"wetty\" container and then restart it using the new image and the same <code>docker run</code> options that were used to start the container initially (in this case, that would include the <code>-p 8080:3000</code> port mapping).</p>\n<h3>Arguments</h3>\n<p>By default, watchtower will monitor all containers running within the Docker daemon to which it is pointed (in most cases this will be the local Docker daemon, but you can override it with the <code>--host</code> option described in the next section). However, you can restrict watchtower to monitoring a subset of the running containers by specifying the container names as arguments when launching watchtower.</p>\n<p>When no arguments are specified, watchtower will monitor all running containers.</p>\n<h3>Options</h3>\n<p>Any of the options described below can be passed to the watchtower process by setting them after the image name in the <code>docker run</code> string:</p>\n<ul>\n<li><code>--host, -h</code> Docker daemon socket to connect to. Defaults to \"unix:///var/run/docker.sock\" but can be pointed at a remote Docker host by specifying a TCP endpoint as \"tcp://hostname:port\". The host value can also be provided by setting the <code>DOCKER_HOST</code> environment variable.</li>\n<li><code>--interval, -i</code> Poll interval (in seconds). This value controls how frequently watchtower will poll for new images. Defaults to 300 seconds (5 minutes).</li>\n<li><code>--schedule, -s</code> <a href=\"https://godoc.org/github.com/robfig/cron#hdr-CRON_Expression_Format\">Cron expression</a> which defines when and how often to check for new images. Either <code>--interval</code> or the schedule expression could be defined, but not both.</li>\n<li><code>--no-pull</code> Do not pull new images. When this flag is specified, watchtower will not attempt to pull new images from the registry. Instead it will only monitor the local image cache for changes. Use this option if you are building new images directly on the Docker host without pushing them to a registry.</li>\n<li><code>--cleanup</code> Remove old images after updating. When this flag is specified, watchtower will remove the old image after restarting a container with a new image. Use this option to prevent the accumulation of orphaned images on your system as containers are updated.</li>\n<li><code>--tlsverify</code> Use TLS when connecting to the Docker socket and verify the server's certificate.</li>\n<li><code>--debug</code> Enable debug mode. When this option is specified you'll see more verbose logging in the watchtower log file.</li>\n<li><code>--help</code> Show documentation about the supported flags.</li>\n</ul>\n<h2>Linked Containers</h2>\n<p>Watchtower will detect if there are links between any of the running containers and ensure that things are stopped/started in a way that won't break any of the links. If an update is detected for one of the dependencies in a group of linked containers, watchtower will stop and start all of the containers in the correct order so that the application comes back up correctly.</p>\n<p>For example, imagine you were running a <em>mysql</em> container and a <em>wordpress</em> container which had been linked to the <em>mysql</em> container. If watchtower were to detect that the <em>mysql</em> container required an update, it would first shut down the linked <em>wordpress</em> container followed by the <em>mysql</em> container. When restarting the containers it would handle <em>mysql</em> first and then <em>wordpress</em> to ensure that the link continued to work.</p>\n<h2>Stopping Containers</h2>\n<p>When watchtower detects that a running container needs to be updated it will stop the container by sending it a SIGTERM signal.\nIf your container should be shutdown with a different signal you can communicate this to watchtower by setting a label named <em>com.centurylinklabs.watchtower.stop-signal</em> with the value of the desired signal.</p>\n<h2>Updating Watchtower</h2>\n<p>If watchtower is monitoring the same Docker daemon under which the watchtower container itself is running (i.e. if you volume-mounted <em>/var/run/docker.sock</em> into the watchtower container) then it has the ability to update itself. If a new version of the <em>v2tec/watchtower</em> image is pushed to the Docker Hub, your watchtower will pull down the new image and restart itself automatically.</p>"
},
{
  "title": "neo4j",
  "description": "neo4j",
  "image": "neo4j:latest",
  "ports": [
    "7474/tcp",
    "7473/tcp",
    "7687/tcp"
  ],
  "volumes": [
    "/data"
  ],
  "env": [],
  "note": "<h1>neo4j container</h1>\n<p>For more information see the neo4j <a href=\"https://hub.docker.com/_/neo4j/\">documentation</a>.</p>"
},
{
  "title": "nginx-proxy",
  "description": "nginx-proxy",
  "image": "jwilder/nginx-proxy:latest",
  "ports": [
    "80/tcp",
    "443/tcp"
  ],
  "volumes": [
    "/etc/nginx/certs"
  ],
  "env": [
    {
      "name": "DEFAULT_HOST",
      "label": "eg foo.bar.com"
    }
  ],
  "note": "<p>nginx-proxy sets up a container running nginx and <a href=\"https://github.com/jwilder/docker-gen\">docker-gen</a>.  docker-gen generates reverse proxy configs for nginx and reloads nginx when containers are started and stopped.</p>\n<p>See <a href=\"http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/\">Automated Nginx Reverse Proxy for Docker</a> for why you might want to use this.</p>\n<h1>Note: This documentation assumes usage of the docker(1) command, which of course FreeNAS generally does not use.  Some of the more advanced concepts described in this document should be transposed into \"FreeNAS form\" as you read it.</h1>\n<h3>Usage</h3>\n<p>To run it, thse port and volume settings are pertinent:</p>\n<ul>\n<li><code>80:80</code></li>\n<li><code>/var/run/docker.sock:/tmp/docker.sock</code> (read-only)</li>\n</ul>\n<p>Then start any containers you want proxied with an env var <code>VIRTUAL_HOST=subdomain.youdomain.com</code></p>\n<p>The containers being proxied must <a href=\"https://docs.docker.com/reference/run/#expose-incoming-ports\">expose</a> the port to be proxied, either by using the <code>EXPOSE</code> directive in their <code>Dockerfile</code> or by using the <code>--expose</code> flag to <code>docker run</code> or <code>docker create</code>.</p>\n<p>Provided your DNS is setup to forward foo.bar.com to the a host running nginx-proxy, the request will be routed to a container with the VIRTUAL_HOST env var set.</p>\n<h3>Docker Compose</h3>\n<p>```yaml\nversion: '2'\nservices:\n  nginx-proxy:\n    image: jwilder/nginx-proxy\n    container_name: nginx-proxy\n    ports:\n      - \"80:80\"\n    volumes:\n      - /var/run/docker.sock:/tmp/docker.sock:ro</p>\n<p>whoami:\n    image: jwilder/whoami\n    container_name: whoami\n    environment:\n      - VIRTUAL_HOST=whoami.local\n```</p>\n<p><code>shell\n$ docker-compose up\n$ curl -H \"Host: whoami.local\" localhost\nI'm 5b129ab83266</code></p>\n<h3>Multiple Ports</h3>\n<p>If your container exposes multiple ports, nginx-proxy will default to the service running on port 80.  If you need to specify a different port, you can set a VIRTUAL_PORT env var to select a different one.  If your container only exposes one port and it has a VIRTUAL_HOST env var set, that port will be selected.</p>\n<h3>Multiple Hosts</h3>\n<p>If you need to support multiple virtual hosts for a container, you can separate each entry with commas.  For example, <code>foo.bar.com,baz.bar.com,bar.com</code> and each host will be setup the same.</p>\n<h3>Wildcard Hosts</h3>\n<p>You can also use wildcards at the beginning and the end of host name, like <code>*.bar.com</code> or <code>foo.bar.*</code>. Or even a regular expression, which can be very useful in conjunction with a wildcard DNS service like <a href=\"http://xip.io\">xip.io</a>, using <code>~^foo\\.bar\\..*\\.xip\\.io</code> will match <code>foo.bar.127.0.0.1.xip.io</code>, <code>foo.bar.10.0.2.2.xip.io</code> and all other given IPs. More information about this topic can be found in the nginx documentation about <a href=\"http://nginx.org/en/docs/http/server_names.html\"><code>server_names</code></a>.</p>\n<h3>Multiple Networks</h3>\n<p>With the addition of <a href=\"https://docs.docker.com/engine/userguide/networking/get-started-overlay/\">overlay networking</a> in Docker 1.9, your <code>nginx-proxy</code> container may need to connect to backend containers on multiple networks. By default, if you don't pass the <code>--net</code> flag when your <code>nginx-proxy</code> container is created, it will only be attached to the default <code>bridge</code> network. This means that it will not be able to connect to containers on networks other than <code>bridge</code>.</p>\n<p>If you want your <code>nginx-proxy</code> container to be attached to a different network, you must pass the <code>--net=my-network</code> option in your <code>docker create</code> or <code>docker run</code> command. At the time of this writing, only a single network can be specified at container creation time. To attach to other networks, you can use the <code>docker network connect</code> command after your container is created:</p>\n<p><code>console\n$ docker run -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n    --name my-nginx-proxy --net my-network jwilder/nginx-proxy\n$ docker network connect my-other-network my-nginx-proxy</code></p>\n<p>In this example, the <code>my-nginx-proxy</code> container will be connected to <code>my-network</code> and <code>my-other-network</code> and will be able to proxy to other containers attached to those networks.</p>\n<h3>SSL Backends</h3>\n<p>If you would like the reverse proxy to connect to your backend using HTTPS instead of HTTP, set <code>VIRTUAL_PROTO=https</code> on the backend container.</p>\n<h3>uWSGI Backends</h3>\n<p>If you would like to connect to uWSGI backend, set <code>VIRTUAL_PROTO=uwsgi</code> on the\nbackend container. Your backend container should than listen on a port rather\nthan a socket and expose that port.</p>\n<h3>Default Host</h3>\n<p>To set the default host for nginx use the env var <code>DEFAULT_HOST=foo.bar.com</code> for example</p>\n<pre><code>$ docker run -d -p 80:80 -e DEFAULT_HOST=foo.bar.com -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy\n</code></pre>\n<h3>Separate Containers</h3>\n<p>nginx-proxy can also be run as two separate containers using the <a href=\"https://index.docker.io/u/jwilder/docker-gen/\">jwilder/docker-gen</a>\nimage and the official <a href=\"https://registry.hub.docker.com/_/nginx/\">nginx</a> image.</p>\n<p>You may want to do this to prevent having the docker socket bound to a publicly exposed container service.</p>\n<p>You can demo this pattern with docker-compose:</p>\n<p><code>console\n$ docker-compose --file docker-compose-separate-containers.yml up\n$ curl -H \"Host: whoami.local\" localhost\nI'm 5b129ab83266</code></p>\n<p>To run nginx proxy as a separate container you'll need to have <a href=\"https://github.com/jwilder/nginx-proxy/blob/master/nginx.tmpl\">nginx.tmpl</a> on your host system.</p>\n<p>First start nginx with a volume:</p>\n<pre><code>$ docker run -d -p 80:80 --name nginx -v /tmp/nginx:/etc/nginx/conf.d -t nginx\n</code></pre>\n<p>Then start the docker-gen container with the shared volume and template:</p>\n<p><code>$ docker run --volumes-from nginx \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n    -v $(pwd):/etc/docker-gen/templates \\\n    -t jwilder/docker-gen -notify-sighup nginx -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf</code></p>\n<p>Finally, start your containers with <code>VIRTUAL_HOST</code> environment variables.</p>\n<pre><code>$ docker run -e VIRTUAL_HOST=foo.bar.com  ...\n</code></pre>\n<h3>SSL Support using letsencrypt</h3>\n<p><a href=\"https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion\">letsencrypt-nginx-proxy-companion</a>is a lightweight companion container for the nginx-proxy. It allow the creation/renewal of Let's Encrypt certificates automatically. </p>\n<h3>SSL Support</h3>\n<p>SSL is supported using single host, wildcard and SNI certificates using naming conventions for\ncertificates or optionally specifying a cert name (for SNI) as an environment variable.</p>\n<p>To enable SSL:</p>\n<pre><code>$ docker run -d -p 80:80 -p 443:443 -v /path/to/certs:/etc/nginx/certs -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy\n</code></pre>\n<p>The contents of <code>/path/to/certs</code> should contain the certificates and private keys for any virtual\nhosts in use.  The certificate and keys should be named after the virtual host with a <code>.crt</code> and\n<code>.key</code> extension.  For example, a container with <code>VIRTUAL_HOST=foo.bar.com</code> should have a\n<code>foo.bar.com.crt</code> and <code>foo.bar.com.key</code> file in the certs directory.</p>\n<p>If you are running the container in a virtualized environment (Hyper-V, VirtualBox, etc...),\n/path/to/certs must exist in that environment or be made accessible to that environment.\nBy default, Docker is not able to mount directories on the host machine to containers running in a virtual machine.</p>\n<h4>Diffie-Hellman Groups</h4>\n<p>If you have Diffie-Hellman groups enabled, the files should be named after the virtual host with a\n<code>dhparam</code> suffix and <code>.pem</code> extension. For example, a container with <code>VIRTUAL_HOST=foo.bar.com</code>\nshould have a <code>foo.bar.com.dhparam.pem</code> file in the certs directory.</p>\n<h4>Wildcard Certificates</h4>\n<p>Wildcard certificates and keys should be named after the domain name with a <code>.crt</code> and <code>.key</code> extension.\nFor example <code>VIRTUAL_HOST=foo.bar.com</code> would use cert name <code>bar.com.crt</code> and <code>bar.com.key</code>.</p>\n<h4>SNI</h4>\n<p>If your certificate(s) supports multiple domain names, you can start a container with <code>CERT_NAME=&lt;name&gt;</code>\nto identify the certificate to be used.  For example, a certificate for <code>*.foo.com</code> and <code>*.bar.com</code>\ncould be named <code>shared.crt</code> and <code>shared.key</code>.  A container running with <code>VIRTUAL_HOST=foo.bar.com</code>\nand <code>CERT_NAME=shared</code> will then use this shared cert.</p>\n<h4>How SSL Support Works</h4>\n<p>The SSL cipher configuration is based on <a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS#Nginx\">mozilla nginx intermediate profile</a> which\nshould provide compatibility with clients back to Firefox 1, Chrome 1, IE 7, Opera 5, Safari 1,\nWindows XP IE8, Android 2.3, Java 7.  The configuration also enables HSTS, and SSL\nsession caches.</p>\n<p>The default behavior for the proxy when port 80 and 443 are exposed is as follows:</p>\n<ul>\n<li>If a container has a usable cert, port 80 will redirect to 443 for that container so that HTTPS\nis always preferred when available.</li>\n<li>If the container does not have a usable cert, a 503 will be returned.</li>\n</ul>\n<p>Note that in the latter case, a browser may get an connection error as no certificate is available\nto establish a connection.  A self-signed or generic cert named <code>default.crt</code> and <code>default.key</code>\nwill allow a client browser to make a SSL connection (likely w/ a warning) and subsequently receive\na 503.</p>\n<p>To serve traffic in both SSL and non-SSL modes without redirecting to SSL, you can include the\nenvironment variable <code>HTTPS_METHOD=noredirect</code> (the default is <code>HTTPS_METHOD=redirect</code>).  You can also\ndisable the non-SSL site entirely with <code>HTTPS_METHOD=nohttp</code>, or disable the HTTPS site with \n<code>HTTPS_METHOD=nohttps</code>. <code>HTTPS_METHOD</code> must be specified on each container for which you want to \noverride the default behavior.  If <code>HTTPS_METHOD=noredirect</code> is used, Strict Transport Security (HSTS) \nis disabled to prevent HTTPS users from being redirected by the client.  If you cannot get to the HTTP \nsite after changing this setting, your browser has probably cached the HSTS policy and is automatically \nredirecting you back to HTTPS.  You will need to clear your browser's HSTS cache or use an incognito \nwindow / different browser.</p>\n<h3>Basic Authentication Support</h3>\n<p>In order to be able to secure your virtual host, you have to create a file named as its equivalent VIRTUAL_HOST variable on directory\n/etc/nginx/htpasswd/$VIRTUAL_HOST</p>\n<p><code>$ docker run -d -p 80:80 -p 443:443 \\\n    -v /path/to/htpasswd:/etc/nginx/htpasswd \\\n    -v /path/to/certs:/etc/nginx/certs \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n    jwilder/nginx-proxy</code></p>\n<p>You'll need apache2-utils on the machine where you plan to create the htpasswd file. Follow these <a href=\"http://httpd.apache.org/docs/2.2/programs/htpasswd.html\">instructions</a></p>\n<h3>Custom Nginx Configuration</h3>\n<p>If you need to configure Nginx beyond what is possible using environment variables, you can provide custom configuration files on either a proxy-wide or per-<code>VIRTUAL_HOST</code> basis.</p>\n<h4>Replacing default proxy settings</h4>\n<p>If you want to replace the default proxy settings for the nginx container, add a configuration file at <code>/etc/nginx/proxy.conf</code>. A file with the default settings would\nlook like this:</p>\n<p>```Nginx</p>\n<h1>HTTP 1.1 support</h1>\n<p>proxy_http_version 1.1;\nproxy_buffering off;\nproxy_set_header Host $http_host;\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection $proxy_connection;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;\nproxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;\nproxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;</p>\n<h1>Mitigate httpoxy attack (see README for details)</h1>\n<p>proxy_set_header Proxy \"\";\n```</p>\n<p><strong><em>NOTE</em></strong>: If you provide this file it will replace the defaults; you may want to check the .tmpl file to make sure you have all of the needed options.</p>\n<p><strong><em>NOTE</em></strong>: The default configuration blocks the <code>Proxy</code> HTTP request header from being sent to downstream servers.  This prevents attackers from using the so-called <a href=\"http://httpoxy.org\">httpoxy attack</a>.  There is no legitimate reason for a client to send this header, and there are many vulnerable languages / platforms (<code>CVE-2016-5385</code>, <code>CVE-2016-5386</code>, <code>CVE-2016-5387</code>, <code>CVE-2016-5388</code>, <code>CVE-2016-1000109</code>, <code>CVE-2016-1000110</code>, <code>CERT-VU#797896</code>).</p>\n<h4>Proxy-wide</h4>\n<p>To add settings on a proxy-wide basis, add your configuration file under <code>/etc/nginx/conf.d</code> using a name ending in <code>.conf</code>.</p>\n<p>This can be done in a derived image by creating the file in a <code>RUN</code> command or by <code>COPY</code>ing the file into <code>conf.d</code>:</p>\n<p><code>Dockerfile\nFROM jwilder/nginx-proxy\nRUN { \\\n      echo 'server_tokens off;'; \\\n      echo 'client_max_body_size 100m;'; \\\n    } &gt; /etc/nginx/conf.d/my_proxy.conf</code></p>\n<p>Or it can be done by mounting in your custom configuration in your <code>docker run</code> command:</p>\n<pre><code>$ docker run -d -p 80:80 -p 443:443 -v /path/to/my_proxy.conf:/etc/nginx/conf.d/my_proxy.conf:ro -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy\n</code></pre>\n<h4>Per-VIRTUAL_HOST</h4>\n<p>To add settings on a per-<code>VIRTUAL_HOST</code> basis, add your configuration file under <code>/etc/nginx/vhost.d</code>. Unlike in the proxy-wide case, which allows multiple config files with any name ending in <code>.conf</code>, the per-<code>VIRTUAL_HOST</code> file must be named exactly after the <code>VIRTUAL_HOST</code>.</p>\n<p>In order to allow virtual hosts to be dynamically configured as backends are added and removed, it makes the most sense to mount an external directory as <code>/etc/nginx/vhost.d</code> as opposed to using derived images or mounting individual configuration files.</p>\n<p>For example, if you have a virtual host named <code>app.example.com</code>, you could provide a custom configuration for that host as follows:</p>\n<pre><code>$ docker run -d -p 80:80 -p 443:443 -v /path/to/vhost.d:/etc/nginx/vhost.d:ro -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy\n$ { echo 'server_tokens off;'; echo 'client_max_body_size 100m;'; } &gt; /path/to/vhost.d/app.example.com\n</code></pre>\n<p>If you are using multiple hostnames for a single container (e.g. <code>VIRTUAL_HOST=example.com,www.example.com</code>), the virtual host configuration file must exist for each hostname. If you would like to use the same configuration for multiple virtual host names, you can use a symlink:</p>\n<pre><code>$ { echo 'server_tokens off;'; echo 'client_max_body_size 100m;'; } &gt; /path/to/vhost.d/www.example.com\n$ ln -s /path/to/vhost.d/www.example.com /path/to/vhost.d/example.com\n</code></pre>\n<h4>Per-VIRTUAL_HOST default configuration</h4>\n<p>If you want most of your virtual hosts to use a default single configuration and then override on a few specific ones, add those settings to the <code>/etc/nginx/vhost.d/default</code> file. This file\nwill be used on any virtual host which does not have a <code>/etc/nginx/vhost.d/{VIRTUAL_HOST}</code> file associated with it.</p>\n<h4>Per-VIRTUAL_HOST location configuration</h4>\n<p>To add settings to the \"location\" block on a per-<code>VIRTUAL_HOST</code> basis, add your configuration file under <code>/etc/nginx/vhost.d</code>\njust like the previous section except with the suffix <code>_location</code>.</p>\n<p>For example, if you have a virtual host named <code>app.example.com</code> and you have configured a proxy_cache <code>my-cache</code> in another custom file, you could tell it to use a proxy cache as follows:</p>\n<pre><code>$ docker run -d -p 80:80 -p 443:443 -v /path/to/vhost.d:/etc/nginx/vhost.d:ro -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy\n$ { echo 'proxy_cache my-cache;'; echo 'proxy_cache_valid  200 302  60m;'; echo 'proxy_cache_valid  404 1m;' } &gt; /path/to/vhost.d/app.example.com_location\n</code></pre>\n<p>If you are using multiple hostnames for a single container (e.g. <code>VIRTUAL_HOST=example.com,www.example.com</code>), the virtual host configuration file must exist for each hostname. If you would like to use the same configuration for multiple virtual host names, you can use a symlink:</p>\n<pre><code>$ { echo 'proxy_cache my-cache;'; echo 'proxy_cache_valid  200 302  60m;'; echo 'proxy_cache_valid  404 1m;' } &gt; /path/to/vhost.d/app.example.com_location\n$ ln -s /path/to/vhost.d/www.example.com /path/to/vhost.d/example.com\n</code></pre>\n<h4>Per-VIRTUAL_HOST location default configuration</h4>\n<p>If you want most of your virtual hosts to use a default single <code>location</code> block configuration and then override on a few specific ones, add those settings to the <code>/etc/nginx/vhost.d/default_location</code> file. This file\nwill be used on any virtual host which does not have a <code>/etc/nginx/vhost.d/{VIRTUAL_HOST}</code> file associated with it.</p>\n<h3>Contributing</h3>\n<p>Before submitting pull requests or issues, please check github to make sure an existing issue or pull request is not already open.</p>\n<h4>Running Tests Locally</h4>\n<p>To run tests, you'll need to install <a href=\"https://github.com/sstephenson/bats\">bats 0.4.0</a>.</p>\n<pre><code>make test\n</code></pre>"
},
{
  "title": "plex",
  "description": "plex",
  "image": "plexinc/pms-docker:latest",
  "ports": [
    "32400/tcp",
    "3005/tcp",
    "8324/tcp",
    "32469/tcp",
    "1900/udp",
    "32410/udp",
    "32412/udp",
    "32413/udp",
    "32414/udp"
  ],
  "logo": "http://the-gadgeteer.com/wp-content/uploads/2015/10/plex-logo-e1446990678679.png",
  "volumes": [
    "/config",
    "/transcode",
    "/data"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Plex container Timezone"
    },
    {
      "name": "ADVERTISE_IP",
      "label": "http://<hostIPAddress>:32400/"
    },
    {
      "name": "ALLOWED_NETWORKS",
      "label": "IP/mask[,IP/mask]"
    },
    {
      "name": "PLEX_UID",
      "label": "Plex User ID"
    },
    {
      "name": "PLEX_GID",
      "label": "Plex Group ID"
    },
    {
      "name": "PLEX_CLAIM",
      "label": "Plex Account Token"
    }
  ],
  "note": "<p><a href=\"https://plex.tv\"><img alt=\"plex\" src=\"http://the-gadgeteer.com/wp-content/uploads/2015/10/plex-logo-e1446990678679.png\" /></a></p>\n<h1>Official Docker container for Plex Media Server</h1>\n<p>With our easy-to-install Plex Media Server software and your Plex apps, available on all your favorite phones, tablets, streaming devices, gaming consoles, and smart TVs, you can stream your video, music, and photo collections any time, anywhere, to any device.</p>\n<h2>Updates</h2>\n<p>Using the docker tag public enables this docker to update to the latest version during a restart. This image will dowoload and unpack the latest version of the pms-docker using the public release update train.  </p>\n<h2>Usage</h2>\n<p>Before you create your container, you must decide on the type of networking you wish to use.  There are essentially three types of networking available:</p>\n<ul>\n<li><code>bridge</code> (default)</li>\n<li><code>host</code></li>\n<li><code>macvlan</code></li>\n</ul>\n<p>The <code>bridge</code> networking creates an entirely new network within the host and runs containers within there.  This network is connected to the physical network via an internal router and docker configures this router to forward certain ports through to the containers within.  The <code>host</code> networking uses the IP address of the host running docker such that a container's networking appears to be the host rather than separate.  The <code>macvlan</code> networking creates a new virtual computer on the network which is the container.  For purposes of setting up a plex container, the <code>host</code> and <code>macvlan</code> are very similar in configuration.</p>\n<p>Using <code>host</code> or <code>macvlan</code> is the easier of the three setups and has the fewest issues that need to be worked around.  However, some setups may be restricted to only running in the <code>bridge</code> mode.  Plex can be made to work in this mode, but it is more complicated.</p>\n<ul>\n<li>\n<p>If you wish your Plex Media Server to be accessible outside of your home network, you must manually setup port forwarding on your router to forward to the <code>ADVERTISE_IP</code> parameters using bridged networking.  By default you can forward port 32400, but if you choose to use a different external port, be sure you configure this in Plex Media Server's <code>Remote Access</code> settings.  With this type of docker networking, the Plex Media Server is essentially behind two routers and it cannot automatically setup port forwarding on its own.</p>\n</li>\n<li>\n<p>(Plex Pass only) After the server has been set up, you should configure the <code>LAN Networks</code> preference to contain the network of your LAN.  This instructs the Plex Media Server to treat these IP addresses as part of your LAN when applying bandwidth controls.  The syntax is the same as the <code>ALLOWED_NETWORKS</code> below.  For example <code>192.168.1.0/24,172.16.0.0/16</code> will allow access to the entire <code>192.168.1.x</code> range and the <code>172.16.x.x</code> range.</p>\n</li>\n</ul>\n<h2>Parameters</h2>\n<ul>\n<li><code>32400:32400/tcp</code> Forwards port 32400 from the host to the container.  This is the primary port that Plex uses for communication and is required for Plex Media Server to operate.</li>\n<li><code>\u2026</code> Forwards complete set of other ports used by Plex to the container.  For a full explanation of which you may need, please see the help article: <a href=\"https://support.plex.tv/hc/en-us/articles/201543147-What-network-ports-do-I-need-to-allow-through-my-firewall\">https://support.plex.tv/hc/en-us/articles/201543147-What-network-ports-do-I-need-to-allow-through-my-firewall</a></li>\n<li><code>&lt;path/to/plex/database&gt;:/config</code> The path where you wish Plex Media Server to store its configuration data.  This database can grow to be quite large depending on the size of your media collection.  This is usually a few GB but for large libraries or libraries where index files are generated, this can easily hit the 100s of GBs.  If you have an existing database directory see the section below on the directory setup. (Note that the underlying filesystem needs to support file locking. Known to not be default enabled on remote filesystems like NFS)</li>\n<li><code>&lt;path/to/transcode/temp&gt;:/transcode</code> The path where you would like Plex Media Server to store its transcoder temp files.  If not provided, the storage space within the container will be used.  Expect sizes in the 10s of GB.</li>\n<li><code>&lt;path/to/media&gt;:/data</code> This is provided as examples for providing media into the container.  The exact structure of how the media is organized and presented inside the container is a matter of user preference.  You can use as many or as few of these parameters as required to provide your media to the container.</li>\n<li><code>KEY=\"value\"</code> These are environment variables which configure the container.  See below for a description of their meanings.</li>\n</ul>\n<p>The following are the recommended parameters.  Each of the following parameters to the container are treated as first-run parameters only.  That is, all other paraters are ignored on subsequent runs of the server.  We recommend that you set the following parameters:</p>\n<ul>\n<li><strong>TZ</strong> Set the timezone inside the container.  For example: <code>Europe/London</code>.  The complete list can be found here: <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</a></li>\n<li><strong>PLEX_CLAIM</strong> The claim token for the server to obtain a real server token.  If not provided, server is will not be automatically logged in.  If server is already logged in, this parameter is ignored.  You can obtain a claim token to login your server to your plex account by visiting <a href=\"https://www.plex.tv/claim\">https://www.plex.tv/claim</a></li>\n<li><strong>ADVERTISE_IP</strong> This variable defines the additional IPs on which the server may be be found.  For example: <code>http://10.1.1.23:32400</code>.  This adds to the list where the server advertises that it can be found.  This is only needed in Bridge Networking.</li>\n</ul>\n<p>These parameters are usually not required but some special setups may benefit from their use.  As in the previous section, each is treated as first-run parameters only:</p>\n<ul>\n<li><strong>PLEX_UID</strong> The user id of the <code>plex</code> user created inside the container.</li>\n<li><strong>PLEX_GID</strong> The group id of the <code>plex</code> group created inside the container</li>\n<li><strong>CHANGE_CONFIG_DIR_OWNERSHIP</strong> Change ownership of config directory to the plex user.  Defaults to <code>true</code>.  If you are certain permissions are already set such that the <code>plex</code> user within the container can read/write data in it's config directory, you can set this to <code>false</code> to speed up the first run of the container.</li>\n<li><strong>ALLOWED_NETWORKS</strong> IP/netmask entries which allow access to the server without requiring authorization.  We recommend you set this only if you do not sign in your server.  For example <code>192.168.1.0/24,172.16.0.0/16</code> will allow access to the entire <code>192.168.1.x</code> range and the <code>172.16.x.x</code> range.  Note: If you are using Bridge networking, then localhost will appear to plex as coming from the docker networking gateway which is often <code>172.16.0.1</code>.</li>\n</ul>\n<h2>Users/Groups</h2>\n<p>Permissions of mounted media outside the container do apply to the Plex Media Server running within the container.  As stated above, the Plex Media Server runs as a specially created <code>plex</code> user within the container.  This user may not exist outside the container and so the <code>PLEX_UID</code> and <code>PLEX_GID</code> parameters are used to set the user id and group id of this user within the container.</p>\n<h2>Config Directory</h2>\n<p>Inside the docker container, the database is stored with a <code>Library/Application Support/Plex Media Server</code> in the <code>config</code> directory.</p>\n<p>If you wish to migrate an existing directory to the docker config directory:</p>\n<ul>\n<li>Locate the current config directory as directed here: <a href=\"https://support.plex.tv/hc/en-us/articles/202915258-Where-is-the-Plex-Media-Server-data-directory-located-\">https://support.plex.tv/hc/en-us/articles/202915258-Where-is-the-Plex-Media-Server-data-directory-located-</a></li>\n<li>If the config dir is stored in a location such as <code>/var/lib/plexmediaserver/Library/Application Support/Plex Media Server/</code>, the config dir will be <code>/var/lib/plexmediaserver</code>.</li>\n<li>If the config dir does not contain <code>Library/Application Support/Plex Media Server/</code> or the directory containing <code>Library</code> has data unrelated to Plex, such as OS X, then you should:</li>\n<li>Create a new directory which will be your new config dir.</li>\n<li>Within that config dir, create the directories <code>Library/Application Support</code></li>\n<li>Copy <code>Plex Media Server</code> into that <code>Library/Application Support</code></li>\n<li>Note: by default Plex will claim ownership of the entire contents of the <code>config</code> dir (see CHANGE_CONFIG_DIR_OWNERSHIP for more information).  As such, there should be nothing in that dir that you do not wish for Plex to own.</li>\n</ul>"
},
{
  "title": "transmission",
  "description": "transmission",
  "image": "linuxserver/transmission:latest",
  "ports": [
    "9091/tcp",
    "51413/tcp",
    "51413/udp"
  ],
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/transmission.png",
  "volumes": [
    "/config",
    "/watch",
    "/downloads"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    }
  ],
  "note": "<p><a href=\"https://www.transmissionbt.com/\"><img alt=\"transmission\" src=\"https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/transmission.png\" /></a></p>\n<p>Transmission is designed to be easy to use, yet powerful. Transmission has the features you want from a BitTorrent client: encryption, a web interface, peer exchange, magnet links, DHT, \u00b5TP, UPnP and NAT-PMP port forwarding, webseed support, watch directories, tracker editing, global and per-torrent speed limits, and more. <a href=\"http://www.transmissionbt.com/about/\">Transmission</a></p>\n<h2>Usage</h2>\n<h3>Volumes:</h3>\n<ul>\n<li><code>&lt;path to data&gt;:/config</code>\nwhere transmission should store config files and logs</li>\n<li><code>&lt;path to downloads&gt;:/downloads</code>\nlocal path for downloads</li>\n<li><code>&lt;path to watch folder&gt;:/watch</code>\nwatch folder for torrent files</li>\n</ul>\n<h3>Variables:</h3>\n<ul>\n<li><code>PUID=&lt;uid&gt;</code> \nSee below for explanation</li>\n<li><code>PGID=&lt;gid&gt;</code>\nSee below for explanation</li>\n<li><code>TZ=&lt;timezone&gt;</code>\ne.g. Europe/London</li>\n</ul>\n<h3>Ports:</h3>\n<ul>\n<li>9091:9091</li>\n<li>51413:51413</li>\n<li>51413:51413/udp</li>\n</ul>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes, permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Setting up the application</h2>\n<p>Webui is on port 9091, the settings.json file in /config has extra settings not available in the webui. Stop the container before editing it or any changes won't be saved.</p>\n<h2>Securing the webui with a username/password.</h2>\n<p>this requires 3 settings to be changed in the settings.json file.</p>\n<p><code>Make sure the container is stopped before editing these settings.</code></p>\n<p><code>\"rpc-authentication-required\": true,</code> - check this, the default is false, change to true.</p>\n<p><code>\"rpc-username\": \"transmission\",</code> substitute transmission for your chosen user name, this is just an example.</p>\n<p><code>rpc-password</code> will be a hash starting with {, replace everything including the { with your chosen password, keeping the quotes.</p>\n<p>Transmission will convert it to a hash when you restart the container after making the above edits.</p>\n<h2>Updating Blocklists Automatically</h2>\n<p>This requires <code>\"blocklist-enabled\": true,</code> to be set. By setting this to true, it is assumed you have also populated <code>blocklist-url</code> with a valid block list.</p>\n<p>The automatic update is a shell script that downloads a blocklist from the url stored in the settings.json, gunzips it, and restarts the transmission daemon.</p>\n<p>The automatic update will run once a day at 3am local server time.</p>"
},
{
  "title": "MongoDB",
  "description": "MongoDB",
  "image": "bitnami/mongodb:latest",
  "ports": [
    "27017/tcp"
  ],
  "volumes": [
    "/bitnami/mongodb"
  ],
  "env": [
    {
      "name": "MONGODB_ROOT_PASSWORD",
      "label": "Database root PW"
    },
    {
      "name": "MONGODB_USERNAME",
      "label": "Database username"
    },
    {
      "name": "PGID",
      "label": "Name of Group the service will run as"
    },
    {
      "name": "PUID",
      "label": "Name of user the service will run as"
    }
  ],
  "note": "<h1>What is MongoDB?</h1>\n<p>MongoDB is a cross-platform document-oriented database. Classified as a NoSQL database, MongoDB eschews the traditional table-based relational database structure in favor of JSON-like documents with dynamic schemas, making the integration of data in certain types of applications easier and faster.</p>"
},
{
  "title": "pyload",
  "description": "pyload",
  "image": "cobraeti/docker-pyload",
  "ports": [
    "8000/tcp"
  ],
  "volumes": [
    "/pyload/config",
    "/pyload/downloads"
  ],
  "env": [
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    }
  ],
  "note": "<h1>docker-pyload</h1>\n<p>A docker container based on <a href=\"https://github.com/linuxserver\" title=\"LinuxServer.io repositories\">linuxserver</a>/<a href=\"https://github.com/linuxserver/docker-baseimage\" title=\"docker-baseimage repository\">baseimage</a> and running <a href=\"https://github.com/pyload/pyload\" title=\"pyLoad repository\">pyLoad</a></p>\n<h3>Parameters</h3>\n<ul>\n<li>8000:8000 - the webUI port mapping</li>\n<li></path/to/your/downloads>:/pyload/downloads - path to your downloads folder</li>\n<li></path/to/pyload/config>:/pyload/config - where pyLoad should store it's config files</li>\n<li>/etc/localtime:/etc/localtime:ro - Share of the host localtime (optionnal)</li>\n<li>PUID=<UID> for UserID - see below for explanation</li>\n<li>PGID=<GID> for GroupID - see below for explanation</li>\n</ul>\n<h3>User / Group Identifiers</h3>\n<p>From LinuxServer.io description:</p>\n<blockquote>\n<p>TL;DR - The PGID and PUID values set the user / group you'd like your container to 'run as' to the host OS. This can be a user you've created or even root (not recommended).\nPart of what makes our containers work so well is by allowing you to specify your own PUID and PGID. This avoids nasty permissions errors with relation to data volumes. When an application is installed on the host OS it is normally added to the common group called users, Docker apps due to the nature of the technology can't be added to this group. So we added this feature to let you easily choose when running your containers.</p>\n</blockquote>\n<h3>Default configs</h3>\n<h4>WebUI port</h4>\n<p>The default port for webUI is 8000 and must stay like that. If you need to use another one, only change the port mapping when creating the container</p>\n<h4>WebUI user</h4>\n<ul>\n<li>Default login: <code>User</code></li>\n<li>Default password: <code>pyload</code></li>\n</ul>\n<p>You can (and should ^^) change the password through the webUI (Top right corner &gt; Administrate &gt; User &gt; change).</p>\n<p>Notes:\n * New users seems to be available only after pyLoad restart (Top right corner &gt; Administrate &gt; Restart pyLoad)\n * Don't forget to leave the user management script with choice 4 (Quit) or users won't be added</p>\n<h4>Downloads folder</h4>\n<p>The default folder for downloads is <code>/pyload/downloads</code>and must stay like that. If you need to change the destination folder for downloads, only change the volume mapping when creating the container.</p>"
},
{
  "title": "lazylibrarian",
  "description": "lazylibrarian",
  "image": "linuxserver/lazylibrarian",
  "ports": [
    "5299/tcp",
    "8181/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/lazylibrarian-icon.png",
  "volumes": [
    "/config",
    "/downloads",
    "/books"
  ],
  "env": [
    {
      "name": "PGID",
      "label": "PGID"
    },
    {
      "name": "PUID",
      "label": "PUID"
    },
    {
      "name": "TZ",
      "label": "for setting timezone information, eg Europe/London"
    }
  ],
  "note": "<p><a href=\"https://github.com/DobyTang/LazyLibrarian\"><img alt=\"lazylibrarian\" src=\"https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/lazylibrarian-icon.png\" /></a></p>\n<p>Lazylibrary is a program to follow authors and grab metadata for all your digital reading needs. It uses a combination of Goodreads Librarything and optionally GoogleBooks as sources for author info and book info.  This container is based on the DobyTang fork.</p>\n<h2>Parameters</h2>\n<ul>\n<li><code>5299</code> - Port for webui</li>\n<li><code>/config</code> Containers lazylibrarian config and database</li>\n<li><code>/downloads</code> lazylibrarian download folder</li>\n<li><code>/books</code> location of ebook library</li>\n<li><code>PGID</code> for GroupID - see below for explanation</li>\n<li><code>PUID</code> for UserID - see below for explanation</li>\n<li><code>TZ</code> for setting timezone information, eg Europe/London</li>\n</ul>\n<p>Container is based on alpine linux with s6 overlay, for shell access whilst the container is running use the console button in the GUI or use the console sub-command in the CLI.</p>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Setting up the application</h2>\n<p>Access the webui at <code>&lt;your-ip&gt;:5299/home</code>, for more information check out [LazyLibrarian][lazyurl]..</p>"
},
{
  "title": "nzbhydra",
  "description": "nzbhydra",
  "image": "linuxserver/hydra:latest",
  "ports": [
    "5075/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/hydra-icon.png",
  "volumes": [
    "/config",
    "/downloads"
  ],
  "env": [
    {
      "name": "PUID",
      "label": "UserID"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    }
  ],
  "note": "<h1>linuxserver/hydra with FreeNAS metadata</h1>\n<p>NZBHydra is a meta search for NZB indexers and the \"spiritual successor\" to NZBmegasearcH. It provides easy access to a number of raw and newznab based indexers. <a href=\"https://github.com/theotherp/nzbhydra\">hydra</a></p>\n<p><a href=\"https://github.com/theotherp/nzbhydra\"><img alt=\"hydra\" src=\"https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/hydra-icon.png\" /></a></p>\n<h2>Parameters</h2>\n<p><code>The parameters are split into two halves, separated by a colon, the left hand side representing the host and the right the container side. \nFor example with a port -p external:internal - what this shows is the port mapping from internal to external of the container.\nSo -p 8080:80 would expose port 80 from inside the container to be accessible from the host's IP on port 8080\nhttp://192.168.x.x:8080 would show you what's running INSIDE the container on port 80.</code></p>\n<ul>\n<li><code>-p 5075</code> - the port(s)</li>\n<li><code>-v /config</code> - Where hydra should store config files</li>\n<li><code>-v /downloads</code> - NZB download folder</li>\n<li><code>-e PGID</code> for GroupID - see below for explanation</li>\n<li><code>-e PUID</code> for UserID - see below for explanation</li>\n<li><code>-e TZ</code> for timezone EG. Europe/London</li>\n</ul>\n<p>It is based on alpine linux with s6 overlay, for shell access whilst the container is running do <code>docker exec -it hydra /bin/bash</code>.</p>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes (<code>-v</code> flags) permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<p>In this instance <code>PUID=1001</code> and <code>PGID=1001</code>. To find yours use <code>id user</code> as below:</p>\n<p><code>$ id &lt;dockeruser&gt;\n    uid=1001(dockeruser) gid=1001(dockergroup) groups=1001(dockergroup)</code></p>\n<h2>Setting up the application</h2>\n<p>The web interface is at <code>&lt;your ip&gt;:5075</code> , to set up indexers and connections to your nzb download applications.</p>\n<h2>Info</h2>\n<ul>\n<li>\n<p>To monitor the logs of the container in realtime <code>docker logs -f hydra</code>.</p>\n</li>\n<li>\n<p>container version number </p>\n</li>\n</ul>\n<p><code>docker inspect -f '{{ index .Config.Labels \"build_version\" }}' hydra</code></p>\n<ul>\n<li>image version number</li>\n</ul>\n<p><code>docker inspect -f '{{ index .Config.Labels \"build_version\" }}' linuxserver/hydra</code></p>"
},
{
  "title": "pi-hole",
  "description": "pi-hole",
  "image": "diginc/pi-hole:alpine",
  "ports": [
    "53/tcp",
    "53/udp",
    "80/tcp"
  ],
  "volumes": [
    "/etc/pihole/"
  ],
  "env": [
    {
      "name": "ServerIP",
      "label": "This container's external IP"
    },
    {
      "name": "WEBPASSWORD",
      "label": "Custom password; set this or Pi-Hole generates one for you"
    },
    {
      "name": "DNS1",
      "label": "Primary upstream DNS; default: 8.8.8.8"
    },
    {
      "name": "DNS2",
      "label": "Secondary upstream DNS; default: 8.8.4.4"
    },
    {
      "name": "VIRTUAL_HOST",
      "label": "Allows admin-access using a custom hostname / IP"
    },
    {
      "name": "IPv6",
      "label": "Set to 'false' to disable IPv6 support"
    }
  ],
  "note": "<h1>Pi-Hole</h1>\n<p>A black hole for Internet advertisements, based on the Docker image of <a href=\"https://github.com/diginc/docker-pi-hole\">Diginc</a>.</p>\n<h2>About Pi-Hole</h2>\n<p>Pi-Hole block ads for all your devices on DNS-level without the need to install client-side software.</p>\n<h3>More</h3>\n<ul>\n<li><a href=\"https://pi-hole.net\">Website</a></li>\n<li><a href=\"https://github.com/pi-hole/pi-hole\">GitHub</a></li>\n</ul>\n<h2>About this image</h2>\n<p>This Docker image is based on the image of <a href=\"https://github.com/diginc/docker-pi-hole\">Diginc</a>.<br />\nThe project's <a href=\"https://github.com/diginc/docker-pi-hole/blob/master/README.md\">README.md</a> contains an overview of the available <a href=\"https://github.com/diginc/docker-pi-hole/blob/master/README.md#environment-variables\">environment variables</a> and <a href=\"https://github.com/diginc/docker-pi-hole/blob/master/README.md#volume-mounts\">volume mounts</a>.</p>"
},
{
  "title": "emacs",
  "description": "emacs",
  "image": "silex/emacs",
  "ports": [],
  "volumes": [],
  "env": [],
  "note": "<h1>GNU Emacs screen editor</h1>\n<p>This is the popular editor, running as an Interactive container.  When the editor process exits, the container will stop.</p>"
},
{
  "title": "sickrage",
  "description": "sickrage",
  "image": "linuxserver/sickrage:latest",
  "ports": [
    "8081/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/sickrage-banner.png",
  "volumes": [
    "/config",
    "/downloads",
    "/tv"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone information, eg Europe/London"
    },
    {
      "name": "PUID",
      "label": "User ID"
    },
    {
      "name": "PGID",
      "label": "Group ID"
    }
  ],
  "note": "<p><a href=\"https://sickrage.github.io/\"><img alt=\"sickrage\" src=\"https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/sickrage-banner.png\" /></a></p>\n<h1>Sickrage: Automatic Video Library Manager for TV Shows.</h1>\n<p>Watches for new episodes of your favorite shows, and when they are posted it does its magic.</p>\n<h2>Parameters</h2>\n<ul>\n<li><code>8081</code> - the port(s)</li>\n<li><code>/config</code> - where sickrage should store config files.</li>\n<li><code>/downloads</code> - your downloads folder</li>\n<li><code>/tv</code> - your tv-shows folder</li>\n<li><code>PGID</code> for GroupID - see below for explanation</li>\n<li><code>PUID</code> for UserID - see below for explanation</li>\n<li><code>TZ</code> for timezone information, eg Europe/London</li>\n</ul>\n<p>Container is based on alpine linux with s6 overlay, for shell access whilst the container is running use the console button in the GUI or use the console sub-command in the CLI.</p>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes, permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Setting up the application</h2>\n<p>Web interface is at <code>&lt;your ip&gt;:8081</code> , set paths for downloads, tv-shows to match docker mappings via the webui.</p>"
},
{
  "title": "transmission-openvpn",
  "description": "transmission-openvpn",
  "image": "haugene/transmission-openvpn:latest",
  "ports": [
    "9091/tcp"
  ],
  "volumes": [
    "/config",
    "/data",
    "/scripts",
    "/etc/openvpn/"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone"
    },
    {
      "name": "LOCAL_NETWORK",
      "label": "IP/mask[,IP/mask]"
    },
    {
      "name": "OPENVPN_USERNAME",
      "label": "USERNAME"
    },
    {
      "name": "OPENVPN_PASSWORD",
      "label": "PASSWORD"
    },
    {
      "name": "OPENVPN_PROVIDER",
      "label": "PROVIDER"
    },
    {
      "name": "PUID",
      "label": "UserID"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    }
  ],
  "note": "<h3>Transmission &amp; OpenVPN</h3>\n<p>This is a fork of the popular Transmission bittorrent client specifically for FreeNAS Corral.</p>\n<p>This is a fork of Haugene's version, which includes OpenVPN support for many common VPN providers.</p>\n<p>Full details can be found at https://github.com/haugene/docker-transmission-openvpn</p>\n<p>Please note: You will need to download an ovpn configuration file and place in your /etc/openvpn folder.</p>"
},
{
  "title": "wekan",
  "description": "wekan",
  "image": "wekanteam/wekan:meteor-1.4",
  "ports": [
    "80/tcp"
  ],
  "volumes": [],
  "env": [
    {
      "name": "MONGO_URL",
      "label": "mongodb://myMongoDbIPorFQDN"
    },
    {
      "name": "ROOT_URL",
      "label": "URL that this container will be accessed on, including port"
    }
  ],
  "note": "<h1>Freenas Wekan Image</h1>\n<p>This image requires MongoDB for storage.</p>\n<p>For more info please see the <a href=\"https://github.com/wekan/wekan/wiki/Docker\">Official Wekan Docker Instructions</a>.</p>"
},
{
  "title": "collabora",
  "description": "collabora",
  "image": "collabora/code:latest",
  "ports": [
    "9980/tcp"
  ],
  "volumes": [],
  "env": [
    {
      "name": "domain",
      "label": "localhost"
    },
    {
      "name": "username",
      "label": "admin"
    },
    {
      "name": "password",
      "label": "secret"
    }
  ],
  "note": "<h2>Collabora Online</h2>\n<p>collabora/code - Can be used to link with NextCloud for online editing.</p>\n<p>https://www.collaboraoffice.com/code/</p>\n<p>LibreOffice Online is great for home use as well as enjoying the latest translations and developments. CODE is a somewhat more conservative version \u2013 but still a development edition \u2013 of LibreOffice Online, and is built around the Collabora Office core. CODE is perfect for home users that want to start to run their own online Office Suite.The LibreOffice Online Docker Image docker image is a very regularly updated snapshot of the latest master build of both online and LibreOffice that has passed both the LibreOffice and online automated testing. CODE builds on the other hand, are released on average once a month and announced on this website.</p>\n<h2>Setting up Nginx Reverse Proxy</h2>\n<p>```\nserver {\n    listen       443 ssl;\n    server_name  collabora.example.com;</p>\n<pre><code>ssl_certificate /path/to/ssl_certificate;\nssl_certificate_key /path/to/ssl_certificate_key;\n\n# static files\nlocation ^~ /loleaflet {\n    proxy_pass https://localhost:9980;\n    proxy_set_header Host $http_host;\n}\n\n# WOPI discovery URL\nlocation ^~ /hosting/discovery {\n    proxy_pass https://localhost:9980;\n    proxy_set_header Host $http_host;\n}\n\n# Main websocket\nlocation ~ /lool/(.*)/ws$ {\n    proxy_pass https://localhost:9980;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"Upgrade\";\n    proxy_set_header Host $http_host;\n    proxy_read_timeout 36000s;\n}\n\n# Admin Console websocket\nlocation ^~ /lool/adminws {\n    proxy_pass https://localhost:9980;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"Upgrade\";\n    proxy_set_header Host $http_host;\n    proxy_read_timeout 36000s;\n}\n\n# download, presentation and image upload\nlocation ^~ /lool {\n    proxy_pass https://localhost:9980;\n    proxy_set_header Host $http_host;\n}\n</code></pre>\n<p>}\n```</p>\n<h2>Install the Nextcloud app</h2>\n<ul>\n<li>Go to the Apps section and choose \"Productivity\"</li>\n<li>Install the \"Collabora Online\" app</li>\n<li>In Admin -&gt; Collabora Online specific the server you have setup before (https://office.example.com)</li>\n</ul>"
},
{
  "title": "lychee",
  "description": "lychee",
  "image": "linuxserver/lychee:latest",
  "ports": [
    "80/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/lychee-icon.png",
  "volumes": [
    "/config",
    "/pictures"
  ],
  "env": [
    {
      "name": "PUID",
      "label": "UserID"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    }
  ],
  "note": "<h1>linuxserver/lychee</h1>\n<p>Lychee is a free photo-management tool, which runs on your server or web-space. Installing is a matter of seconds. Upload, manage and share photos like from a native application. Lychee comes with everything you need and all your photos are stored securely.</p>\n<p><a href=\"https://lychee.electerious.com/\"><img alt=\"lychee\" src=\"https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/lychee-icon.png\" /></a></p>\n<p>https://lychee.electerious.com/</p>\n<h2>Parameters</h2>\n<p><code>The parameters are split into two halves, separated by a colon, the left hand side representing the host and the right the container side. \nFor example with a port -p external:internal - what this shows is the port mapping from internal to external of the container.\nSo -p 8080:80 would expose port 80 from inside the container to be accessible from the host's IP on port 8080\nhttp://192.168.x.x:8080 would show you what's running INSIDE the container on port 80.</code></p>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Setting up the application</h2>\n<p>Setup mysql/mariadb and account via the webui, more info at <a href=\"https://lychee.electerious.com/\">lychee</a>.</p>"
},
{
  "title": "radarr",
  "description": "radarr",
  "image": "linuxserver/radarr:latest",
  "ports": [
    "7878/tcp"
  ],
  "volumes": [
    "/config",
    "/downloads",
    "/movies"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    }
  ],
  "note": "<h1>Radarr - A fork of Sonarr to work with movies ala Couchpotato.</h1>\n<p>Access the webui at <your-ip>:7878</p>"
},
{
  "title": "beets",
  "description": "beets",
  "image": "linuxserver/beets:latest",
  "ports": [
    "8337/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/beets-icon.png",
  "volumes": [
    "/config",
    "/music",
    "/downloads"
  ],
  "env": [
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    }
  ],
  "note": "<p><a href=\"http://beets.io/\"><img alt=\"beets\" src=\"https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/beets-icon.png\" /></a></p>\n<h1>Beets is a music library manager and not, for the most part, a music player.</h1>\n<p>Beets does include a simple player plugin and an experimental Web-based player, but it generally leaves actual sound-reproduction to specialized tools. </p>\n<p><a href=\"https://www.linuxserver.io/\"><img alt=\"linuxserver\" src=\"https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/linuxserver_medium.png\" /></a></p>\n<h2>Parameters</h2>\n<ul>\n<li><code>8337</code> - the port(s)</li>\n<li><code>/config</code> - Configuration files</li>\n<li><code>/music</code> - Music library location</li>\n<li><code>/downloads</code> - Non-processed music</li>\n<li><code>PGID</code> for GroupID - see below for explanation</li>\n<li><code>PUID</code> for UserID - see below for explanation</li>\n</ul>\n<p>Sometimes when using data volumes, permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Setting up the application</h2>\n<p>Edit the config file in /config</p>\n<p>To edit the config from within the container use <code>beet config -e</code></p>"
},
{
  "title": "unifi",
  "description": "unifi",
  "image": "goofball222/unifi:latest",
  "ports": [
    "3478/udp",
    "6789/tcp",
    "8080/tcp",
    "8443/tcp",
    "8843/tcp",
    "8880/tcp",
    "10001/udp"
  ],
  "volumes": [
    "/usr/lib/unifi/data",
    "/usr/lib/unifi/logs"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    }
  ],
  "note": "<h1>Ubiquiti Networks UniFi Controller container with FreeNAS metadata</h1>\n<p><strong>This container will work on FreeNAS and non-FreeNAS docker implementations</strong></p>\n<p>This container follows the latest UniFi current stable/general availability release.</p>\n<p>Current stable/general release is v5.4.x</p>\n<h2>Usage</h2>\n<p>The container only has a single environment variable to pass to the container\n* <code>TZ</code> - Configures the timezone, e.g. \"America/Chicago\"\n- If you don't know your timezone value, you can look it up (see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)</p>\n<p>This container exposes two volumes:\n<em> <code>/usr/lib/unifi/data</code> - UniFi configuration data and DBs\n</em> <code>/usr/lib/unifi/logs</code> - UniFi and MongoDB logs for troubleshooting</p>\n<p>This container exposes the following ports (see: https://help.ubnt.com/hc/en-us/articles/218506997-UniFi-Ports-Used):\n<em> <code>3478/udp</code> (port used for STUN connection)\n</em> <code>6789/tcp</code> (port used for throughput measurement from Android/iOS app)\n<em> <code>8080/tcp</code> (port for UAP/USW/USG to inform controller)\n</em> <code>8443/tcp</code> (port for controller GUI / API)\n<em> <code>8880/tcp</code> (port for HTTP portal redirect)\n</em> <code>8843/tcp</code> (port for HTTPS portal redirect)\n* <code>10001/udp</code> (port used for UBNT discovery broadcasts - L2/same subnet <strong>only</strong>)</p>\n<h2>Upgrading</h2>\n<p><strong>It is highly recommended to backup your data prior to installing updates.</strong></p>\n<p><strong>This can be done by exporting a .unf file from the UniFi interface to be reimported if required. Database rollback from newer to older versions isn't always possible.</strong></p>"
},
{
  "title": "archlinux",
  "description": "archlinux",
  "image": "base/archlinux:latest",
  "ports": [],
  "volumes": [],
  "env": [],
  "note": "<h1>Arch Linux</h1>\n<p>This is a simple Arch Linux container.  It is an Interactive container, meaning\nthat the Console UI / CLI will talk directly to the command specified (and\ncan be connected / disconnected repeatedly without killing the container).\nThe command argument also MUST be specified - this is generally /bin/sh or\nsome other useful command in the container.</p>"
},
{
  "title": "centos",
  "description": "centos",
  "image": "centos:latest",
  "ports": [],
  "volumes": [],
  "env": [],
  "note": "<h1>Centos Linux</h1>\n<p>This is a simple CentOS Linux container. It is an Interactive container, meaning\nthat the Console UI / CLI will talk directly to the command specified (and\ncan be connected / disconnected repeatedly without killing the container).\nThe command argument also MUST be specified - this is generally /bin/sh or\nsome other useful command in the container.</p>"
},
{
  "title": "clonedeploy",
  "description": "clonedeploy",
  "image": "clonedeploy/clonedeploy:latest",
  "ports": [],
  "logo": "https://clonedeploy.org/wp-content/uploads/2016/05/wds.png",
  "volumes": [
    "/var/www/html",
    "/var/lib/mysql",
    "/cd_dp",
    "/tftpboot"
  ],
  "env": [
    {
      "name": "RW_SMB_PASS",
      "label": "SMB Share Read-Write Password"
    },
    {
      "name": "RO_SMB_PASS",
      "label": "SMB Share Read-Only Password"
    },
    {
      "name": "MYSQL_ROOT_PASS",
      "label": "MYSQL Root Password"
    }
  ],
  "note": "<p><a href=\"https://clonedeploy.org/\"><img alt=\"clonedeploy\" src=\"https://clonedeploy.org/wp-content/uploads/2016/05/wds.png\" /></a></p>\n<h1>Official Docker Container for CloneDeploy</h1>\n<p>This image was created specifically for use with FreeNAS Corral, but should work with any environment that supports macvlan networking.</p>\n<h2>Usage</h2>\n<p>Before creating the container, be sure that your Docker environment supports macvlan networking.  FreeNAS Corral has this configured by default.  Port forwarding / NAT is not an ideal fit for CloneDeploy due to DHCP/Proxy requests, Multicasting, etc, and the macvlan enables CloneDeploy to be accessed directly via a static ip.  It is also very important to have your storage setup properly before you start uploading images, otherwise you will most likely use a lot of storage somewhere you were not supposed to.</p>\n<h2>Data Persistence</h2>\n<h5>Application Folder:</h5>\n<p>This is where the CloneDeploy web application resides as well as some config files and logs.\n<code>/path/to/application:/var/www/html</code></p>\n<h5>Database:</h5>\n<p>The CloneDeploy database is stored here.  A separate MySQL container is not currently supported.\n<code>/path/to/dbdata:/var/lib/mysql</code></p>\n<h5>TFTP:</h5>\n<p>The CloneDeploy Tftp folder.  Boot Menu's, Boot Images, and Kernels are stored here.\n<code>/path/to/tftp:/tftpboot</code></p>\n<h5>Images:</h5>\n<p>The CloneDeploy Image folder.  This is where the images your capture from the client computer are stored.\n<code>/path/to/images:/cd_dp</code></p>\n<h2>Variables</h2>\n<h5>RW_SMB_PASS</h5>\n<p>Everytime the container is started, the SMB is share is recreated.  The read/write password is set here.  If this value is not filled in, the default value of rwpass is used.  If this value is changed after the intial setup, you will need to update your distribution point.</p>\n<h5>RO_SMB_PASS</h5>\n<p>Everytime the container is started, the SMB is share is recreated.  The read only password is set here.  If this value is not filled in, the default value of ropass is used.  If this value is changed after the intial setup, you will need to update your distribution point.</p>\n<h5>MYSQL_ROOT_PASS</h5>\n<p>If database directory is empty the root password will be initialized with this value.  If it is empty, a random password is generated.  This value has no affect if the database directory is not empty.</p>\n<p>For more detailed information specific to FreeNAS Corral <a href=\"http://clonedeploy.org/docs/install-on-freenas-corral/\">check here</a></p>\n<p>For more detailed information specific to Docker <a href=\"http://clonedeploy.org/docs/install-with-docker/\">check here</a></p>"
},
{
  "title": "nginx",
  "description": "nginx",
  "image": "nginx:stable",
  "ports": [
    "8080/tcp",
    "8081/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/docker-library/docs/01c12653951b2fe592c1f93a13b4e289ada0e3a1/nginx/logo.png",
  "volumes": [
    "/usr/share/nginx/html",
    "/etc/nginx/conf.d/custom.conf",
    "/etc/nginx/conf.d/default.conf"
  ],
  "env": [],
  "note": "<p><a href=\"https://en.wikipedia.org/wiki/Nginx\"><img alt=\"nginx\" src=\"https://raw.githubusercontent.com/docker-library/docs/01c12653951b2fe592c1f93a13b4e289ada0e3a1/nginx/logo.png\" /></a></p>\n<h1>What is Nginx?</h1>\n<p>Nginx (pronounced \"engine-x\") is an open source reverse proxy server for HTTP, HTTPS, SMTP, POP3, and IMAP protocols, as well as a load balancer, HTTP cache, and a web server (origin server). The nginx project started with a strong focus on high concurrency, high performance and low memory usage. It is licensed under the 2-clause BSD-like license and it runs on Linux, BSD variants, Mac OS X, Solaris, AIX, HP-UX, as well as on other *nix flavors. It also has a proof of concept port for Microsoft Windows.</p>\n<h1>How to use this image</h1>\n<p>Simply point the <code>/usr/share/nginx/html</code> volume at the content on your host using the volume mappings.  You may also wish to set this volume as Read-Only.</p>\n<h2>exposing the port</h2>\n<p>Remap port 8080 in the container to port 80 on your bridged network, or leave it as 8080 if using NAT so as not to conflict with FreeNAS' own web server.</p>\n<p>Then you can hit <code>http://localhost:8080</code> or <code>http://host-ip:8080</code> in your browser.</p>\n<p>For information on the syntax of the Nginx configuration files, see <a href=\"http://nginx.org/en/docs/\">the official documentation</a> (specifically the <a href=\"http://nginx.org/en/docs/beginners_guide.html#conf_structure\">Beginner's Guide</a>).</p>\n<p>Be sure to include <code>daemon off;</code> in your custom configuration to ensure that Nginx stays in the foreground so that Docker can track the process properly (otherwise your container will stop immediately after starting)!</p>\n<p>If you wish to adapt the default configuration, use something like the following to copy it from a running Nginx container:</p>\n<p><code>cp some-nginx:/etc/nginx/nginx.conf /some/nginx.conf</code></p>"
},
{
  "title": "headphones",
  "description": "headphones",
  "image": "linuxserver/headphones:latest",
  "ports": [
    "8181/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/headphones-banner.png",
  "volumes": [
    "/config",
    "/certs",
    "/music",
    "/downloads"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    }
  ],
  "note": "<p><a href=\"https://github.com/rembo10/headphones\"><img alt=\"headphones\" src=\"https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/headphones-banner.png\" /></a></p>\n<h1>Headphones, an automated music downloader for NZB and Torrent</h1>\n<p>Headphones is written in Python. It supports SABnzbd, NZBget, Transmission, \u00b5Torrent and Blackhole.</p>\n<h2>Parameters</h2>\n<ul>\n<li><code>8181</code> - the port(s)</li>\n<li><code>/config</code> - Configuration file location</li>\n<li><code>/music</code> - Location of music. (i.e. /opt/downloads/music or /var/music)</li>\n<li><code>/downloads</code> - Location of downloads folder</li>\n<li><code>PGID</code> for for GroupID - see below for explanation - <em>optional</em></li>\n<li><code>PUID</code> for for UserID - see below for explanation - <em>optional</em></li>\n<li><code>TZ</code> for setting timezone information, eg Europe/London</li>\n</ul>\n<p>Container is based on alpine linux with s6 overlay, for shell access whilst the container is running use the console button in the GUI or use the console sub-command in the CLI.</p>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Setting up the application</h2>\n<p>Access WebUI at <code>&lt;your-ip&gt;:8181</code> and walk through the wizard.</p>"
},
{
  "title": "nagios",
  "description": "nagios",
  "image": "jasonrivers/nagios:latest",
  "ports": [
    "6580/tcp"
  ],
  "volumes": [
    "/opt/nagios/etc",
    "/opt/Custom-Nagios-Plugins"
  ],
  "env": [
    {
      "name": "NAGIOS_TIMEZONE",
      "label": "Local Timezone"
    },
    {
      "name": "NAGIOSADMIN_USER",
      "label": "Nagios Admin User"
    },
    {
      "name": "NAGIOSADMIN_PASS",
      "label": "Nagios Admin Password"
    }
  ],
  "note": "<h1>Docker-Nagios</h1>\n<p>Docker image for Nagios</p>\n<p>Nagios Core 4.2.4 running on Ubuntu 16.04 LTS with NagiosGraph &amp; NRPE</p>\n<p>The default credentials for the web interface is <code>nagiosadmin</code> / <code>nagios</code></p>\n<h3>Configurations</h3>\n<p>Nagios Configuration lives in /opt/nagios/etc\nNagiosGraph configuration lives in /opt/nagiosgraph/etc</p>\n<p>Note: The path for the custom plugins will be /opt/Custom-Nagios-Plugins, you will need to reference this directory in your configuration scripts.</p>\n<p>For best results your Nagios image should have access to both IPv4 &amp; IPv6 networks </p>\n<h3>Extra Plugins</h3>\n<ul>\n<li>Nagios nrpe [http://exchange.nagios.org/directory/Addons/Monitoring-Agents/NRPE--2D-Nagios-Remote-Plugin-Executor/details]</li>\n<li>Nagiosgraph [http://exchange.nagios.org/directory/Addons/Graphing-and-Trending/nagiosgraph/details]</li>\n<li>JR-Nagios-Plugins -  custom plugins I've created [https://github.com/JasonRivers/nagios-plugins]</li>\n<li>WL-Nagios-Plugins -  custom plugins from William Leibzon [https://github.com/willixix/WL-NagiosPlugins]</li>\n<li>JE-Nagios-Plugins -  custom plugins from Justin Ellison [https://github.com/justintime/nagios-plugins]</li>\n</ul>"
},
{
  "title": "redis",
  "description": "redis",
  "image": "redis:latest",
  "ports": [
    "6379/tcp"
  ],
  "volumes": [],
  "env": [],
  "note": "<h1>Redis</h1>\n<p>Redis is an open-source, networked, in-memory, key-value data store with optional durability. It is written in ANSI C. The development of Redis is sponsored by Redis Labs today; before that, it was sponsored by Pivotal and VMware. According to the monthly ranking by DB-Engines.com, Redis is the most popular key-value store. The name Redis means REmote DIctionary Server.</p>\n<h2>Start with persistent storage</h2>\n<p>If persistence is enabled, data is stored in the VOLUME /data</p>\n<h2>If you want to use your own redis.conf</h2>\n<p>Mount a proper config file to /usr/local/etc/redis/redis.conf in the container</p>"
},
{
  "title": "duckdns",
  "description": "duckdns",
  "image": "linuxserver/duckdns:latest",
  "ports": [],
  "volumes": [],
  "env": [
    {
      "name": "SUBDOMAINS",
      "label": "DuckDNS Subdomains"
    },
    {
      "name": "TOKEN",
      "label": "DuckDNS Token"
    },
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    }
  ],
  "note": "<h1>Duck DNS - Free DNS service</h1>\n<p>Duck DNS is a free service which will point a DNS (sub domains of duckdns.org) to an IP of your choice. The service is completely free, and doesn't require reactivation or forum posts to maintain its existence.</p>\n<p>Setting up the application</p>\n<p>First, go to duckdns site, register your subdomain and retrieve your token\nThen run the docker create command above with your subdomain(s) and token\nIt will update your IP with the DuckDNS service every 5 minutes</p>\n<h1>Settings</h1>\n<p>PGID for GroupID - see below for explanation\nPUID for UserID - see below for explanation\nSUBDOMAINS for subdomains - multiple subdomains allowed, comma separated, no spaces\nTOKEN for DuckDNS token\nTZ for timezone information, eg Europe/London</p>"
},
{
  "title": "nzbget",
  "description": "nzbget",
  "image": "linuxserver/nzbget:latest",
  "ports": [
    "6789/tcp"
  ],
  "logo": "http://i.imgur.com/A4VMbwE.png",
  "volumes": [
    "/config",
    "/downloads"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    },
    {
      "name": "PUID",
      "label": "User ID - eg 1000"
    },
    {
      "name": "PGID",
      "label": "Group ID - eg 1000"
    }
  ],
  "note": "<h1>Overview:</h1>\n<p>NZBGet is a usenet downloader, written in C++ and designed with performance in mind to achieve maximum download speed by using very little system resources.  </p>\n<p>This container is based on alpine linux with s6 overlay. For shell access whilst the container is running, use the console button or CLI sub-command.</p>\n<h1>Parameters:</h1>\n<ul>\n<li>6789 - NZBGet WebUI Port</li>\n<li>/config - NZBGet App data</li>\n<li>/downloads - location of downloads on disk</li>\n<li>PGID for for GroupID - see below for explanation</li>\n<li>PUID for for UserID - see below for explanation</li>\n<li>TZ for timezone EG. Europe/London</li>\n</ul>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes, permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Setting up the application</h2>\n<p>Webui can be found at  <code>&lt;your-ip&gt;:6789</code> and the default login details (change ASAP) are </p>\n<p><code>login:nzbget, password:tegbzn6789</code></p>\n<p>To allow scheduling, from the webui set the time correction value in settings/logging.</p>\n<p>To change umask settings.</p>\n<p><img alt=\"\" src=\"http://i.imgur.com/A4VMbwE.png\" /></p>\n<p>scroll to bottom, set umask like this (example shown for unraid)</p>\n<p><img alt=\"\" src=\"http://i.imgur.com/mIqDEJJ.png\" /></p>"
},
{
  "title": "ghost",
  "description": "ghost",
  "image": "ghost:latest",
  "ports": [
    "2368/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/docker-library/docs/c5b6d94dc8f0557925ab37ca43141c0efc5cc363/ghost/logo.png",
  "volumes": [
    "/var/lib/ghost"
  ],
  "env": [],
  "note": "<p><a href=\"http://en.wikipedia.org/wiki/Ghost_blogging_platform\"><img alt=\"ghost\" src=\"https://raw.githubusercontent.com/docker-library/docs/c5b6d94dc8f0557925ab37ca43141c0efc5cc363/ghost/logo.png\" /></a></p>\n<h1>Ghost</h1>\n<p>Ghost is a free and open source blogging platform written in JavaScript and distributed under the MIT License, designed to simplify the process of online publishing for individual bloggers as well as online publications.</p>\n<h1>How to use this image</h1>\n<p>By default, a Ghost instance will be launchd on the default Ghost port of 2368.</p>\n<p>If you'd like to be able to access the instance from the host without the container's IP, standard port mappings can be used:</p>\n<ul>\n<li><code>8080:2368</code></li>\n</ul>\n<p>Then, access it via <code>http://localhost:8080</code> or <code>http://host-ip:8080</code> in a browser.</p>\n<p>You can also point the image to your existing content on your host:</p>\n<ul>\n<li><code>/path/to/ghost/blog:/var/lib/ghost</code></li>\n</ul>\n<p>Alternatively you can use a <a href=\"http://docs.docker.com/engine/tutorials/dockervolumes/\">data container</a> that has a volume that points to <code>/var/lib/ghost</code> and then reference it</p>\n<h2>Documentation</h2>\n<p>Documentation for this image is stored in the <a href=\"https://github.com/docker-library/docs/tree/master/ghost\"><code>ghost/</code> directory</a> of the <a href=\"https://github.com/docker-library/docs\"><code>docker-library/docs</code> GitHub repo</a>. Be sure to familiarize yourself with the <a href=\"https://github.com/docker-library/docs/blob/master/README.md\">repository's <code>README.md</code> file</a> before attempting a pull request.</p>"
},
{
  "title": "znc",
  "description": "znc",
  "image": "linuxserver/znc:latest",
  "ports": [
    "6501/tcp"
  ],
  "volumes": [
    "/config"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    }
  ],
  "note": "<p>ZNC is an IRC network bouncer or BNC. It can detach the client from the actual IRC server, and also from selected channels. Multiple clients from different locations can connect to a single ZNC account simultaneously and therefore appear under the same nickname on IRC.</p>\n<p>ZNC port is 6501.</p>"
},
{
  "title": "sickbeard",
  "description": "sickbeard",
  "image": "timhaak/sickbeard:latest",
  "ports": [
    "8081/tcp"
  ],
  "volumes": [
    "/config",
    "/data"
  ],
  "env": [],
  "note": "<h1>Sickbeard - The ultimate PVR application</h1>\n<p>Sickbeard is a PVR application that searches for and manages your TV shows.\nIt's pretty simple to set up and configure:</p>\n<ul>\n<li><code>/config</code> - Your config location</li>\n<li><code>/data</code> - Location of videos.</li>\n<li><code>8081</code> - Web UI port.</li>\n</ul>"
},
{
  "title": "syncthing",
  "description": "syncthing",
  "image": "linuxserver/syncthing:latest",
  "ports": [
    "8384/tcp",
    "22000/tcp",
    "21027/udp"
  ],
  "volumes": [
    "/config",
    "/data"
  ],
  "env": [
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    }
  ],
  "note": "<p><a href=\"https://syncthing.net\"><img alt=\"syncthing\" src=\"https://syncthing.net/images/logo-horizontal.svg\" /></a></p>\n<h1>Syncthing replaces proprietary sync and cloud services with something open, trustworthy and decentralized.</h1>\n<p>Your data is your data alone and you deserve to choose where it is stored, if it is shared with some third party and how it's transmitted over the Internet.</p>\n<p>You can find some of the best documentation available on the web at <a href=\"http://docs.syncthing.net/\">docs.syncthing.net</a>.</p>\n<h2>Parameters</h2>\n<ul>\n<li><code>/config</code> - This contain configuration to keep it static, as well as a default shared directory</li>\n<li><code>/mnt/dir</code> - Add multiple folders to allow Syncthing access to data you wish to sync</li>\n<li><code>PGID</code> for GroupID - see below for explanation</li>\n<li><code>PUID</code> for UserID - see below for explanation</li>\n<li><code>8384</code> Webui Port</li>\n<li><code>22000</code> Listening Port</li>\n<li><code>21027/udp</code> Discovery Port</li>\n</ul>\n<p>Container is based on alpine linux with s6 overlay, for shell access whilst the container is running use the console button in the GUI or use the console sub-command in the CLI.</p>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Setting up the application</h2>\n<p>You can find some of the best documentation available on the web at <a href=\"http://docs.syncthing.net/\">docs.syncthing.net</a>.</p>\n<p><strong>Note: </strong> The Syncthing devs highly suggest setting a password for this container as it listens on 0.0.0.0. To do this go to <code>Actions -&gt; Settings -&gt; set user\\password</code> for the webUI.</p>"
},
{
  "title": "ombi",
  "description": "ombi",
  "image": "linuxserver/ombi:latest",
  "ports": [
    "3579/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/linuxserver_medium.png",
  "volumes": [
    "/config"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    }
  ],
  "note": "<p><a href=\"https://linuxserver.io\"><img alt=\"linuxserver.io\" src=\"https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/linuxserver_medium.png\" /></a></p>\n<p>The <a href=\"https://linuxserver.io\">LinuxServer.io</a> team brings you another container release featuring easy user mapping and community support. Find us for support at:\n<em> <a href=\"https://forum.linuxserver.io\">forum.linuxserver.io</a>\n</em> <a href=\"https://www.linuxserver.io/irc/\">IRC</a> on freenode at <code>#linuxserver.io</code>\n* <a href=\"https://www.linuxserver.io/podcast/\">Podcast</a> covers everything to do with getting the most from your Linux Server plus a focus on all things Docker and containerisation!</p>\n<h1>linuxserver/ombi</h1>\n<p><a href=\"https://microbadger.com/images/linuxserver/ombi\" title=\"Get your own version badge on microbadger.com\"><img alt=\"\" src=\"https://images.microbadger.com/badges/version/linuxserver/ombi.svg\" /></a><a href=\"http://microbadger.com/images/linuxserver/ombi\" title=\"Get your own image badge on microbadger.com\"><img alt=\"\" src=\"https://images.microbadger.com/badges/image/linuxserver/ombi.svg\" /></a><a href=\"https://hub.docker.com/r/linuxserver/ombi/\"><img alt=\"Docker Pulls\" src=\"https://img.shields.io/docker/pulls/linuxserver/ombi.svg\" /></a><a href=\"https://hub.docker.com/r/linuxserver/ombi/\"><img alt=\"Docker Stars\" src=\"https://img.shields.io/docker/stars/linuxserver/ombi.svg\" /></a><a href=\"http://jenkins.linuxserver.io:8080/job/Dockers/job/LinuxServer.io/job/linuxserver-ombi/\"><img alt=\"Build Status\" src=\"http://jenkins.linuxserver.io:8080/buildStatus/icon?job=Dockers/LinuxServer.io/linuxserver-ombi\" /></a></p>\n<p>So what is <a href=\"https://ombi.io/\">Ombi</a> you ask!?</p>\n<p>Ombi allows you to host your own Plex Request and user management system.</p>\n<p>If you are sharing your Plex server with other users, allow them to request new content using an easy to manage interface! </p>\n<p>Manage all your requests for Movies and TV with ease, leave notes for the user and get notification when a user requests something. </p>\n<p>Allow your users to post issues against their requests so you know there is a problem with the audio etc. </p>\n<p>Even automatically sent them weekly newsletters of new content that has been added to your Plex server!</p>\n<p><a href=\"https://ombi.io/\"><img alt=\"ombi\" src=\"https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/ombi.png\" /></a></p>\n<h2>Usage</h2>\n<p><code>docker create \\\n    --name=ombi \\\n    -v /etc/localtime:/etc/localtime:ro \\\n    -v &lt;path to data&gt;:/config \\\n    -e PGID=&lt;gid&gt; -e PUID=&lt;uid&gt;  \\\n    -p 3579:3579 \\\n    linuxserver/ombi</code></p>\n<h2>Parameters</h2>\n<p><code>The parameters are split into two halves, separated by a colon, the left hand side representing the host and the right the container side. \nFor example with a port -p external:internal - what this shows is the port mapping from internal to external of the container.\nSo -p 8080:80 would expose port 80 from inside the container to be accessible from the host's IP on port 8080\nhttp://192.168.x.x:8080 would show you what's running INSIDE the container on port 80.</code></p>\n<ul>\n<li><code>-p 3579</code> - the port(s)</li>\n<li><code>-v /etc/localtime</code> for timesync - <em>optional</em></li>\n<li><code>-v /config</code> - where ombi should store its config files</li>\n<li><code>-e PGID</code> for GroupID - see below for explanation</li>\n<li><code>-e PUID</code> for UserID - see below for explanation</li>\n</ul>\n<p>It is based on ubuntu xenial with s6 overlay, for shell access whilst the container is running do <code>docker exec -it ombi /bin/bash</code>.</p>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes (<code>-v</code> flags) permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<p>In this instance <code>PUID=1001</code> and <code>PGID=1001</code>. To find yours use <code>id user</code> as below:</p>\n<p><code>$ id &lt;dockeruser&gt;\n      uid=1001(dockeruser) gid=1001(dockergroup) groups=1001(dockergroup)</code></p>\n<h2>Setting up the application</h2>\n<p>Webui is at <code>&lt;your-ip&gt;:3579</code>, Follow the setup wizard on initial install.  Then configure the required services.</p>\n<h2>Info</h2>\n<ul>\n<li>To monitor the logs of the container in realtime <code>docker logs -f ombi</code>.</li>\n<li>\n<p>Shell access whilst the container is running: <code>docker exec -it ombi /bin/bash</code></p>\n</li>\n<li>\n<p>container version number </p>\n</li>\n</ul>\n<p><code>docker inspect -f '{{ index .Config.Labels \"build_version\" }}' ombi</code></p>\n<ul>\n<li>image version number</li>\n</ul>\n<p><code>docker inspect -f '{{ index .Config.Labels \"build_version\" }}' linuxserver/ombi</code></p>\n<h2>Versions</h2>\n<ul>\n<li><strong>17.02.17:</strong> Initial Release.</li>\n</ul>"
},
{
  "title": "gogs",
  "description": "gogs",
  "image": "gogs/gogs:latest",
  "ports": [
    "10080/tcp",
    "10020/tcp"
  ],
  "logo": "https://github.com/gogits/gogs/blob/master/public/img/gogs-large-resize.png",
  "volumes": [
    "/data/"
  ],
  "env": [],
  "note": "<p><a href=\"https://github.com/gogits/go-gogs-client/wiki\"><img alt=\"gogs\" src=\"https://github.com/gogits/gogs/blob/master/public/img/gogs-large-resize.png?raw=true\" /></a></p>\n<h1>Docker for Gogs</h1>\n<p>Gogs (Go Git Service) is a painless self-hosted Git service.</p>\n<h2>Usage</h2>\n<p>To keep your data out of Docker container, we do a volume (<code>/var/gogs</code> -&gt; <code>/data</code>) here, and you can change it based on your situation.</p>\n<p><code>``\nNote: It is important to map the Gogs ssh service from the container to the host and set the appropriate SSH Port and URI settings when setting up Gogs for the first time. To access and clone Gogs Git repositories with the above configuration you would use:</code>git clone ssh://git@hostname:10022/username/myrepo.git` for example.</p>\n<p>Files will be store in local path <code>/var/gogs</code> in my case.</p>\n<p>Directory <code>/var/gogs</code> keeps Git repositories and Gogs data:</p>\n<pre><code>/var/gogs\n|-- git\n|   |-- gogs-repositories\n|-- ssh\n|   |-- # ssh public/private keys for Gogs\n|-- gogs\n    |-- conf\n    |-- data\n    |-- log\n</code></pre>\n<h2>Settings</h2>\n<h3>Application</h3>\n<p>Most of settings are obvious and easy to understand, but there are some settings can be confusing by running Gogs inside Docker:</p>\n<ul>\n<li><strong>Repository Root Path</strong>: keep it as default value <code>/home/git/gogs-repositories</code> because <code>start.sh</code> already made a symbolic link for you.</li>\n<li><strong>Run User</strong>: keep it as default value <code>git</code> because <code>start.sh</code> already setup a user with name <code>git</code>.</li>\n<li><strong>Domain</strong>: fill in with Docker container IP (e.g. <code>192.168.99.100</code>). But if you want to access your Gogs instance from a different physical machine, please fill in with the hostname or IP address of the Docker host machine.</li>\n<li><strong>SSH Port</strong>: Use the exposed port from Docker container. For example, your SSH server listens on <code>22</code> inside Docker, but you expose it by <code>10022:22</code>, then use <code>10022</code> for this value. <strong>Builtin SSH server is not recommended inside Docker Container</strong></li>\n<li><strong>HTTP Port</strong>: Use port you want Gogs to listen on inside Docker container. For example, your Gogs listens on <code>3000</code> inside Docker, and you expose it by <code>10080:3000</code>, but you still use <code>3000</code> for this value.</li>\n<li><strong>Application URL</strong>: Use combination of <strong>Domain</strong> and <strong>exposed HTTP Port</strong> values (e.g. <code>http://192.168.99.100:10080/</code>).</li>\n</ul>\n<p>Full documentation of application settings can be found <a href=\"https://gogs.io/docs/advanced/configuration_cheat_sheet.html\">here</a>.</p>\n<h3>Container options</h3>\n<p>This container have some options available via environment variables, these options are opt-in features that can help the administration of this container:</p>\n<ul>\n<li><strong>SOCAT_LINK</strong>:</li>\n<li><u>Possible value:</u>\n      <code>true</code>, <code>false</code>, <code>1</code>, <code>0</code></li>\n<li><u>Default:</u>\n      <code>true</code></li>\n<li><u>Action:</u>\n      Bind linked docker container to localhost socket using socat.\n      Any exported port from a linked container will be binded to the matching port on localhost.</li>\n<li><u>Disclaimer:</u>\n      As this option rely on the environment variable created by docker when a container is linked, this option should be deactivated in managed environment such as Rancher or Kubernetes (set to <code>0</code> or <code>false</code>)</li>\n<li><strong>RUN_CROND</strong>:</li>\n<li><u>Possible value:</u>\n      <code>true</code>, <code>false</code>, <code>1</code>, <code>0</code></li>\n<li><u>Default:</u>\n      <code>false</code></li>\n<li><u>Action:</u>\n      Request crond to be run inside the container. Its default configuration will periodically run all scripts from <code>/etc/periodic/${period}</code> but custom crontabs can be added to <code>/var/spool/cron/crontabs/</code>.</li>\n</ul>"
},
{
  "title": "nextcloud",
  "description": "nextcloud",
  "image": "nextcloud:latest",
  "ports": [
    "9000/tcp"
  ],
  "logo": "https://github.com/nextcloud/docker/raw/master/logo.png",
  "volumes": [
    "/var/www/html"
  ],
  "env": [],
  "note": "<p><a href=\"https://github.com/nextcloud\"><img alt=\"nextcloud\" src=\"https://github.com/nextcloud/docker/raw/master/logo.png\" /></a></p>\n<h1>What is Nextcloud?</h1>\n<p>A safe home for all your data. Access &amp; share your files, calendars, contacts, mail &amp; more from any device, on your terms.</p>\n<h1>How to use this image</h1>\n<p>This image is designed to be used in a micro-service environment. It consists of the Nextcloud installation in an <a href=\"https://hub.docker.com/_/php/\">php-fpm</a> container. To use this image it must be combined with any webserver that can proxy the http requests to the FastCGI-port of the container.</p>\n<h2>Start Nextcloud</h2>\n<p>By default, Nexcloud will start on port 9000</p>\n<p>Now you can get access to fpm running on port 9000 inside the container. If you want to access it from the internet, we recommend using a reverse proxy in front (see the nginx-proxy Docker container for one example). Once you have a reverse proxy, you can access Nextcloud at http://localhost/ and go through the wizard. </p>\n<p>By default this container uses SQLite for data storage, but the Nextcloud setup wizard (appears on first run) allows connecting to an existing MySQL/MariaDB or PostgreSQL database. You can also create a database container on a shared Docker network, e.g. \"mysql\", then use <code>mysql</code> as the database host on setup.</p>\n<h2>Persistent data</h2>\n<p>All data beyond that which lives in the database (file uploads, etc) is stored within the default volume <code>/var/www/html</code>. With this volume, Nextcloud will only be updated when the file <code>version.php</code> is not present.</p>\n<p>For fine grained data persistence, you can use 3 volumes, as shown below.</p>\n<ul>\n<li><code>/&lt;mydatalocation&gt;/apps:/var/www/html/apps</code> installed / modified apps</li>\n<li><code>/&lt;mydatalocation&gt;/config:/var/www/html/config</code> local configuration</li>\n<li><code>/&lt;mydatalocation&gt;/data:/var/www/html/data</code> the actual data of your Nextcloud</li>\n</ul>\n<p>The recommended minimal setup is using this image in combination with two containers: A database container and a reverse proxy for the http connection to the service.\nA working example can be found at <a href=\"https://github.com/indiehosters/nextcloud\">IndieHosters/Nextcloud</a>.</p>\n<p>If you want to access your Nextcloud from the internet we recommend configuring your reverse proxy to use encryption (for example via <a href=\"https://letsencrypt.org/\">let's Encrypt</a>)</p>"
},
{
  "title": "homeassistant",
  "description": "homeassistant",
  "image": "homeassistant/home-assistant:latest",
  "ports": [
    "8123/tcp"
  ],
  "volumes": [
    "/config"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "homeassistant Container Timezone"
    }
  ],
  "note": "<h1>Home Assistant is an open-source home automation platform running on Python 3.</h1>\n<p>The official documentation is located at <a href=\"https://home-assistant.io/docs/\">https://home-assistant.io/docs/</a></p>\n<h3>FreeNAS specific information</h3>\n<h5>This docker container is based on <a href=\"https://github.com/home-assistant/home-assistant\">home-assistant/home-assistant</a> from the HomeAssistant Project. More information, including a README with much more information is available there.</h5>\n<p>This container adds metadata to make using HomeAssistant easier to setup on FreeNAS Corral.</p>\n<p>HomeAssistant needs one config Folder to persist outside the Container as well as your corresponding TimeZone setting.</p>"
},
{
  "title": "deluge",
  "description": "deluge",
  "image": "linuxserver/deluge:latest",
  "ports": [
    "8112/tcp",
    "58846/tcp",
    "58946/tcp",
    "58946/udp"
  ],
  "volumes": [
    "/config",
    "/downloads"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    },
    {
      "name": "UMASK_SET",
      "label": "UMASK, default 022"
    }
  ],
  "note": "<p><a href=\"http://deluge-torrent.org/\">Deluge</a> is a lightweight, Free Software, cross-platform BitTorrent client.</p>\n<ul>\n<li>Full Encryption</li>\n<li>WebUI</li>\n<li>Plugin System</li>\n<li>Much more...</li>\n</ul>\n<p><a href=\"http://deluge-torrent.org/\"><img alt=\"deluge\" src=\"https://avatars2.githubusercontent.com/u/6733935?v=3&amp;s=200\" /></a></p>\n<h2>Usage</h2>\n<h3>Volumes:</h3>\n<ul>\n<li><code>&lt;path to deluge config&gt;:/config</code> deluge configs</li>\n<li><code>&lt;path to downloads&gt;:/downloads</code> torrent download directory</li>\n</ul>\n<h3>Variables:</h3>\n<ul>\n<li><code>PUID=&lt;uid&gt;</code> See below for explanation</li>\n<li><code>PGID=&lt;gid&gt;</code> See below for explanation</li>\n<li><code>TZ=&lt;timezone&gt;</code> e.g. Europe/London</li>\n<li><code>UMASK_SET=&lt;umask&gt;</code> for umask setting of Deluge, <em>optional</em>, default if left unset is 022.</li>\n</ul>\n<h3>Ports:</h3>\n<ul>\n<li>8112:8112</li>\n<li>58846:58846</li>\n<li>58946:58946</li>\n<li>58946:58496/udp</li>\n</ul>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes, permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Setting up the application</h2>\n<p>The admin interface is available at http://<ip>:8112 with a default user/password of admin/deluge.</p>\n<p>To change the password (recommended) log in to the web interface and go to Preferences-&gt;Interface-&gt;Password.</p>\n<p>Change the downloads location in the webui in Preferences-&gt;Downloads and use /downloads for completed downloads.</p>"
},
{
  "title": "mosquitto",
  "description": "mosquitto",
  "image": "eclipse-mosquitto:latest",
  "ports": [
    "1883/tcp",
    "9001/tcp"
  ],
  "volumes": [
    "/mosquitto/config",
    "/mosquitto/data",
    "/mosquitto/log"
  ],
  "env": [],
  "note": "<h1>Mosquitto is an open source MQTT broker.</h1>\n<p>The official documentation is located at <a href=\"http://mosquitto.org/\">http://mosquitto.org/</a></p>\n<h3>FreeNAS specific information</h3>\n<h5>This docker container is based on the official <a href=\"https://hub.docker.com/_/eclipse-mosquitto/\">eclipse-mosquitto</a> image on Docker Hub.</h5>\n<p>This container adds metadata to make using Mosquitto easier on FreeNAS Corral.</p>"
},
{
  "title": "bacula",
  "description": "bacula",
  "image": "itherz/bacula:latest",
  "ports": [
    "9101/udp",
    "9103/udp",
    "9101/tcp",
    "9103/tcp"
  ],
  "volumes": [
    "/etc/bacula",
    "/bacula"
  ],
  "env": [],
  "note": "<h1>Bacula backup utility</h1>\n<p>Link <code>/etc/backup</code> volume to where you wish your backups to come from.</p>\n<p>This container also links with postgresql.</p>"
},
{
  "title": "emby-beta",
  "description": "emby-beta",
  "image": "emby/embyserver:beta",
  "ports": [
    "8096/tcp",
    "8920/tcp",
    "7359/udp",
    "1900/udp"
  ],
  "volumes": [
    "/config",
    "/media",
    "/sslcerts"
  ],
  "env": [
    {
      "name": "APP_GID",
      "label": "GID assigned to APP_USER upon creation"
    },
    {
      "name": "APP_UID",
      "label": "UID assigned to APP_USER upon creation"
    },
    {
      "name": "APP_USER",
      "label": "Name of user the service will run as"
    },
    {
      "name": "EDGE",
      "label": "UID assigned to APP_USER upon creation"
    },
    {
      "name": "UMASK",
      "label": "UID assigned to APP_USER upon creation"
    }
  ],
  "note": "<h1>Beta version of emby server</h1>\n<p>Emby Server is a home media server built on top of other popular open source\ntechnologies such as Service Stack, jQuery, jQuery mobile, and Mono.</p>\n<p>It features a REST-based API with built-in documention to facilitate client\ndevelopment. We also have client libraries for our API to enable rapid\ndevelopment.</p>\n<h1>Environment Variables:</h1>\n<p>You can adjust some of the default settings set for container/application by\npassing any or all of the following environment variable:  </p>\n<p>| ENV VAR      | Definition                                                                     |\n| ------------ | ------------------------------------------------------------------------------ |\n| APP_USER     | Name of user the service will run as.[4]                                     |\n| APP_UID      | UID assigned to APP_USER upon creation, or will query APP_USER's ID.[3]      |\n| APP_GID      | GID assigned to APP_USER upon creation, or will query APP_USER's GID.[3]     |\n| APP_CONFIG   | Location where application will store settings and database on host.[1]      |\n| APP_GCONFIG  | Location where application will store settings and database within guest.[4] |\n| UMASK        | umask assigned to service, default set to 002.[4]                            |\n| EDGE         | Update the containerized service, default set to 0(Off).[4]                  |</p>\n<p>[1]: Variable is applicable only during install.<br />\n[2]: Variable is applicable during install, when invoking installed wrapper script or systemd service.<br />\n[3]: Variable is applicable only when invoking docker run directly.<br />\n[4]: Variable is applicable in all scenarios.  </p>\n<h1>Volumes:</h1>\n<ul>\n<li><code>/config</code>  - Folder for configuration and settings.</li>\n</ul>"
},
{
  "title": "openproject",
  "description": "openproject",
  "image": "openproject/community:latest",
  "ports": [
    "8080/tcp"
  ],
  "volumes": [
    "/var/lib/postgresql/9.4/main",
    "/var/log/supervisor",
    "/var/db/openproject"
  ],
  "env": [
    {
      "name": "SECRET_KEY_BASE",
      "label": "Secret key"
    }
  ],
  "note": "<h1>OpenProject</h1>\n<p>OpenProject is a web-based project management software. Its key features are:</p>\n<ul>\n<li><a href=\"https://www.openproject.org/features/work-packages/\">Work Package Tracking</a></li>\n<li><a href=\"https://www.openproject.org/features/timelines/\">Project Timelines</a></li>\n<li><a href=\"https://www.openproject.org/features/wiki/\">Wikis</a></li>\n<li><a href=\"https://www.openproject.org/help/user-guides/forum/\">Forums</a></li>\n</ul>\n<p>Via plugins, it also supports:</p>\n<ul>\n<li><a href=\"https://www.openproject.org/help/user-guides/meetings/\">Meeting Management</a></li>\n<li><a href=\"https://www.openproject.org/features/agile-scrum/\">Scrum Process Support</a></li>\n<li><a href=\"https://www.openproject.org/help/user-guides/time-costs/\">Time and Cost Reporting</a></li>\n<li>and <a href=\"https://www.openproject.org/download/install-plugins/\">others</a>.</li>\n</ul>\n<p>More information and screenshots can be found on <a href=\"https://www.openproject.org\">openproject.org</a>.</p>"
},
{
  "title": "busybox",
  "description": "busybox",
  "image": "busybox:latest",
  "ports": [],
  "volumes": [],
  "env": [],
  "note": "<h1>Busybox Linux</h1>\n<p>This is a simple Busybox Linux container. It is an Interactive container, meaning\nthat the Console UI / CLI will talk directly to the command specified (and\ncan be connected / disconnected repeatedly without killing the container).\nThe command argument also MUST be specified - this is generally /bin/sh or\nsome other useful command in the container.  Busybox is known for being a\nparticularly small and minimalist container, containing a lot of functionality\nin a small amount of space.</p>"
},
{
  "title": "postgres",
  "description": "postgres",
  "image": "postgres:latest",
  "ports": [
    "5432/tcp"
  ],
  "logo": "https://raw.githubusercontent.com/docker-library/docs/01c12653951b2fe592c1f93a13b4e289ada0e3a1/postgres/logo.png",
  "volumes": [],
  "env": [
    {
      "name": "POSTGRES_PASSWORD",
      "label": "Admin password"
    },
    {
      "name": "POSTGRES_USER",
      "label": "Admin User"
    },
    {
      "name": "PGDATA",
      "label": "Optional database subdirectory"
    },
    {
      "name": "POSTGRES_DB",
      "label": "Optional Database name"
    },
    {
      "name": "POSTGRES_INITDB_ARGS",
      "label": "Optional Database args"
    }
  ],
  "note": "<p><a href=\"https://en.wikipedia.org/wiki/PostgreSQL\"><img alt=\"appurl\" src=\"https://raw.githubusercontent.com/docker-library/docs/01c12653951b2fe592c1f93a13b4e289ada0e3a1/postgres/logo.png\" /></a></p>\n<h1>What is PostgreSQL?</h1>\n<p>PostgreSQL, often simply \"Postgres\", is an object-relational database management system (ORDBMS) with an emphasis on extensibility and standards-compliance. As a database server, its primary function is to store data, securely and supporting best practices, and retrieve it later, as requested by other software applications, be it those on the same computer or those running on another computer across a network (including the Internet). It can handle workloads ranging from small single-machine applications to large Internet-facing applications with many concurrent users. Recent versions also provide replication of the database itself for security and scalability.</p>\n<p>PostgreSQL implements the majority of the SQL:2011 standard, is ACID-compliant and transactional (including most DDL statements) avoiding locking issues using multiversion concurrency control (MVCC), provides immunity to dirty reads and full serializability; handles complex SQL queries using many indexing methods that are not available in other databases; has updateable views and materialized views, triggers, foreign keys; supports functions and stored procedures, and other expandability, and has a large number of extensions written by third parties. In addition to the possibility of working with the major proprietary and open source databases, PostgreSQL supports migration from them, by its extensive standard SQL support and available migration tools. And if proprietary extensions had been used, by its extensibility that can emulate many through some built-in and third-party open source compatibility extensions, such as for Oracle.</p>\n<h1>How to use this image</h1>\n<h2>start a postgres instance</h2>\n<ul>\n<li>POSTGRES_PASSWORD=mysecretpassword</li>\n</ul>\n<p>This image includes <code>EXPOSE 5432</code> (the postgres port), so standard container linking will make it automatically available to the linked containers. The default <code>postgres</code> user and database are created in the entrypoint with <code>initdb</code>.</p>\n<blockquote>\n<p>The postgres database is a default database meant for use by users, utilities and third party applications.<br />\n<a href=\"http://www.postgresql.org/docs/9.5/interactive/app-initdb.html\">postgresql.org/docs</a></p>\n</blockquote>\n<h2>connect to it from an application</h2>\n<p>The easiest and best way to do this is simply to put the application container(s) and this container on their own docker network.</p>\n<h2>Environment Variables</h2>\n<p>The PostgreSQL image uses several environment variables which are easy to miss. While none of the variables are required, they may significantly aid you in using the image.</p>\n<h3><code>POSTGRES_PASSWORD</code></h3>\n<p>This environment variable is recommended for you to use the PostgreSQL image. This environment variable sets the superuser password for PostgreSQL. The default superuser is defined by the <code>POSTGRES_USER</code> environment variable. In the above example, it is being set to \"mysecretpassword\".</p>\n<h3><code>POSTGRES_USER</code></h3>\n<p>This optional environment variable is used in conjunction with <code>POSTGRES_PASSWORD</code> to set a user and its password. This variable will create the specified user with superuser power and a database with the same name. If it is not specified, then the default user of <code>postgres</code> will be used.</p>\n<h3><code>PGDATA</code></h3>\n<p>This optional environment variable can be used to define another location - like a subdirectory - for the database files. The default is <code>/var/lib/postgresql/data</code>, but if the data volume you're using is a fs mountpoint (like with GCE persistent disks), Postgres <code>initdb</code> recommends a subdirectory (for example <code>/var/lib/postgresql/data/pgdata</code> ) be created to contain the data.</p>\n<h3><code>POSTGRES_DB</code></h3>\n<p>This optional environment variable can be used to define a different name for the default database that is created when the image is first started. If it is not specified, then the value of <code>POSTGRES_USER</code> will be used.</p>\n<h3><code>POSTGRES_INITDB_ARGS</code></h3>\n<p>This optional environment variable can be used to send arguments to <code>postgres initdb</code>. The value is a space separated string of arguments as <code>postgres initdb</code> would expect them. This is useful for adding functionality like data page checksums: <code>POSTGRES_INITDB_ARGS=\"--data-checksums\"</code>.</p>\n<h1>How to extend this image</h1>\n<p>If you would like to do additional initialization in an image derived from this one, add one or more <code>*.sql</code> or <code>*.sh</code> scripts under <code>/docker-entrypoint-initdb.d</code> (creating the directory if necessary). After the entrypoint calls <code>initdb</code> to create the default <code>postgres</code> user and database, it will run any <code>*.sql</code> files and source any <code>*.sh</code> scripts found in that directory to do further initialization before starting the service.</p>\n<p>For example, to add an additional user and database, add the following to <code>/docker-entrypoint-initdb.d/init-user-db.sh</code>:</p>\n<p>```bash</p>\n<h1>!/bin/bash</h1>\n<p>set -e</p>\n<p>psql -v ON_ERROR_STOP=1 --username \"$POSTGRES_USER\" &lt;&lt;-EOSQL\n    CREATE USER docker;\n    CREATE DATABASE docker;\n    GRANT ALL PRIVILEGES ON DATABASE docker TO docker;\nEOSQL\n```</p>\n<p>These initialization files will be executed in sorted name order as defined by the current locale, which defaults to <code>en_US.utf8</code>. Any <code>*.sql</code> files will be executed by <code>POSTGRES_USER</code>, which defaults to the <code>postgres</code> superuser. It is recommended that any <code>psql</code> commands that are run inside of a <code>*.sh</code> script be executed as <code>POSTGRES_USER</code> by using the <code>--username \"$POSTGRES_USER\"</code> flag. This user will be able to connect without a password due to the presence of <code>trust</code> authentication for Unix socket connections made inside the container.</p>\n<p>You can also extend the image with a simple <code>Dockerfile</code> to set a different locale. The following example will set the default locale to <code>de_DE.utf8</code>:</p>\n<p><code>dockerfile\nFROM postgres:9.4\nRUN localedef -i de_DE -c -f UTF-8 -A /usr/share/locale/locale.alias de_DE.UTF-8\nENV LANG de_DE.utf8</code></p>\n<p>Since database initialization only happens on container startup, this allows us to set the language before it is created.</p>\n<h1>Caveats</h1>\n<p>If there is no database when <code>postgres</code> starts in a container, then <code>postgres</code> will create the default database for you. While this is the expected behavior of <code>postgres</code>, this means that it will not accept incoming connections during that time. This may cause issues when using automation tools, such as <code>docker-compose</code>, that start several containers simultaneously.</p>"
},
{
  "title": "elk",
  "description": "elk",
  "image": "sebp/elk:latest",
  "ports": [
    "5601/tcp",
    "9200/tcp",
    "5044/tcp"
  ],
  "volumes": [
    "/var/lib/elasticsearch",
    "/etc/logstash/conf.d"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone information, eg Europe/London. Default Etc/UTC"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    },
    {
      "name": "ES_HEAP_SIZE",
      "label": "Elasticsearch heap size (default is 256MB min, 1G max)"
    },
    {
      "name": "ES_JAVA_OPTS",
      "label": "additional Java options for Elasticsearch"
    },
    {
      "name": "ES_CONNECT_RETRY",
      "label": "number of seconds to wait for Elasticsearch to be up before starting Logstash and/or Kibana (default: 30)"
    },
    {
      "name": "CLUSTER_NAME",
      "label": "the name of the Elasticsearch cluster (default: automatically resolved when the container starts if Elasticsearch requires no user authentication)"
    },
    {
      "name": "LS_HEAP_SIZE",
      "label": "Logstash heap size (default: 500m)"
    },
    {
      "name": "LS_OPTS",
      "label": "Logstash options"
    },
    {
      "name": "NODE_OPTIONS",
      "label": "Node options for Kibana (default: --max-old-space-size=250)"
    }
  ],
  "note": "<h1>elk-docker</h1>\n<p>Elasticsearch, Logstash, Kibana (ELK) Docker image, based on the Docker image of <a href=\"https://github.com/spujadas/elk-docker\">S\u00e9bastien Pujadas</a>.</p>\n<h2>Parameters</h2>\n<ul>\n<li><strong>/var/lib/elasticsearch</strong> Elasticsearch data.</li>\n<li><strong>/etc/logstash/conf.d</strong> Logstash config folder.</li>\n</ul>\n<h1>Important</h1>\n<p>As explained in https://github.com/spujadas/elk-docker/issues/92#issuecomment-263152557 please make sure the VM running this container is configured correctly.</p>\n<p>```shell</p>\n<h1>open a console into the VM that will be running the elk docker container</h1>\n<p>sudo vi /var/lib/boot2docker/bootlocal.sh</p>\n<h1>Add this line into /var/lib/boot2docker/bootlocal.sh</h1>\n<p>sysctl -w vm.max_map_count=262144\nsudo chmod +x /var/lib/boot2docker/bootlocal.sh\n```</p>\n<p>For some reason /var/lib/boot2docker is not being preserved after reboot. Further research needed.</p>\n<p>NOTE: https://github.com/docker/machine/issues/3859</p>"
},
{
  "title": "madsonic",
  "description": "madsonic",
  "image": "binhex/arch-madsonic:latest",
  "ports": [
    "4040/tcp",
    "4050/tcp"
  ],
  "volumes": [
    "/config",
    "/media"
  ],
  "env": [
    {
      "name": "SSL",
      "label": "SSL enabled - yes or no"
    },
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    }
  ],
  "note": "<p>Madsonic is a web-based media library and media streamer with jukebox functionality. Based on Java technology, Madsonic runs on most platforms, including Windows, MacOS, OSX, Linux and Unix variants.</p>\n<p>If you have constrained bandwidth, you may set an upper limit for the bitrate of the music streams. Madsonic will then automatically resample the music to a suitable bitrate.</p>\n<p>In addition to being a streaming media server, Madsonic works very well as a local jukebox. The intuitive web interface, as well as search and index facilities.</p>\n<p>Enjoy your music, movies and photos no matter where you are. Share media with your family and friends. </p>\n<p>Variables:\nSSL - set this to yes or no to enable or disable SSL connections to Madsonic\nPGID - Optional, set the Group ID the docker container will run under\nPUID - Optional, set the User ID the docker container will run under</p>"
},
{
  "title": "davos",
  "description": "davos",
  "image": "linuxserver/davos:latest",
  "ports": [
    "8181/tcp"
  ],
  "volumes": [
    "/config",
    "/download"
  ],
  "env": [
    {
      "name": "PGID",
      "label": "GroupID"
    },
    {
      "name": "PUID",
      "label": "UserID"
    }
  ],
  "note": "<p>DaveOS is an FTP automation tool that periodically scans given host locations for new files. It can be configured for various purposes, including listening for specific files to appear in the host location, ready for it to download and then move, if required. It also supports completion notifications as well as downstream API calls, to further the workflow.</p>\n<p>docker create \\\n  --name=davos \\\n  -v <path to data>:/config \\\n  -v <path to downloads folder>:/download\n  -e PGID=<gid> -e PUID=<uid>  \\\n  -p 8080:8080 \\\n  linuxserver/davos</p>\n<p>The application does not require any set up other than starting the docker container. Further documentation can be found on the davos GitHub repository page.</p>\n<p>Common WebUI port remapped from 8080 to 34567.</p>"
},
{
  "title": "debian",
  "description": "debian",
  "image": "debian:latest",
  "ports": [],
  "volumes": [],
  "env": [],
  "note": "<h1>Debian Linux</h1>\n<p>This is a simple Debian Linux container. It is an Interactive container, meaning\nthat the Console UI / CLI will talk directly to the command specified (and\ncan be connected / disconnected repeatedly without killing the container).\nThe command argument also MUST be specified - this is generally /bin/sh or\nsome other useful command in the container.</p>"
},
{
  "title": "jenkins",
  "description": "jenkins",
  "image": "library/jenkins:latest",
  "ports": [
    "8080/tcp",
    "5000/tcp"
  ],
  "volumes": [
    "/var/jenkins_home"
  ],
  "env": [
    {
      "name": "PATH",
      "label": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    },
    {
      "name": "LANG",
      "label": "C.UTF-8"
    },
    {
      "name": "JAVA_HOME",
      "label": "/usr/lib/jvm/java-8-openjdk-amd64"
    },
    {
      "name": "JAVA_VERSION",
      "label": "8u121"
    },
    {
      "name": "JAVA_DEBIAN_VERSION",
      "label": "8u121-b13-1~bpo8+1"
    },
    {
      "name": "CA_CERTIFICATES_JAVA_VERSION",
      "label": "20161107~bpo8+1"
    },
    {
      "name": "JENKINS_HOME",
      "label": "/var/jenkins_home"
    },
    {
      "name": "JENKINS_SLAVE_AGENT_PORT",
      "label": "5000"
    },
    {
      "name": "TINI_VERSION",
      "label": "0.13.2"
    },
    {
      "name": "TINI_SHA",
      "label": "afbf8de8a63ce8e4f18cb3f34dfdbbd354af68a1"
    },
    {
      "name": "JENKINS_VERSION",
      "label": "2.32.3"
    },
    {
      "name": "JENKINS_UC",
      "label": "https://updates.jenkins.io"
    }
  ],
  "note": "<h1>Jenkins README</h1>\n<p>This utilizes the official Jenkins container.</p>\n<p>Learn more about Jenkins at http://jenkins.io</p>\n<h2>User</h2>\n<p>Jenkins user is UID <code>1000</code> and GID <code>1000</code>\nThis shouldn't be difficult for you to map to a local jenkins user for\nownership of files.</p>\n<h2>Volume /var/jenkins_home</h2>\n<p><code>/var/jenkins_home</code> is where all of your configuration is stored.\nI recommend you make this a mount to a local volume you can store\nyour configuration.</p>"
},
{
  "title": "couchpotato",
  "description": "couchpotato",
  "image": "linuxserver/couchpotato:latest",
  "ports": [
    "5050/tcp"
  ],
  "logo": "https://couchpota.to/media/images/full.png",
  "volumes": [
    "/config",
    "/movies",
    "/certs",
    "/downloads"
  ],
  "env": [
    {
      "name": "TZ",
      "label": "Timezone - eg Europe/London"
    },
    {
      "name": "PUID",
      "label": "User ID - eg 1000"
    },
    {
      "name": "PGID",
      "label": "Group ID - eg 1000"
    }
  ],
  "note": "<p><a href=\"https://couchpota.to\"><img alt=\"couchpotato\" src=\"https://couchpota.to/media/images/full.png\" /></a></p>\n<h1>An automatic NZB and torrent downloader.</h1>\n<p>You can keep a \"movies I want\" list and it will search for NZBs/torrents of these movies every X hours. Once a movie is found, it will send it to SABnzbd or download the torrent to a specified directory.</p>\n<h2>Parameters</h2>\n<ul>\n<li><code>5050</code> - the port(s)</li>\n<li><code>/config</code> - Couchpotato Application Data</li>\n<li><code>/downloads</code> - Downloads Folder</li>\n<li><code>/movies</code> - Movie Share</li>\n<li><code>PGID</code> for for GroupID - see below for explanation</li>\n<li><code>PUID</code> for for UserID - see below for explanation</li>\n<li><code>TZ</code> for timezone information, eg Europe/London</li>\n</ul>\n<p>Container is based on alpine linux with s6 overlay, for shell access whilst the container is running use the console button in the GUI or use the console sub-command in the CLI.</p>\n<h3>User / Group Identifiers</h3>\n<p>Sometimes when using data volumes permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user <code>PUID</code> and group <code>PGID</code>. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" \u2122.</p>\n<h2>Setting up the application</h2>\n<p>Access the webui at <code>&lt;your-ip&gt;:5050</code>, for more information check out <a href=\"https://couchpota.to\">CouchPotato</a>.</p>"
},
{
  "title": "crashplan",
  "description": "crashplan",
  "image": "gfjardim/crashplan:latest",
  "ports": [
    "4242/tcp",
    "4243/tcp",
    "4280/tcp"
  ],
  "volumes": [
    "/config",
    "/data"
  ],
  "env": [
    {
      "name": "VNC_PASSWD",
      "label": "Password to the WebUI"
    },
    {
      "name": "TZ",
      "label": "Timezone eg. America/Sao_Paulo"
    }
  ],
  "note": "<h1>CrashPlan Container with CrashPlan Desktop App</h1>\n<h2>Supported Variables:</h2>\n<h2>Variable TZ:</h2>\n<p>This will set the correct timezone. Set yours to avoid time related issues.</p>\n<p><code>TZ=\"America/Sao_Paulo\"</code></p>\n<h2>Variable VNC_PASSWD:</h2>\n<p>This will enable password protection for your webui interface.</p>\n<p><code>VNC_PASSWD=\"your_password\"</code></p>\n<h2>Supported Ports:</h2>\n<p>This container ports can be changed, in bridge network mode, using variables started by \"TCP_PORT_\" prefix.</p>\n<h2>Port 4242</h2>\n<p>This port is used by CrashPlan for computer-to-computer backups.</p>\n<h2>Port 4243</h2>\n<p>This port is used by CrashPlan app to connect to CrashPlan service.</p>\n<h2>Port 4280</h2>\n<p>This port exposes a noVNC instance with the CrashPlan Desktop App. </p>\n<p>Navigate to <code>http://yourip:4280/vnc.html?autoconnect=true&amp;host=192.168.0.100&amp;port=4280</code> to access the graphical user interface.</p>"
},
{
  "title": "LEMP",
  "description": "LEMP",
  "image": "linuxconfig/lemp-php7",
  "ports": [
    "32772/tcp",
    "32773/tcp",
    "32774/tcp"
  ],
  "volumes": [
    "/var/www/html"
  ],
  "env": [],
  "note": "<p>Working LEMP stack\n-Debian Linux 8.5\n-Nginx 1.6.2\n-MySQL 5.5.53\n-PHP 7</p>\n<p>Installation:\nCreate Dataset and give read/execute permissions to the user www.\nUse this dataset in the advanced creation section under volumes and map to /var/www/html\nCreate index.php in this your mapped folder with this content:\n```\n      &lt;?php\n          $link = mysqli_connect(\"127.0.0.1\", \"admin\", \"pass\");</p>\n<pre><code>      if (!$link) {\n      echo \"Error: Unable to connect to MySQL.\" . PHP_EOL;\n      echo \"Debugging errno: \" . mysqli_connect_errno() . PHP_EOL;\n      echo \"Debugging error: \" . mysqli_connect_error() . PHP_EOL;\n      exit;\n      }\n\n      echo \"Success: A proper connection to MySQL was made!\" . PHP_EOL;\n      echo \"Host information: \" . mysqli_get_host_info($link) . PHP_EOL;\n\n      mysqli_close($link);\n  ?&gt;\n\n   &lt;?php phpinfo();?&gt;\n</code></pre>\n<p>```    <br />\nConnect to your webserver and check if your index.php file can be accessed.</p>\n<p>In case you'd like to change the mysql username and password:\nStart the Serial Console\n <code># mysql\n    #  mysql&gt; SET PASSWORD FOR 'admin'@'%' = PASSWORD( 'password' );</code></p>"
},
{
  "title": "Apache",
  "description": "Web Server",
  "logo": "http://www.softaculous.com/website/images/ampps/apache.png",
  "platform": "linux",
  "categories": [
    "web",
    "server"
  ],
  "image": "linuxserver/apache:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "80/tcp",
    "443/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config"
  ]
},
{
  "title": "Beets",
  "description": "Music Library Manager",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/beets-icon.png",
  "platform": "linux",
  "categories": [
    "audio",
    "library"
  ],
  "image": "linuxserver/beets:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8337/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/downloads",
    "/music"
  ]
},
{
  "title": "Booksonic",
  "description": "Streaming Audiobook Server",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/booksonic.png",
  "platform": "linux",
  "categories": [
    "epubs",
    "library"
  ],
  "image": "linuxserver/booksonic:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    },
    {
      "name": "CONTEXT_PATH",
      "label": "Context Path for setting url-base in reverse proxy setups"
    }
  ],
  "ports": [
    "4040/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/books",
    "/podcasts",
    "/media"
  ]
},
{
  "title": "Cardigann",
  "description": "Torznab/Torrentpotato proxy",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/cardigan.png",
  "platform": "linux",
  "categories": [
    "video",
    "searcher"
  ],
  "image": "linuxserver/cardigann:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    }
  ],
  "ports": [
    "5060/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config"
  ]
},
{
  "title": "Codiad",
  "description": "Web-based IDE Framework",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/codiad.png",
  "platform": "linux",
  "image": "linuxserver/codiad:latest",
  "categories": [
    "tools"
  ],
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    }
  ],
  "ports": [
    "80/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/etc/localtime:ro"
  ]
},
{
  "title": "COPS",
  "description": "Calibre Library Database OPDS/HTML Server",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/cops-icon.png",
  "platform": "linux",
  "categories": [
    "epubs",
    "library"
  ],
  "image": "linuxserver/cops:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "80/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/books"
  ]
},
{
  "title": "CouchPotato",
  "description": "Movie Manager",
  "logo": "https://couchpota.to/media/images/full.png",
  "platform": "linux",
  "categories": [
    "video",
    "library"
  ],
  "image": "linuxserver/couchpotato:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "5050/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config",
    "/downloads",
    "/movies"
  ]
},
{
  "title": "DAAPD",
  "description": "iTunes Media Server",
  "logo": "https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcS-5fQa-7g8_seCZAI8Xy7_jv7AUi3takuV3dMDu-7gshPYxZp9PA",
  "platform": "linux",
  "categories": [
    "media",
    "server"
  ],
  "image": "linuxserver/daapd:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "80/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/music"
  ]
},
{
  "title": "Davos",
  "description": "FTP Automation Tool",
  "logo": "http://www.computerhope.com/issues/pictures/ftp.jpg",
  "platform": "linux",
  "categories": [
    "fileserver"
  ],
  "image": "linuxserver/davos:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8080/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/downloads"
  ]
},
{
  "title": "Deluge",
  "description": "Bittorrent Client",
  "logo": "https://avatars2.githubusercontent.com/u/6733935?v=3&s=200",
  "platform": "linux",
  "categories": [
    "downloader"
  ],
  "image": "linuxserver/deluge:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8112/tcp",
    "58846/tcp",
    "58946/tcp",
    "58946/udp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/downloads"
  ]
},
{
  "title": "Domoticz",
  "description": "Home Automation Server",
  "logo": "https://github.com/domoticz/domoticz/raw/master/www/images/logo.png",
  "platform": "linux",
  "categories": [
    "automation"
  ],
  "image": "linuxserver/domoticz:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "1443/tcp",
    "6144/tcp",
    "8080/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config"
  ]
},
{
  "title": "DuckDNS",
  "description": "On-demand DNS",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/duckdns.png",
  "platform": "linux",
  "categories": [
    "tools"
  ],
  "image": "linuxserver/duckdns:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    },
    {
      "name": "SUBDOMAINS",
      "label": "Subdomains (below duckdns.org)"
    },
    {
      "name": "TOKEN",
      "label": "Authorization Token for DuckDNS.org"
    }
  ],
  "ports": [
    "53/udp"
  ],
  "network": "host",
  "volumes": [
    "/config"
  ]
},
{
  "title": "ELK Stack",
  "description": "Elasticsearch, Logstash, Kibana Stack",
  "logo": "https://www.elastic.co/static/images/elastic-logo-200.png",
  "platform": "linux",
  "categories": [
    "server",
    "tools"
  ],
  "image": "sebp/elk:latest",
  "env": [
    {
      "name": "CLUSTER_NAME",
      "label": "Cluster Name"
    },
    {
      "name": "ES_CONNECT_RETRY",
      "label": "Kibana to Elasticsearch Connect Retry (seconds)",
      "set": "90"
    },
    {
      "name": "ES_HEAP_SIZE",
      "label": "Elasticsearch Heap Size (256M to 1G)"
    },
    {
      "name": "LS_HEAP_SIZE",
      "label": "Logstash Heap Size (Default 500M)"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "514/udp",
    "5044/tcp",
    "5601/tcp",
    "6514/tcp",
    "9200/tcp",
    "9300/tcp",
    "9600/tcp"
  ],
  "network": "host",
  "volumes": [
    "/etc/localtime:ro",
    "/etc/logstash/conf.d/90-gnas-logs.conf",
    "/var/lib/elasticsearch",
    "/var/log"
  ]
},
{
  "title": "FreshRSS",
  "description": "RSS Aggregator",
  "logo": "https://avatars1.githubusercontent.com/u/9414285?v=3&s=400",
  "platform": "linux",
  "categories": [
    "tools"
  ],
  "image": "linuxserver/freshrss:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "80/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config"
  ]
},
{
  "title": "Headphones",
  "description": "Audio Manager",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/headphones-banner.png",
  "platform": "linux",
  "categories": [
    "downloader",
    "audio"
  ],
  "image": "linuxserver/headphones:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8181/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config",
    "/downloads",
    "/music"
  ]
},
{
  "title": "HTPC Manager",
  "description": "Web Front-End for Home Theater PCs",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/htpcmanager-icon.png",
  "platform": "linux",
  "categories": [
    "audio",
    "library"
  ],
  "image": "linuxserver/htpcmanager:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8085/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config"
  ]
},
{
  "title": "Jackett",
  "description": "Torznab/Torrentpotato Proxy",
  "logo": "https://dominicm.com/wp-content/uploads/2016/05/jackett-arch-linux-450x489.png",
  "platform": "linux",
  "categories": [
    "searcher"
  ],
  "image": "linuxserver/jackett:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "9117/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config",
    "/downloads"
  ]
},
{
  "title": "KODI Headless",
  "description": "KODI Media Center Library Backend",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/kodi-banner.png",
  "platform": "linux",
  "categories": [
    "media",
    "tools"
  ],
  "image": "linuxserver/kodi-headless:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    },
    {
      "name": "CUSTOM",
      "label": "Custom",
      "set": "Cusomthing"
    }
  ],
  "ports": [
    "8080/tcp",
    "9777/udp"
  ],
  "network": "bridge",
  "volumes": [
    "/config/.kodi"
  ]
},
{
  "title": "LazyLibrarian",
  "description": "Digital Publication Metadata Collector",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/lazylibrarian-icon.png",
  "platform": "linux",
  "categories": [
    "epubs",
    "library"
  ],
  "image": "linuxserver/lazylibrarian:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "5299/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/books",
    "/config",
    "/downloads"
  ]
},
{
  "title": "Let's Encrypt",
  "description": "Free Automated SSL Certificate Provisioning",
  "logo": "https://letsencrypt.org/images/le-logo-lockonly.svg",
  "platform": "linux",
  "categories": [
    "security",
    "server"
  ],
  "image": "linuxserver/letsencrypt:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    },
    {
      "name": "DHLEVEL",
      "label": "Diffie-Hellmann bit value (4096 recommended)"
    },
    {
      "name": "EMAIL",
      "label": "Email Address"
    },
    {
      "name": "SUBDOMAINS",
      "label": "Subdomains"
    },
    {
      "name": "URL",
      "label": "URL"
    },
    {
      "name": "ONLY_SUBDOMAINS",
      "label": "Generate certificates for subdomains, not the main domain (default is false)"
    }
  ],
  "ports": [
    "443/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config"
  ]
},
{
  "title": "Libresonic",
  "description": "Streaming Media Server",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/libresonic.png",
  "platform": "linux",
  "categories": [
    "media",
    "server"
  ],
  "image": "linuxserver/libresonic:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    },
    {
      "name": "CONTEXT_PATH",
      "label": "URL base for reverse-proxy setups"
    }
  ],
  "ports": [
    "4040/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config",
    "/music",
    "/playlists",
    "/podcasts",
    "/media"
  ]
},
{
  "title": "Lychee",
  "description": "Photo management server",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/lychee-icon.png",
  "platform": "linux",
  "categories": [
    "photo",
    "server"
  ],
  "image": "linuxserver/lychee:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "80/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config",
    "/data",
    "/downloads"
  ]
},
{
  "title": "Maraschino",
  "description": "Web Front-End for Kodi",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/maraschino.png",
  "platform": "linux",
  "categories": [
    "media",
    "tools"
  ],
  "image": "linuxserver/maraschino:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "7000/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config"
  ]
},
{
  "title": "MariaDB",
  "description": "SQL Server",
  "logo": "https://global.download.synology.com/download/Package/img/MariaDB/5.5.53-0070/thumb_256.png",
  "platform": "linux",
  "categories": [
    "database",
    "server"
  ],
  "image": "linuxserver/mariadb:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    },
    {
      "name": "MYSQL_ROOT_PASSWORD",
      "label": "MySQL Root Password"
    }
  ],
  "ports": [
    "3306/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config/linuxserver/mariadb"
  ]
},
{
  "title": "McMyAdmin2",
  "description": "Minecraft Web Admin Panel",
  "logo": "https://lh5.ggpht.com/FStFjVx__fqEyM80KRlkBaa5u8mtbZfldFiAnl8O4VHzRzIb6hiRMdHXrfzTZxQboKDw=w300",
  "platform": "linux",
  "categories": [
    "game",
    "server"
  ],
  "image": "linuxserver/mcmyadmin2:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8080/tcp",
    "25565/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/minecraft"
  ]
},
{
  "title": "Medusa",
  "description": "TV Series Manager",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/medusa-readme.png",
  "platform": "linux",
  "categories": [
    "video",
    "library"
  ],
  "image": "linuxserver/medusa:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8081/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config",
    "/downloads",
    "/tv"
  ]
},
{
  "title": "Minetest",
  "description": "Minecraft-like Game Server",
  "logo": "https://raw.githubusercontent.com/linuxserver/beta-templates/master/lsiodev/img/minetest-icon.png",
  "platform": "linux",
  "categories": [
    "game",
    "server"
  ],
  "image": "linuxserver/minetest:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "30000/udp"
  ],
  "network": "bridge",
  "volumes": [
    "/config/.minetest"
  ]
},
{
  "title": "Minisatip",
  "description": "Satellite TV to IP (satip) Server",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/minisatip-icon.png",
  "platform": "linux",
  "categories": [
    "video",
    "server"
  ],
  "image": "linuxserver/minisatip:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    },
    {
      "name": "RUN_OPTS",
      "label": "Runtime Parameters"
    }
  ],
  "ports": [
    "8875/tcp",
    "1900/tcp",
    "554/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config"
  ]
},
{
  "title": "MusicBrainz",
  "description": "Music Manager",
  "logo": "https://raw.githubusercontent.com/linuxserver/beta-templates/master/lsiodev/img/musicbrainzgitlogo.jpg",
  "platform": "linux",
  "categories": [
    "audio",
    "library"
  ],
  "image": "linuxserver/musicbrainz:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    },
    {
      "name": "BRAINZCODE",
      "label": "MusicBrainz API Key",
      "set": ""
    },
    {
      "name": "WEBADDRESS",
      "label": "IP Address of the server running Musicbrainz",
      "set": ""
    }
  ],
  "ports": [
    "5000/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config",
    "/data"
  ]
},
{
  "title": "Muximux",
  "description": "HTPC Management Interface",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/muximux-icon.png",
  "platform": "linux",
  "categories": [
    "media",
    "tools"
  ],
  "image": "linuxserver/muximux:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "80/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config"
  ]
},
{
  "title": "Mylar",
  "description": "Comic Book Library Manager",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/mylar-icon.png",
  "platform": "linux",
  "categories": [
    "epubs",
    "library"
  ],
  "image": "linuxserver/mylar:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8090:8090/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/comics",
    "/downloads"
  ]
},
{
  "title": "MySQL",
  "description": "Database Server",
  "logo": "https://leehblue.com/wp-content/uploads/2012/01/mysql-logo-175x175.png",
  "platform": "linux",
  "categories": [
    "database",
    "server"
  ],
  "image": "linuxserver/mysql:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    },
    {
      "name": "MYSQL_ROOT_PASSWORD",
      "label": "MySQL root password"
    }
  ],
  "ports": [
    "3306/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config"
  ]
},
{
  "title": "Nextcloud",
  "description": "Personal Cloud Storage",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/nextcloud-icon.png",
  "platform": "linux",
  "categories": [
    "storage",
    "server"
  ],
  "image": "linuxserver/nextcloud:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "443/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/data"
  ]
},
{
  "title": "Nginx",
  "description": "Web Server",
  "logo": "https://www.splunk.com/content/dam/splunk-blogs/images/2017/02/nginx-logo.png",
  "platform": "linux",
  "categories": [
    "web",
    "server"
  ],
  "image": "linuxserver/nginx:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "80/tcp",
    "443/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config"
  ]
},
{
  "title": "NZBGet",
  "description": "Newsnab Binary Downloader",
  "logo": "https://avatars3.githubusercontent.com/u/3368377?v=3&s=400",
  "platform": "linux",
  "categories": [
    "downloader"
  ],
  "image": "linuxserver/nzbget:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "6789/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/downloads"
  ]
},
{
  "title": "NZBHydra",
  "description": "Newznab Indexer Proxy",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/hydra-icon.png",
  "platform": "linux",
  "categories": [
    "searcher"
  ],
  "image": "linuxserver/hydra:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "5075/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config",
    "/downloads"
  ]
},
{
  "title": "OMBI",
  "description": "Plex Multiuser Management Server",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/ombi.png",
  "platform": "linux",
  "categories": [
    "media",
    "tools"
  ],
  "image": "linuxserver/ombi:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "3579/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/etc/localtime:ro"
  ]
},
{
  "title": "OpenVPN-AS",
  "description": "VPN Server",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/openvpn-as-banner.png",
  "platform": "linux",
  "categories": [
    "vpn",
    "server"
  ],
  "image": "linuxserver/openvpn-as:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    },
    {
      "name": "INTERFACE",
      "label": "Interface",
      "set": "eth0"
    }
  ],
  "ports": [
    "1194/udp"
  ],
  "network": "host",
  "privileged": "true",
  "volumes": [
    "/config"
  ]
},
{
  "title": "OSCAM",
  "description": "DVB Descrambler Server/Client",
  "logo": "http://download.oscam.cc/images/Logo.png",
  "platform": "linux",
  "categories": [
    "video",
    "server"
  ],
  "image": "linuxserver/oscam:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8888/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config"
  ]
},
{
  "title": "Photoshow",
  "description": "Photo Management Server",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/photoshow-icon.png",
  "platform": "linux",
  "categories": [
    "photo",
    "server"
  ],
  "image": "linuxserver/photoshow:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "80/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/Pictures",
    "/Thumbs"
  ]
},
{
  "title": "Piwigo",
  "description": "Photo Management Server",
  "logo": "https://48jwh53mcwj217jvx11dcwjj-wpengine.netdna-ssl.com/wp-content/uploads/2011/02/logo-shadow.png",
  "platform": "linux",
  "categories": [
    "photo",
    "server"
  ],
  "image": "linuxserver/piwigo:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "80/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/etc/localtime:ro"
  ]
},
{
  "title": "Plex",
  "description": "Media Management Server",
  "logo": "http://blog.stillaslife.com/wp-content/uploads/2016/09/Plex-Logo.png",
  "platform": "linux",
  "categories": [
    "media",
    "server"
  ],
  "image": "plexinc/pms-docker:latest",
  "env": [
    {
      "name": "PLEX_GID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PLEX_UID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    },
    {
      "name": "PLEX_CLAIM",
      "label": "Plex Claim Token"
    },
    {
      "name": "VERSION",
      "label": "Plex Server Version",
      "set": "latest"
    }
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/data",
    "/transcode"
  ]
},
{
  "title": "Plexpy",
  "description": "Plex Usage Analytics",
  "logo": "http://peterman.ca/img/item05.jpg",
  "platform": "linux",
  "categories": [
    "media",
    "tools"
  ],
  "image": "linuxserver/plexpy:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8181/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/logs:ro"
  ]
},
{
  "title": "Plexrequests",
  "description": "Multi-user Plex Media Requests Manager",
  "logo": "https://us.v-cdn.net/6025034/uploads/ipb/profile/nphoto-135886.png",
  "platform": "linux",
  "categories": [
    "media",
    "tools"
  ],
  "image": "linuxserver/plexrequests:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    },
    {
      "name": "URL_BASE",
      "label": "URL-base in reverse proxy setups"
    }
  ],
  "ports": [
    "3000/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/etc/localtime:ro"
  ]
},
{
  "title": "Pydio",
  "description": "Personal Cloud Storage",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/pydio-banner.png",
  "platform": "linux",
  "categories": [
    "storage",
    "server"
  ],
  "image": "linuxserver/pydio:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "443/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/data",
    "/etc/localtime:ro"
  ]
},
{
  "title": "Quassel-Core",
  "description": "IRC Server and Web Client",
  "logo": "http://icons.iconarchive.com/icons/oxygen-icons.org/oxygen/256/Apps-quassel-icon.png",
  "platform": "linux",
  "categories": [
    "chat",
    "server"
  ],
  "image": "linuxserver/quassel-core:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "4242/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/etc/localtime:ro"
  ]
},
{
  "title": "Radarr",
  "description": "Movie Manager",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/radarr.png",
  "platform": "linux",
  "categories": [
    "video",
    "server"
  ],
  "image": "linuxserver/radarr:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "7878/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/downloads",
    "/movies"
  ]
},
{
  "title": "Resilio-Sync",
  "description": "Bittorrent-based File Synchronization Server",
  "logo": "https://index.tnwcdn.com/images/d07f5726fcc0fbaa09e0afee611212256ca75e19.jpeg",
  "platform": "linux",
  "categories": [
    "storage",
    "server"
  ],
  "image": "linuxserver/resilio-sync:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8888/tcp",
    "55555/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/sync"
  ]
},
{
  "title": "RUTorrent",
  "description": "Bittorrent Client",
  "logo": "https://freedif.org/wp-content/uploads/2015/04/rtorrent-logo.png",
  "platform": "linux",
  "categories": [
    "downloader"
  ],
  "image": "linuxserver/rutorrent:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "80/tcp",
    "5000/tcp",
    "51413/tcp",
    "6881/udp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/downloads"
  ]
},
{
  "title": "SABnzbd",
  "description": "Newznab Binary Downloader",
  "logo": "http://www.filesharingguides.com/wp-content/uploads/2014/02/sab2_512.png",
  "platform": "linux",
  "categories": [
    "downloader"
  ],
  "image": "linuxserver/sabnzbd:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8080/tcp",
    "9090/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/config",
    "/downloads"
  ]
},
{
  "title": "Sickbeard",
  "description": "TV Series Manager",
  "logo": "https://pbs.twimg.com/profile_images/1288187778/head_400x400.png",
  "platform": "linux",
  "categories": [
    "video",
    "library"
  ],
  "image": "linuxserver/sickbeard:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8081/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/data",
    "/downloads"
  ]
},
{
  "title": "Sickrage",
  "description": "TV Series Manager",
  "logo": "http://strongcheese.com/images/Sickrage/sickrage_1.png",
  "platform": "linux",
  "categories": [
    "video",
    "library"
  ],
  "image": "linuxserver/sickrage:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8081/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/downloads",
    "/tv"
  ]
},
{
  "title": "Smokeping",
  "description": "Network Latency Monitor",
  "logo": "http://www.oetiker.ch//assets/OssProject/Logo/_resampled/CroppedFocusedImage600400-logo-smokeping.png",
  "platform": "linux",
  "categories": [
    "network",
    "tools"
  ],
  "image": "linuxserver/smokeping:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8080/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/data"
  ]
},
{
  "title": "Sonarr",
  "description": "TV Series Manager",
  "logo": "https://www.freebsdnews.com/wp-content/uploads/sonarr.png",
  "platform": "linux",
  "categories": [
    "video",
    "library"
  ],
  "image": "linuxserver/sonarr:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    }
  ],
  "ports": [
    "8989/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/dev/rtc:ro",
    "/config",
    "/downloads",
    "/tv"
  ]
},
{
  "title": "Splunk",
  "description": "Log Analytics Tool",
  "logo": "http://sl.com/wp-content/uploads/2016/10/mzl.tfigcody.png",
  "platform": "linux",
  "categories": [
    "tools"
  ],
  "image": "splunk/splunk:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "SPLUNK_START_ARGS",
      "label": "Splunk Startup Arguments",
      "set": "--accept-license"
    }
  ],
  "ports": [
    "514/udp",
    "6514/tcp",
    "8000/tcp",
    "8089/tcp",
    "9997/tcp"
  ],
  "network": "bridge",
  "volumes": [
    "/dev/rtc:ro",
    "/opt/splunk/etc",
    "/opt/splunk/var",
    "/var/log:ro"
  ]
},
{
  "title": "Syncthing",
  "description": "Personal Cloud File Synchronization Tool",
  "logo": "https://www.unixmen.com/wp-content/uploads/2015/01/Syncthing.png",
  "platform": "linux",
  "categories": [
    "storage",
    "server"
  ],
  "image": "linuxserver/syncthing:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8384/tcp",
    "22000/tcp",
    "21027/udp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/path/to/sync/target/dir"
  ]
},
{
  "title": "TheLounge",
  "description": "IRC Server and Web Client",
  "logo": "https://raw.githubusercontent.com/linuxserver/community-templates/master/lsiocommunity/img/shout-icon.png",
  "platform": "linux",
  "categories": [
    "chat",
    "server"
  ],
  "image": "linuxserver/thelounge:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "9000/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config"
  ]
},
{
  "title": "Teamspeak 3",
  "description": "VoIP Communications Server",
  "logo": "https://www.teamspeak.com/assets/images/logos/teamspeak_small.png",
  "platform": "linux",
  "categories": [
    "chat",
    "server"
  ],
  "image": "linuxserver/gsm-ts3:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "9987/udp",
    "10011/tcp",
    "30033"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/etc/localtime:ro"
  ]
},
{
  "title": "Transmission",
  "description": "Torrent Downloader",
  "logo": "http://www.filesharingguides.com/wp-content/uploads/2014/04/transmission.png",
  "platform": "linux",
  "categories": [
    "downloader"
  ],
  "image": "linuxserver/transmission:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "9091/tcp",
    "51413/tcp",
    "51413/udp"
  ],
  "network": "bridge",
  "volumes": [
    "/config",
    "/downloads"
  ]
},
{
  "title": "TT-RSS",
  "description": "RSS Aggregator",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/tt-rss-banner.png",
  "platform": "linux",
  "categories": [
    "tools"
  ],
  "image": "linuxserver/tt-rss:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "80/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/etc/localtime:ro"
  ]
},
{
  "title": "TVheadend",
  "description": "Live TV Transcoder Server",
  "logo": "https://s31.postimg.io/8urk8vdu3/logobig.png",
  "platform": "linux",
  "categories": [
    "video",
    "server"
  ],
  "image": "linuxserver/tvheadend:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    },
    {
      "name": "RUN_OPTS",
      "label": "Runtime Parameters"
    }
  ],
  "ports": [
    "9881/tcp",
    "9882/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config",
    "/recordings"
  ]
},
{
  "title": "Ubooquity",
  "description": "E-book and Comic Book Manager",
  "logo": "https://i.ytimg.com/vi/qfLG9nKt3ew/hqdefault.jpg",
  "platform": "linux",
  "categories": [
    "epubs",
    "server"
  ],
  "image": "linuxserver/ubooquity:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    },
    {
      "name": "MAXMEM",
      "label": "Maximum Memory"
    }
  ],
  "ports": [
    "2202/tcp"
  ],
  "network": "host",
  "volumes": [
    "/books",
    "/comics",
    "/config",
    "/files"
  ]
},
{
  "title": "Unifi",
  "description": "Enterprise Wireless Network Controller",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/unifi-banner.png",
  "platform": "linux",
  "categories": [
    "network",
    "server"
  ],
  "image": "linuxserver/unifi:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "8080/tcp",
    "8081/tcp",
    "8443/tcp",
    "8843/tcp",
    "8880/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config"
  ]
},
{
  "title": "ZNC",
  "description": "IRC Bouncer",
  "logo": "http://wiki.znc.in/resources/assets/wiki.png",
  "platform": "linux",
  "categories": [
    "chat",
    "server"
  ],
  "image": "linuxserver/znc:latest",
  "env": [
    {
      "name": "PGID",
      "label": "Group ID",
      "set": "65534"
    },
    {
      "name": "PUID",
      "label": "User ID",
      "set": "65534"
    },
    {
      "name": "TZ",
      "label": "Timezone (i.e. 'America/Los Angeles')"
    }
  ],
  "ports": [
    "6501/tcp"
  ],
  "network": "host",
  "volumes": [
    "/config"
  ]
}, 
{
  "title": "Chronocommand",
  "description": "Time management",
  "categories": ["docker"],
  "platform": "linux",
  "logo": "https://raw.githubusercontent.com/kristkat/custom-templates-portainer/master/Hourglass.png",
  "image": "registry:latest",
  "ports": [
    "5000/tcp"
  ],
  "volumes": ["/var/lib/registry"]
},  
{
  "title": "ScaleIT",
  "description": "App for AOI machines",
  "categories": ["docker"],
  "platform": "linux",
  "logo": "https://raw.githubusercontent.com/kristkat/custom-templates-portainer/master/logo_social_media_ROUND.png",
  "image": "registry:latest",
  "ports": [
    "5000/tcp"
  ],
  "volumes": ["/var/lib/registry"]
},
{
  "title": "Funktion Server",
  "description": "Manages funktions",
  "categories": ["docker"],
  "platform": "linux",
  "logo": "https://raw.githubusercontent.com/kristkat/custom-templates-portainer/master/365px-Lambda_logo.svg_.png",
  "image": "registry:latest",
  "ports": [
    "5000/tcp"
  ],
  "volumes": ["/var/lib/registry"]
},

{
  "title": "Redmine",
  "description": "Open-source project management tool",
  "categories": ["project-management"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/redmine.png",
  "image": "redmine:latest",
  "ports": [
    "3000/tcp"
  ],
  "volumes": ["/usr/src/redmine/files"]
},

{
  "title": "Gitlab",
  "description": "Open-source project management tool",
  "categories": ["project-management"],
  "platform": "linux",
  "logo": "https://raw.githubusercontent.com/kristkat/custom-templates-portainer/master/stacked_wm_no_bg.png",
  "image": "redmine:latest",
  "ports": [
    "3000/tcp"
  ],
  "volumes": ["/usr/src/redmine/files"]
}
,
{
  "title": "Elasticsearch",
  "description": "Open-source search and analytics engine",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/elasticsearch.png",
  "image": "elasticsearch:latest",
  "ports": [
    "9200/tcp",
    "9300/tcp"
  ],
  "volumes": ["/usr/share/elasticsearch/data"]
},
{
  "title": "DB2 v9.7",
  "description": "IBM DB2 v9.7 LUW",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/registry.png",
  "image": "camunda-ci-db2:9.7",
  "ports": [
    "50000/tcp",
    "22/tcp"
  ],
  "privileged": true,
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},
{
  "title": "DB2 v10.1",
  "description": "IBM DB2 v10.1 LUW",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/registry.png",
  "image": "camunda-ci-db2:10.1",
  "ports": [
    "50000/tcp",
    "22/tcp"
  ],
  "privileged": true,
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},
{
  "title": "DB2 v10.5",
  "description": "IBM DB2 v10.5 LUW",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/registry.png",
  "image": "camunda-ci-db2:10.5",
  "ports": [
    "50000/tcp",
    "22/tcp"
  ],
  "privileged": true,
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},
{
  "title": "DB2 v11.1",
  "description": "IBM DB2 v11.1 LUW",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/registry.png",
  "image": "camunda-ci-db2:11.1",
  "ports": [
    "50000/tcp",
    "22/tcp"
  ],
  "privileged": true,
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},

{
  "title": "MariaDB v10.0",
  "description": "MariaDB v10.0",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/mariadb.png",
  "image": "camunda-ci-mariadb:10.0",
  "ports": [
    "3306/tcp",
    "22/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},
{
  "title": "MariaDB Galera v10.1",
  "description": "MariaDB Galera Cluster v10.1",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/mariadb.png",
  "image": "camunda-ci-mariadb:galera",
  "ports": [
    "3306/tcp",
    "22/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},

{
  "title": "MySQL v5.7",
  "description": "MySQL v5.7",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/mysql.png",
  "image": "camunda-ci-mysql:5.7",
  "ports": [
    "3306/tcp",
    "22/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},
{
  "title": "MySQL v5.6",
  "description": "MySQL v5.6",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/mysql.png",
  "image": "camunda-ci-mysql:5.6",
  "ports": [
    "3306/tcp",
    "22/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},
{
  "title": "MySQL v5.5",
  "description": "MySQL v5.5",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/mysql.png",
  "image": "camunda-ci-mysql:5.5",
  "ports": [
    "3306/tcp",
    "22/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},
{
  "title": "MySQL v5.1",
  "description": "MySQL v5.1",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/mysql.png",
  "image": "camunda-ci-mysql:5.1",
  "ports": [
    "3306/tcp",
    "22/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},

{
  "title": "Oracle 12c",
  "description": "Oracle v12c Enterprise Edition",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/mysql.png",
  "image": "camunda-ci-oracle:12",
  "ports": [
    "1521/tcp",
    "22/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},
{
  "title": "Oracle 11g",
  "description": "Oracle v11g Express Edition",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/mysql.png",
  "image": "camunda-ci-oracle:11",
  "ports": [
    "1521/tcp",
    "22/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},
{
  "title": "Oracle 10g",
  "description": "Oracle v10g Express Edition",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/mysql.png",
  "image": "camunda-ci-oracle:10",
  "ports": [
    "1521/tcp",
    "22/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},

{
  "title": "PostgreSQL v9.6",
  "description": "PostgreSQL v9.6",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/postgres.png",
  "image": "camunda-ci-postgresql:9.6",
  "ports": [
    "5432/tcp",
    "22/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},
{
  "title": "PostgreSQL v9.4",
  "description": "PostgreSQL v9.4",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/postgres.png",
  "image": "camunda-ci-postgresql:9.4",
  "ports": [
    "5432/tcp",
    "22/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},
{
  "title": "PostgreSQL v9.3",
  "description": "PostgreSQL v9.3",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/postgres.png",
  "image": "camunda-ci-postgresql:9.3",
  "ports": [
    "5432/tcp",
    "22/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},
{
  "title": "PostgreSQL v9.1",
  "description": "PostgreSQL v9.1",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/postgres.png",
  "image": "camunda-ci-postgresql:9.1",
  "ports": [
    "5432/tcp",
    "22/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},

{
  "title": "SqlServer Express 2008",
  "description": "Microsoft SqlServer Express 2008 for Windows running Qemu in Docker",
  "categories": ["database"],
  "platform": "windows",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda-ci-sqlserver:2008",
  "ports": [
    "1433/tcp",
    "5900/tcp"
  ],
  "privileged": true,
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-qemu.sh",
  "restart_policy": "on-failure"
},
{
  "title": "SqlServer Express 2012",
  "description": "Microsoft SqlServer Express 2012 for Windows running Qemu in Docker",
  "categories": ["database"],
  "platform": "windows",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda-ci-sqlserver:2012",
  "ports": [
    "1433/tcp",
    "5900/tcp"
  ],
  "privileged": true,
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-qemu.sh",
  "restart_policy": "on-failure"
},
{
  "title": "SqlServer Express 2014",
  "description": "Microsoft SqlServer Express 2014 for Windows running Qemu in Docker",
  "categories": ["database"],
  "platform": "windows",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda-ci-sqlserver:2014",
  "ports": [
    "1433/tcp",
    "5900/tcp"
  ],
  "privileged": true,
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-qemu.sh",
  "restart_policy": "on-failure"
},

{
  "title": "WebLogic 12R2",
  "description": "Oracle WebLogic Application Server 12R2",
  "categories": ["server"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda-ci-weblogic:12R2",
  "ports": [
    "7001/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},

{
  "title": "WebSphere 9.0",
  "description": "IBM WebSphere Application Server 9.0 with PostgreSQL 9.1",
  "categories": ["server"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda-ci-websphere:9.0-postgresql-9.1",
  "ports": [
    "5432/tcp",
    "9060/tcp",
    "9080/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},
{
  "title": "WebSphere 8.5",
  "description": "IBM WebSphere Application Server 8.5 with PostgreSQL 9.1",
  "categories": ["server"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda-ci-websphere:8.5-postgresql-9.1",
  "ports": [
    "5432/tcp",
    "9060/tcp",
    "9080/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},
{
  "title": "WebSphere 8.0",
  "description": "IBM WebSphere Application Server 8.0 with PostgreSQL 9.1",
  "categories": ["server"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda-ci-websphere:8.0-postgresql-9.1",
  "ports": [
    "5432/tcp",
    "9060/tcp",
    "9080/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},

{
  "title": "CentOS 7.3",
  "description": "Camunda CI CentOS base image",
  "categories": ["os"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda-ci-base-centos:latest",
  "ports": [
    "22/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},
{
  "title": "Ubuntu",
  "description": "Camunda CI Ubuntu base image",
  "categories": ["os"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda-ci-base-ubuntu:latest",
  "ports": [
    "22/tcp"
  ],
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-container.sh",
  "restart_policy": "on-failure"
},
{
  "title": "Windows Server 2012R2",
  "description": "Microsoft Windows Server 2012R2 running Qemu in Docker with VNC on port 5900",
  "categories": ["database"],
  "platform": "windows",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda-ci-sqlserver:2014",
  "ports": [
    "5900/tcp"
  ],
  "privileged": true,
  "registry": "registry.camunda.com",
  "command": "/usr/local/bin/start-qemu.sh",
  "restart_policy": "on-failure"
},

{
  "title": "Camunda BPM SNAPSHOT Tomcat",
  "description": "Camunda BPM platform latest snapshot running on Tomcat",
  "categories": ["camunda", "camunda tomcat"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda/camunda-bpm-platform:tomcat-SNAPSHOT",
  "ports": [
    "8080/tcp"
  ],
  "restart_policy": "on-failure"
},
{
  "title": "Camunda BPM LATEST Tomcat",
  "description": "Camunda BPM platform latest official release running on Tomcat",
  "categories": ["camunda", "camunda tomcat"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda/camunda-bpm-platform:tomcat-latest",
  "ports": [
    "8080/tcp"
  ],
  "restart_policy": "on-failure"
},
{
  "title": "Camunda BPM 7.7.0 Tomcat",
  "description": "Camunda BPM platform 7.7.0 running on Tomcat",
  "categories": ["camunda", "camunda tomcat"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda/camunda-bpm-platform:tomcat-7.7.0",
  "ports": [
    "8080/tcp"
  ],
  "restart_policy": "on-failure"
},
{
  "title": "Camunda BPM 7.6.0 Tomcat",
  "description": "Camunda BPM platform 7.6.0 running on Tomcat",
  "categories": ["camunda", "camunda tomcat"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda/camunda-bpm-platform:tomcat-7.6.0",
  "ports": [
    "8080/tcp"
  ],
  "restart_policy": "on-failure"
},
{
  "title": "Camunda BPM 7.5.0 Tomcat",
  "description": "Camunda BPM platform 7.5.0 running on Tomcat",
  "categories": ["camunda", "camunda tomcat"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda/camunda-bpm-platform:tomcat-7.5.0",
  "ports": [
    "8080/tcp"
  ],
  "restart_policy": "on-failure"
},
{
  "title": "Camunda BPM 7.4.0 Tomcat",
  "description": "Camunda BPM platform 7.4.0 running on Tomcat",
  "categories": ["camunda", "camunda tomcat"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda/camunda-bpm-platform:tomcat-7.4.0",
  "ports": [
    "8080/tcp"
  ],
  "restart_policy": "on-failure"
},
{
  "title": "Camunda BPM 7.3.0 Tomcat",
  "description": "Camunda BPM platform 7.3.0 running on Tomcat",
  "categories": ["camunda", "camunda tomcat"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda/camunda-bpm-platform:tomcat-7.3.0",
  "ports": [
    "8080/tcp"
  ],
  "restart_policy": "on-failure"
},
{
  "title": "Camunda BPM 7.2.0 Tomcat",
  "description": "Camunda BPM platform 7.2.0 running on Tomcat",
  "categories": ["camunda", "camunda tomcat"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda/camunda-bpm-platform:tomcat-7.2.0",
  "ports": [
    "8080/tcp"
  ],
  "restart_policy": "on-failure"
},
{
  "title": "Camunda BPM 7.1.0 Tomcat",
  "description": "Camunda BPM platform 7.1.0 running on Tomcat",
  "categories": ["camunda", "camunda tomcat"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "camunda/camunda-bpm-platform:tomcat-7.1.0",
  "ports": [
    "8080/tcp"
  ],
  "restart_policy": "on-failure"
},
  {
  "title": "Emby",
  "description": "Emby media server",
  "categories": ["bellecerise", "multimedia"],
  "privileged": true,
  "restart_policy": "always",
  "platform": "linux",
  "network": "host",
  "logo": "https://emby.media/community/uploads/inline/44692/560bd1408fc27_MB3_512_423.png",
  "image": "emby/embyserver:latest",
  "env": [
    {
      "name": "APP_GID",
      "label": "ID of the group running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "APP_UID",
      "label": "ID of the user running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "UMASK",
      "label": "Umask for the user running the application. (ex: 002)",
      "set": "002"
    },
    {
      "name": "TZ",
      "label": "Timezone for the container. (ex: Europe/Brussels)",
      "set": "Europe/Brussels"
    }
  ],
  "ports": [
    "8096/tcp",
    "8920/tcp",
    "7359/udp",
    "1900/udp"
  ],
  "volumes": [
    "/config", 
    "/mnt/movies", 
    "/mnt/series", 
    "/mnt/music", 
    "/mnt/system",
    "/mnt/pictures",
    "/mnt/phones"
  ]
},
{
  "title": "SABnzbd",
  "description": "SABnzbd nzb downloader",
  "categories": ["bellecerise", "multimedia"],
  "privileged": true,
  "restart_policy": "always",
  "platform": "linux",
  "network": "host",
  "logo": "https://sabnzbd.org/images/icons/apple-touch-icon-152x152-precomposed.png",
  "image": "linuxserver/sabnzbd:latest",
  "env": [
    {
      "name": "PGID",
      "label": "ID of the group running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "PUID",
      "label": "ID of the user running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "TZ",
      "label": "Timezone for the container. (ex: Europe/Brussels)",
      "set": "Europe/Brussels"
    }
  ],
  "ports": [
    "8080/tcp",
    "9090/tcp"
  ],
  "volumes": [
    "/config", 
    "/downloads",
    "/incomplete-downloads"
  ]
},
{
  "title": "Transmission",
  "description": "Transmission torrent downloader",
  "categories": ["bellecerise", "multimedia"],
  "privileged": true,
  "restart_policy": "always",
  "platform": "linux",
  "network": "host",
  "logo": "https://raw.githubusercontent.com/dperson/transmission/master/logo.png",
  "image": "linuxserver/transmission:latest",
  "env": [
    {
      "name": "PGID",
      "label": "ID of the group running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "PUID",
      "label": "ID of the user running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "TZ",
      "label": "Timezone for the container. (ex: Europe/Brussels)",
      "set": "Europe/Brussels"
    }
  ],
  "ports": [
    "51413/tcp",
    "9091/tcp",
    "51413/udp"
  ],
  "volumes": [
    "/config", 
    "/downloads",
    "/watch"
  ]
},
{
  "title": "ruTorrent",
  "description": "rTurrent torrent downloader with ruTorrent UI",
  "categories": ["bellecerise", "multimedia"],
  "privileged": true,
  "restart_policy": "always",
  "platform": "linux",
  "network": "host",
  "logo": "https://dominicm.com/wp-content/uploads/2017/03/rutorrent-arch-linux-450x450.png",
  "image": "linuxserver/rutorrent:latest",
  "env": [
    {
      "name": "PGID",
      "label": "ID of the group running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "PUID",
      "label": "ID of the user running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "TZ",
      "label": "Timezone for the container. (ex: Europe/Brussels)",
      "set": "Europe/Brussels"
    }
  ],
  "ports": [
    "80/tcp",
    "5000/tcp",
    "51413/tcp",
    "6881/udp"
  ],
  "volumes": [
    "/config", 
    "/downloads"
  ]
},
{
  "title": "NZB Hydra",
  "description": "NZB multi indexer search",
  "categories": ["bellecerise", "multimedia"],
  "privileged": true,
  "restart_policy": "always",
  "platform": "linux",
  "network": "host",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/hydra-icon.png",
  "image": "linuxserver/hydra:latest",
  "env": [
    {
      "name": "PGID",
      "label": "ID of the group running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "PUID",
      "label": "ID of the user running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "TZ",
      "label": "Timezone for the container. (ex: Europe/Brussels)",
      "set": "Europe/Brussels"
    }
  ],
  "ports": [
    "5075/tcp"
  ],
  "volumes": [
    "/config", 
    "/downloads"
  ]
},
{
  "title": "Jackett",
  "description": "Torrent multi indexer search",
  "categories": ["bellecerise", "multimedia"],
  "privileged": true,
  "restart_policy": "always",
  "platform": "linux",
  "network": "host",
  "logo": "https://avatars3.githubusercontent.com/u/15383019",
  "image": "linuxserver/jackett:latest",
  "env": [
    {
      "name": "PGID",
      "label": "ID of the group running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "PUID",
      "label": "ID of the user running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "TZ",
      "label": "Timezone for the container. (ex: Europe/Brussels)",
      "set": "Europe/Brussels"
    }
  ],
  "ports": [
    "9117/tcp"
  ],
  "volumes": [
    "/config", 
    "/downloads"
  ]
},
{
  "title": "Couchpotato",
  "description": "Automated movies downloader",
  "categories": ["bellecerise", "multimedia"],
  "privileged": true,
  "restart_policy": "always",
  "platform": "linux",
  "network": "host",
  "logo": "https://couchpota.to/favicon.ico",
  "image": "linuxserver/couchpotato:latest",
  "env": [
    {
      "name": "PGID",
      "label": "ID of the group running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "PUID",
      "label": "ID of the user running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "TZ",
      "label": "Timezone for the container. (ex: Europe/Brussels)",
      "set": "Europe/Brussels"
    },
    {
      "name": "UMASK_SET",
      "label": "Umask for the user running the application. (ex: 002)",
      "set": "002"
    }
  ],
  "ports": [
    "5050/tcp"
  ],
  "volumes": [
    "/config", 
    "/downloads",
    "/movies"
  ]
},
{
  "title": "SickRage",
  "description": "Automated series downloader",
  "categories": ["bellecerise", "multimedia"],
  "privileged": true,
  "restart_policy": "always",
  "platform": "linux",
  "network": "host",
  "logo": "http://strongcheese.com/images/Sickrage/sickrage_1.png",
  "image": "linuxserver/sickrage:latest",
  "env": [
    {
      "name": "PGID",
      "label": "ID of the group running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "PUID",
      "label": "ID of the user running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "TZ",
      "label": "Timezone for the container. (ex: Europe/Brussels)",
      "set": "Europe/Brussels"
    }
  ],
  "ports": [
    "8081/tcp"
  ],
  "volumes": [
    "/config", 
    "/downloads",
    "/tv"
  ]
},
{
  "title": "Sonarr",
  "description": "Automated series downloader",
  "categories": ["bellecerise", "multimedia"],
  "privileged": true,
  "restart_policy": "always",
  "platform": "linux",
  "network": "host",
  "logo": "https://www.binaries4all.nl/sonarr/logo2.png",
  "image": "linuxserver/sonarr:latest",
  "env": [
    {
      "name": "PGID",
      "label": "ID of the group running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "PUID",
      "label": "ID of the user running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "TZ",
      "label": "Timezone for the container. (ex: Europe/Brussels)",
      "set": "Europe/Brussels"
    }
  ],
  "ports": [
    "8989/tcp"
  ],
  "volumes": [
    "/config", 
    "/downloads",
    "/tv"
  ]
},
{
  "title": "Radarr",
  "description": "Automated movies downloader",
  "categories": ["bellecerise", "multimedia"],
  "privileged": true,
  "restart_policy": "always",
  "platform": "linux",
  "network": "host",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/radarr.png",
  "image": "linuxserver/radarr:latest",
  "env": [
    {
      "name": "PGID",
      "label": "ID of the group running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "PUID",
      "label": "ID of the user running the application. (ex: 999)",
      "set": 999
    },
    {
      "name": "TZ",
      "label": "Timezone for the container. (ex: Europe/Brussels)",
      "set": "Europe/Brussels"
    }
  ],
  "ports": [
    "7878/tcp"
  ],
  "volumes": [
    "/config", 
    "/downloads",
    "/movies"
  ]
},
{
  "title": "titra",
  "description": "open source time tracking for small companies",
  "categories": ["project-management"],
  "platform": "linux",
  "logo": "https://github.com/faburem/titra/raw/master/public/favicons/android-chrome-192x192.png",
  "image": "kromit/titra:latest",
  "ports": [
    "3000/tcp"
  ],
  "env": [
    {
      "name": "ROOT_URL",
      "label": "Root URL"
    },
    {
      "name": "MONGO_URL",
      "label": "Mongodb URL"
    }
  ],
  "restart_policy": "always"
},
{
  "title": "wekan",
  "description": "open source time tracking for small companies",
  "categories": ["project-management"],
  "platform": "linux",
  "logo": "https://avatars2.githubusercontent.com/u/11725037?v=4&s=400",
  "image": "wekanteam:wekan:latest",
  "ports": [
    "3000/tcp"
   ],
  "env": [
     {
       "name": "ROOT_URL",
       "label": "Root URL"
     },
     {
       "name": "MONGO_URL",
       "label": "Mongodb URL"
     }
   ],
   "restart_policy": "always"
 },
 {
   "title": "Rocket.chat",
   "description": "Have your own Slack like online chat, built with Meteor.",
   "categories": ["messaging"],
   "platform": "linux",
   "logo": "https://github.com/RocketChat/Rocket.Chat/raw/develop/public/images/logo/android-chrome-192x192.png",
   "image": "rocket.chat:latest",
   "ports": [
     "3000/tcp"
    ],
   "env": [
      {
        "name": "ROOT_URL",
        "label": "Root URL"
      },
      {
        "name": "MONGO_URL",
        "label": "Mongodb URL"
      }
    ],
    "restart_policy": "always"
  },
  {
    "title": "Pasteboard",
    "description": "Clipboard and drag & drop image sharing web app",
    "categories": ["storage"],
    "platform": "linux",
    "logo": "https://github.com/JoelBesada/pasteboard/raw/master/public/images/splash-image.png",
    "image": "anthodingo/docker-pasteboard:latest",
    "ports": [
      "4000/tcp"
     ],
     "volumes": [
       "/pasteboard/public/storage"
     ],
     "restart_policy": "always"
   },
   {
     "title": "Privatebin",
     "description": "PrivateBin is a minimalist, open source online pastebin where the server has zero knowledge of pasted data.",
     "categories": ["storage"],
     "platform": "linux",
     "logo": "https://github.com/PrivateBin/PrivateBin/raw/master/img/android-chrome-192x192.png",
     "image": "wonderfall/privatebin:latest",
     "ports": [
       "8888/tcp"
      ],
      "volumes": [
        "/privatebin/data"
      ],
      "restart_policy": "always"
    },
    {
      "title": "Dokuwiki",
      "description": "DokuWiki is a simple to use and highly versatile Open Source wiki software that doesn't require a database.",
      "categories": ["wiki"],
      "platform": "linux",
      "logo": "https://www.dokuwiki.org/lib/tpl/dokuwiki/images/logo.png",
      "image": "moritanosuke/dokuwiki-docker:latest",
      "ports": [
        "80/tcp"
       ],
       "volumes": [
         "/dokuwiki-data",
         "/dokuwiki-conf",
   "/dokuwiki-plugins"
       ],
       "restart_policy": "always"
     },
     {
       "title": "droppy",
       "description": "droppy is a self-hosted file storage server with a web interface and capabilities to edit files and view media directly in the browser.",
       "categories": ["storage"],
       "platform": "linux",
       "logo": "https://github.com/silverwind/droppy/raw/master/client/images/logo192.png",
       "image": "silverwind/droppy:latest",
       "ports": [
         "8989/tcp"
        ],
        "volumes": [
          "/config",
          "/files"
        ],
        "restart_policy": "always"
      },
      {
        "title": "cryptpad",
        "description": "CryptPad is the zero knowledge realtime collaborative editor.",
        "categories": ["storage"],
        "platform": "linux",
        "logo": "https://github.com/xwiki-labs/cryptpad/raw/master/customize.dist/main-favicon.png",
        "image": "dalareo/cryptpad:latest",
        "ports": [
          "3000/tcp"
         ],
         "volumes": [
           "/cryptpad/datastore",
           "/cryptpad/customize"
         ],
         "restart_policy": "always"
       },
{
  "title": "Organizr ",
  "description": "Organizr container",
  "categories": ["docker"],
  "platform": "linux",
  "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/organizr-icon.png",
  "image": "lsiocommunity/organizr:latest",
  "ports": [
    "80/tcp",
    "443/tcp"
  ],
  "volumes": ["/opt/organizr/config"]
},
{
  "title": "Registry",
  "description": "Docker image registry",
  "categories": ["docker"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/registry.png",
  "image": "registry:latest",
  "ports": [
    "5000/tcp"
  ],
  "volumes": ["/var/lib/registry"]
},
{
  "title": "Nginx",
  "description": "High performance web server",
  "categories": ["webserver"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/nginx.png",
  "image": "nginx:latest",
  "ports": [
    "80/tcp",
    "443/tcp"
  ],
  "volumes": ["/etc/nginx", "/var/www/html"]
},
{
  "title": "Httpd",
  "description": "Open-source HTTP server",
  "categories": ["webserver"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/httpd.png",
  "image": "httpd:latest",
  "ports": [
    "80/tcp"
  ],
  "volumes": ["/usr/local/apache2/htdocs/"]
},
{
  "title": "Caddy",
  "description": "HTTP/2 web server with automatic HTTPS",
  "categories": ["webserver"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/caddy.png",
  "image": "abiosoft/caddy:latest",
  "ports": [
    "80/tcp", "443/tcp", "2015/tcp"
  ],
  "volumes": ["/root/.caddy"]
},
{
  "title": "MySQL",
  "description": "The most popular open-source database",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/mysql.png",
  "image": "mysql:latest",
  "env": [
    {
      "name": "MYSQL_ROOT_PASSWORD",
      "label": "Root password"
    }
  ],
  "ports": [
    "3306/tcp"
  ],
  "volumes": ["/var/lib/mysql"]
},
{
  "title": "MariaDB",
  "description": "Performance beyond MySQL",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/mariadb.png",
  "image": "mariadb:latest",
  "env": [
    {
      "name": "MYSQL_ROOT_PASSWORD",
      "label": "Root password"
    }
  ],
  "ports": [
    "3306/tcp"
  ],
  "volumes": ["/var/lib/mysql"]
},
{
  "title": "PostgreSQL",
  "description": "The most advanced open-source database",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/postgres.png",
  "image": "postgres:latest",
  "env": [
    {
      "name": "POSTGRES_USER",
      "label": "Superuser"
    },
    {
      "name": "POSTGRES_PASSWORD",
      "label": "Superuser password"
    }
  ],
  "ports": [
    "5432/tcp"
  ],
  "volumes": ["/var/lib/postgresql/data"]
},
{
  "title": "Mongo",
  "description": "Open-source document-oriented database",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/mongo.png",
  "image": "mongo:latest",
  "ports": [
    "27017/tcp"
  ],
  "volumes": ["/data/db"]
},
{
  "title": "CockroachDB",
  "description": "An open-source, survivable, strongly consistent, scale-out SQL database",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/cockroachdb.png",
  "image": "cockroachdb/cockroach:latest",
  "ports": [
    "26257/tcp",
    "8080/tcp"
  ],
  "volumes": ["/cockroach/cockroach-data"],
  "command": "start --insecure"
},
{
  "title": "CrateDB",
  "description": "An open-source distributed SQL database",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/cratedb.png",
  "image": "crate:latest",
  "ports": [
    "4200/tcp",
    "4300/tcp"
  ],
  "volumes": ["/data"]
},
{
  "title": "Elasticsearch",
  "description": "Open-source search and analytics engine",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/elasticsearch.png",
  "image": "elasticsearch:latest",
  "ports": [
    "9200/tcp",
    "9300/tcp"
  ],
  "volumes": ["/usr/share/elasticsearch/data"]
},
{
  "title": "Minio",
  "description": "A distributed object storage server built for cloud applications and devops",
  "categories": ["storage"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/minio.png",
  "image": "minio/minio:latest",
  "ports": [
    "9000/tcp"
  ],
  "env": [
    {
      "name": "MINIO_ACCESS_KEY",
      "label": "Minio access key"
    },
    {
      "name": "MINIO_SECRET_KEY",
      "label": "Minio secret key"
    }
  ],
  "volumes": ["/export", "/root/.minio"],
  "command": "server /export"
},
{
  "title": "Scality S3",
  "description": "Standalone AWS S3 protocol server",
  "categories": ["storage"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/scality-s3.png",
  "image": "scality/s3server",
  "ports": [
    "8000/tcp"
  ],
  "env": [
    {
      "name": "SCALITY_ACCESS_KEY",
      "label": "Scality S3 access key"
    },
    {
      "name": "SCALITY_SECRET_KEY",
      "label": "Scality S3 secret key"
    }
  ],
  "volumes": ["/usr/src/app/localData", "/usr/src/app/localMetadata"]
},
{
  "title": "SQL Server",
  "description": "Microsoft SQL Server on Linux",
  "categories": ["database"],
  "platform": "linux",
  "note": "Password needs to include at least 8 characters including uppercase, lowercase letters, base-10 digits and/or non-alphanumeric symbols.",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "microsoft/mssql-server-linux:latest",
  "ports": [
    "1433/tcp"
  ],
  "env": [
    {
      "name": "ACCEPT_EULA",
      "set": "Y"
    },
    {
      "name": "SA_PASSWORD",
      "label": "SA password"
    }
  ]
},
{
  "title": "SQL Server",
  "description": "Microsoft SQL Server for Windows containers",
  "categories": ["database"],
  "platform": "windows",
  "note": "Password needs to include at least 8 characters including uppercase, lowercase letters, base-10 digits and/or non-alphanumeric symbols.",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "microsoft/mssql-server-windows:latest",
  "ports": [
    "1433/tcp"
  ],
  "env": [
    {
      "name": "ACCEPT_EULA",
      "set": "Y"
    },
    {
      "name": "sa_password",
      "label": "SA password"
    }
  ],
  "volumes": ["C:/temp/"]
},
{
  "title": "SQL Server Express",
  "description": "Microsoft SQL Server Express for Windows containers",
  "categories": ["database"],
  "platform": "windows",
  "note": "Password needs to include at least 8 characters including uppercase, lowercase letters, base-10 digits and/or non-alphanumeric symbols.",
  "logo": "https://cloudinovasi.id/assets/img/logos/microsoft.png",
  "image": "microsoft/mssql-server-windows-express:latest",
  "ports": [
    "1433/tcp"
  ],
  "env": [
    {
      "name": "ACCEPT_EULA",
      "set": "Y"
    },
    {
      "name": "sa_password",
      "label": "SA password"
    }
  ],
  "volumes": ["C:/temp/"]
},
{
  "title": "Solr",
  "description": "Open-source enterprise search platform",
  "categories": ["search-engine"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/solr.png",
  "image": "solr:latest",
  "ports": [
    "8983/tcp"
  ],
  "volumes": ["/opt/solr/mydata"]
},
{
  "title": "Redis",
  "description": "Open-source in-memory data structure store",
  "categories": ["database"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/redis.png",
  "image": "redis:latest",
  "ports": [
    "6379/tcp"
  ],
  "volumes": ["/data"]
},
{
  "title": "RabbitMQ",
  "description": "Highly reliable enterprise messaging system",
  "categories": ["messaging"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/rabbitmq.png",
  "image": "rabbitmq:latest",
  "ports": [
    "5671/tcp",
    "5672/tcp"
  ],
  "volumes": ["/var/lib/rabbitmq"]
},
{
  "title": "Plesk",
  "description": "WebOps platform and hosting control panel",
  "categories": ["CMS"],
  "platform": "linux",
  "note": "Default credentials: admin / changeme",
  "logo": "https://cloudinovasi.id/assets/img/logos/plesk.png",
  "image": "plesk/plesk:preview",
  "ports": [
    "21/tcp", "80/tcp", "443/tcp", "8880/tcp", "8443/tcp", "8447/tcp"
  ]
},
{
  "title": "WordPress",
  "description": "A free and open-source CMS",
  "categories": ["CMS"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/wordpress.png",
  "image": "wordpress:latest",
  "env": [
    {
      "name": "WORDPRESS_DB_HOST",
      "label": "MySQL database host",
      "type": "container"
    },
    {
      "name": "WORDPRESS_DB_PASSWORD",
      "label": "Database password"
    }
  ],
  "ports": [
    "80/tcp"
  ],
  "volumes": ["/var/www/html"]
},
[
{
  "title": "Wordpress IEMN",
  "description": "Wordpress custom image",
  "categories": ["CMS"],
  "platform": "linux",
  "logo": "http://www.iemn.fr/wp-content/uploads/2016/04/logo_IEMN.png",
  "image": "bevox/wordpressiemn:latest",
  "env": [
    {
      "name": "WORDPRESS_DB_HOST",
      "label": "MySQL database host"
    },
    {
      "name": "WORDPRESS_DB_NAME",
      "label": "MySQL database name"
    },
    {
      "name": "WORDPRESS_DB_USER",
      "label": "MySQL database user"
    },
    {
      "name": "WORDPRESS_DB_PASSWORD",
      "label": "Database password"
    }
  ],
  "ports": [
    "80/tcp"
  ],
  "volumes": ["/var/www/html"]
},
{
  "title": "Joomla",
  "description": "Another free and open-source CMS",
  "categories": ["CMS"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/joomla.png",
  "image": "joomla:latest",
  "env": [
    {
      "name": "JOOMLA_DB_HOST",
      "label": "MySQL database host",
      "type": "container"
    },
    {
      "name": "JOOMLA_DB_PASSWORD",
      "label": "Database password"
    }
  ],
  "ports": [
    "80/tcp"
  ],
  "volumes": ["/var/www/html"]
},
{
  "title": "Drupal",
  "description": "Open-source content management framework",
  "categories": ["CMS"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/drupal.png",
  "image": "drupal:latest",
  "ports": [
    "80/tcp"
  ],
  "volumes": ["/var/www/html"]
},
{
  "title": "Plone",
  "description": "A free and open-source CMS built on top of Zope",
  "categories": ["CMS"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/plone.png",
  "image": "plone:latest",
  "ports": [
    "8080/tcp"
  ],
  "volumes": ["/data"]
},
{
  "title": "Magento 2",
  "description": "Open-source e-commerce platform",
  "categories": ["CMS"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/magento.png",
  "image": "alankent/gsd:latest",
  "ports": [
    "80/tcp",
    "3000/tcp",
    "3001/tcp"
  ],
  "volumes": ["/var/www/html/"]
},
{
  "title": "Mautic",
  "description": "Open-source marketing automation platform",
  "categories": ["marketing"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/mautic.png",
  "image": "mautic/mautic:latest",
  "env": [
    {
      "name": "MAUTIC_DB_HOST",
      "label": "MySQL database host",
      "type": "container"
    },
    {
      "name": "MAUTIC_DB_PASSWORD",
      "label": "Database password"
    }
  ],
  "ports": [
    "80/tcp"
  ],
  "volumes": ["/var/www/html"]
},
{
  "title": "Wowza",
  "description": "Streaming media server",
  "categories": ["streaming"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/wowza.png",
  "image": "sameersbn/wowza:4.1.2-8",
  "env": [
    {
      "name": "WOWZA_ACCEPT_LICENSE",
      "label": "Agree to Wowza EULA",
      "set": "yes"
    },
    {
      "name": "WOWZA_KEY",
      "label": "License key"
    }
  ],
  "ports": [
    "1935/tcp",
    "8086/tcp",
    "8087/tcp",
    "8088/tcp"
  ],
  "volumes": ["/var/lib/wowza"]
},
{
  "title": "Jenkins",
  "description": "Open-source continuous integration tool",
  "categories": ["continuous-integration"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/jenkins.png",
  "image": "jenkins/jenkins:lts",
  "ports": [
    "8080/tcp",
    "50000/tcp"
  ],
  "env": [
    {
      "name": "JENKINS_OPTS",
      "label": "Jenkins options"
    }
  ],
  "volumes": ["/var/jenkins_home"]
},
{
  "title": "Redmine",
  "description": "Open-source project management tool",
  "categories": ["project-management"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/redmine.png",
  "image": "redmine:latest",
  "ports": [
    "3000/tcp"
  ],
  "volumes": ["/usr/src/redmine/files"]
},
{
  "title": "Odoo",
  "description": "Open-source business apps",
  "categories": ["project-management"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/odoo.png",
  "image": "odoo:latest",
  "env": [
    {
      "name": "HOST",
      "label": "PostgreSQL database host",
      "type": "container"
    },
    {
      "name": "USER",
      "label": "Database user"
    },
    {
      "name": "PASSWORD",
      "label": "Database password"
    }
  ],
  "ports": [
    "8069/tcp"
  ],
  "volumes": ["/var/lib/odoo", "/mnt/extra-addons"]
},
{
  "title": "Urbackup",
  "description": "Open-source network backup",
  "categories": ["backup"],
  "platform": "linux",
  "note": "This application web interface is exposed on the port 55414 inside the container.",
  "logo": "https://cloudinovasi.id/assets/img/logos/urbackup.png",
  "image": "cfstras/urbackup",
  "ports": [
    "55413/tcp", "55414/tcp", "55415/tcp", "35622/tcp"
  ],
  "volumes": ["/var/urbackup"]
},
{
  "title": "CommandBox",
  "description": "ColdFusion (CFML) CLI",
  "categories": ["development"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/ortussolutions-commandbox.png",
  "image": "ortussolutions/commandbox:latest",
  "env": [
    {
      "name": "CFENGINE",
      "set": "lucee@4.5"
    }
  ],
  "ports": [
    "8080/tcp", "8443/tcp"
  ]
},
{
  "title": "ContentBox",
  "description": "Open-source modular CMS",
  "categories": ["CMS"],
  "platform": "linux",
  "logo": "https://cloudinovasi.id/assets/img/logos/ortussolutions-contentbox.png",
  "image": "ortussolutions/contentbox:latest",
  "env": [
    {
      "name": "express",
      "set": "true"
    },
    {
      "name": "install",
      "set": "true"
    },
    {
      "name": "CFENGINE",
      "set": "lucee@4.5"
    }
  ],
  "ports": [
    "8080/tcp", "8443/tcp"
  ],
  "volumes": ["/data/contentbox/db", "/app/includes/shared/media"]
}
]]
